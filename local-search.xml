<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>swagger3配置</title>
    <link href="/2022/10/18/springBoot-swagger3/"/>
    <url>/2022/10/18/springBoot-swagger3/</url>
    
    <content type="html"><![CDATA[<h4 id="gateway和swagger3整合"><a href="#gateway和swagger3整合" class="headerlink" title="gateway和swagger3整合"></a>gateway和swagger3整合</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- swagger增强 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- gateway依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><ul><li>swagger Resources提供类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Primary;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Primary</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SwaggerResourcesProvider</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取网关的路由信息,也可以从配置文件获取</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RouteLocator routeLocator;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SWAGGER3URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/v3/api-docs&quot;</span>;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String self;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;SwaggerResource&gt; <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        List&lt;SwaggerResource&gt; resources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//此处是讲gateway网关自己的swagger也显示出来，若不需要可以不设置</span><br>        <span class="hljs-type">SwaggerResource</span> <span class="hljs-variable">swaggerResourceSelf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwaggerResource</span>();<br>        swaggerResourceSelf.setUrl(SWAGGER3URL +<span class="hljs-string">&quot;?group=&quot;</span> + self);<br>        swaggerResourceSelf.setName(self);<br>        swaggerResourceSelf.setSwaggerVersion(<span class="hljs-string">&quot;3.0&quot;</span>);<br>        resources.add(swaggerResourceSelf);<br><br>        List&lt;String&gt; routes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        routeLocator.getRoutes()<br>                .filter(route -&gt; route.getUri().getHost() != <span class="hljs-literal">null</span>)<br>                .subscribe(route -&gt; routes.add(route.getUri().getHost()));<br><br>        Set&lt;String&gt; dealed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        routes.forEach(instance -&gt; &#123;<br>            <span class="hljs-comment">//拼接url(通过单机版可以看到url的实际样子，故按其拼接)</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/api/&quot;</span> + instance.toLowerCase() + SWAGGER3URL +<span class="hljs-string">&quot;?group=&quot;</span> + instance.toLowerCase();<br>            <span class="hljs-keyword">if</span> (!dealed.contains(url)) &#123;<br>                dealed.add(url);<br>                <span class="hljs-type">SwaggerResource</span> <span class="hljs-variable">swaggerResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwaggerResource</span>();<br>                swaggerResource.setUrl(url);<br>                swaggerResource.setName(instance);<br>                swaggerResource.setSwaggerVersion(<span class="hljs-string">&quot;3.0&quot;</span>);<br>                resources.add(swaggerResource);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span> resources;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>gateway网关swagger(单机版也可以按此配置)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.async.DeferredResult;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.*;<br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><span class="hljs-keyword">import</span> springfox.documentation.service.*;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br><br><br>    <span class="hljs-comment">//获取当前服务名，也可以直接写死</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">systemApi</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>                .groupName(name) <span class="hljs-comment">//传入分组名</span><br>                .genericModelSubstitutes(DeferredResult.class).useDefaultResponseMessages(<span class="hljs-literal">false</span>).forCodeGeneration(<span class="hljs-literal">true</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.simplemw&quot;</span>)) <span class="hljs-comment">//扫描包的路径</span><br>                .paths(PathSelectors.any()).build()<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>) <span class="hljs-comment">//设置swagger请求的前缀等</span><br>                .globalRequestParameters(getGlobalRequestParameters())  <span class="hljs-comment">//通用请求参数配置</span><br>                .globalResponses(HttpMethod.GET, getGlobalResponseMessage())  <span class="hljs-comment">//通用响应参数配置</span><br>                .globalResponses(HttpMethod.POST, getGlobalResponseMessage())<br>                .apiInfo(systemApiInfo());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">systemApiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;swagger3 title&quot;</span>)<br>                .description(<span class="hljs-string">&quot;测试swagger整合knife4j生成离线接口文档&quot;</span>)<br>                .termsOfServiceUrl(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;123456@qq.com&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用全局请求参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;RequestParameter&gt; <span class="hljs-title function_">getGlobalRequestParameters</span><span class="hljs-params">()</span> &#123;<br>        List&lt;RequestParameter&gt; parameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        parameters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>()<br>                .name(<span class="hljs-string">&quot;Authorization&quot;</span>)<br>                .description(<span class="hljs-string">&quot;token&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .in(ParameterType.HEADER)<br>                .build());<br>        parameters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>()<br>                .name(<span class="hljs-string">&quot;lang&quot;</span>)<br>                .description(<span class="hljs-string">&quot;多语言切换&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .in(ParameterType.HEADER)<br>                .build());<br>        <span class="hljs-keyword">return</span> parameters;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用响应码配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;Response&gt; <span class="hljs-title function_">getGlobalResponseMessage</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Response&gt; responseList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        responseList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseBuilder</span>().code(<span class="hljs-string">&quot;404&quot;</span>).description(<span class="hljs-string">&quot;找不到资源&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> responseList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="网关放行"><a href="#网关放行" class="headerlink" title="网关放行"></a>网关放行</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">/swagger-ui/**</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/webjars/**</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/swagger-resources/**</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/v3/api-docs/**</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Swagger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Swagger3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql索引</title>
    <link href="/2022/09/15/mysql-mysql%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/09/15/mysql-mysql%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h5 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h5><ul><li>存储引擎与磁盘的交互是以page页的形式，page页的数据存储大小是16k</li><li>B+树就是将page页的位置信息生成目录<ul><li>目录记录的主要参数是 序号开始、页码</li><li>然后又对目录按同样的方式创建目录</li></ul></li></ul><p>注：</p><ul><li>创建目录的层级越高，存储引擎与磁盘的交互次数就越多(查询时间就越长)</li><li>对于大数据字段，由于数据会保存在多个page页中，会导致目录的层级变高</li><li>若B+树根据的字段是无序的，则每次新增或修改会导致更多次的B+树的分裂和合并</li></ul><h5 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h5><ul><li>主键索引</li></ul><p>表设置主键后，会根据主键生成B+树</p><ul><li>聚集索引<ul><li>表未设置主键后会自动创建聚集索引，会根据聚集索引生成B+树</li><li>以非空的唯一索引字段作为聚集索引，若非空的唯一索引也没有则会以rowid做为聚集索引</li></ul></li></ul><p>二级索引</p><ul><li><p>联合索引</p><ul><li>多个字段保证唯一创建B+树</li><li>联合索引的好处是不用进行回表<ul><li>若查询的字段在联合索引之中，则只需要查询联合索引B+树的目录层级</li><li>若查询的字段不在联合索引之中，则从目录层级获取到联合索引存在的字段后，还要去查询主键索引或聚集索引</li></ul></li></ul></li><li><p>覆盖索引</p><ul><li>叶子节点保存主键的值，当需要查询的值不在联合索引中的时候会直接去读取覆盖索引</li><li>使用覆盖索引会减少回表次数</li></ul></li></ul><p>注：</p><ul><li><p>创建索引一定需要避免用 散列性不强 的字段作为索引，即若多个数据该字段都是同样的数据，在进行B+树寻找的时候，找到的范围会很大，索引的作用就不大了</p></li><li><p>面试题：</p><ul><li>为什么一张表的数据达到500万后建议分库分表？</li></ul><p>答：500万数据的表建立索引后，B+树的层级会变得很高，当进行查询的时候，数据引擎与磁盘的交互次数会变得很多，查询效率低</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Mysql相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异步任务</title>
    <link href="/2022/07/15/spring-%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/07/15/spring-%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<ul><li>创建线程池信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskPoolConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(&quot;taskExecutor&quot;)</span><br>    <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">taskExecutro</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ThreadPoolTaskExecutor</span> <span class="hljs-variable">taskExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskExecutor</span>();<br>        taskExecutor.setCorePoolSize(<span class="hljs-number">10</span>);<br>        taskExecutor.setMaxPoolSize(<span class="hljs-number">50</span>);<br>        taskExecutor.setQueueCapacity(<span class="hljs-number">200</span>);<br>        taskExecutor.setKeepAliveSeconds(<span class="hljs-number">60</span>);<br>        taskExecutor.setThreadNamePrefix(<span class="hljs-string">&quot;taskExecutor--&quot;</span>);<br>        taskExecutor.setWaitForTasksToCompleteOnShutdown(<span class="hljs-literal">true</span>);<br>        taskExecutor.setAwaitTerminationSeconds(<span class="hljs-number">60</span>);<br>        <span class="hljs-keyword">return</span> taskExecutor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async(&quot;taskExecutor&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doExecute</span><span class="hljs-params">()</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：调起一次就会去连接池中判断是否有线程，有空余线程则执行</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO流笔记</title>
    <link href="/2022/06/04/%E7%AC%94%E8%AE%B0-%E6%96%87%E4%BB%B6%E6%B5%81%E8%BD%AC%E8%A7%86%E9%A2%91%E6%B5%81/"/>
    <url>/2022/06/04/%E7%AC%94%E8%AE%B0-%E6%96%87%E4%BB%B6%E6%B5%81%E8%BD%AC%E8%A7%86%E9%A2%91%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>linux未部署文件服务器，通过springboot提交对外的地址，将linux的文件转视频流</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li>配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件流转视频流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonStaticResourceHttpRequestHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ResourceHttpRequestHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ATTR_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NON-STATIC-FILE&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Resource <span class="hljs-title function_">getResource</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Path</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> (Path) request.getAttribute(ATTR_FILE);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(filePath);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>业务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UTF8</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<br><span class="hljs-meta">@GetMapping(&quot;/download/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downLoadFile</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//在服务器上的地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">rootUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/root/prod/file/&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(rootUrl+name);<br>    response.setCharacterEncoding(UTF8);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 分片下载 Range表示方式 bytes=100-1000  100-</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">fSize</span> <span class="hljs-operator">=</span> file.length();<br>        response.setContentType(<span class="hljs-string">&quot;application/x-download&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> URLEncoder.encode(file.getName(), UTF8);<br>        response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName);<br>        <span class="hljs-comment">// 支持分片下载</span><br>        response.setHeader(<span class="hljs-string">&quot;Accept-Range&quot;</span>, <span class="hljs-string">&quot;bytes&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;fSize&quot;</span>, String.valueOf(fSize));<br>        response.setHeader(<span class="hljs-string">&quot;fName&quot;</span>, fileName);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, last = fSize - <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != request.getHeader(<span class="hljs-string">&quot;Range&quot;</span>)) &#123;<br>            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">numberRange</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Range&quot;</span>).replaceAll(<span class="hljs-string">&quot;bytes=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            String[] strRange = numberRange.split(<span class="hljs-string">&quot;-&quot;</span>);<br>            <span class="hljs-keyword">if</span> (strRange.length == <span class="hljs-number">2</span>) &#123;<br>                pos = Long.parseLong(strRange[<span class="hljs-number">0</span>].trim());<br>                last = Long.parseLong(strRange[<span class="hljs-number">1</span>].trim());<br>                <span class="hljs-keyword">if</span> (last &gt; fSize-<span class="hljs-number">1</span>) &#123;<br>                    last = fSize - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                pos = Long.parseLong(numberRange.replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).trim());<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">rangeLength</span> <span class="hljs-operator">=</span> last - pos + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">contentRange</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;bytes&quot;</span>).append(pos).append(<span class="hljs-string">&quot;-&quot;</span>).append(last).append(<span class="hljs-string">&quot;/&quot;</span>).append(fSize).toString();<br>        response.setHeader(<span class="hljs-string">&quot;Content-Range&quot;</span>, contentRange);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Length&quot;</span>, String.valueOf(rangeLength));<br><br>        os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(response.getOutputStream());<br>        is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        is.skip(pos);<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (sum &lt; rangeLength) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLength</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (rangeLength - sum);<br>            length = is.read(buffer, <span class="hljs-number">0</span>, (rangeLength - sum) &lt;= buffer.length ? readLength : buffer.length);<br>            sum += length;<br>            os.write(buffer,<span class="hljs-number">0</span>, length);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载完成&quot;</span>);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>)&#123;<br>            is.close();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (os != <span class="hljs-literal">null</span>)&#123;<br>            os.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：请求Springboot的接口就可直接访问视频流</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BIO、NIO笔记</title>
    <link href="/2022/06/04/%E7%AC%94%E8%AE%B0-BIO%E3%80%81NIO/"/>
    <url>/2022/06/04/%E7%AC%94%E8%AE%B0-BIO%E3%80%81NIO/</url>
    
    <content type="html"><![CDATA[<ul><li><p>BIO</p><ul><li><p>B是Blocking，阻塞的意思，所有建立的连接会在内存中一直监听，也就是线程阻塞直到有io请求变化的时候才会继续往下执行</p></li><li><p>由于每一个连接都占内存，所以连接数是有上限的</p></li></ul></li><li><p>NIO</p><ul><li>N是Non-Blocking，不阻塞的意思</li><li>调用java层面封装的 selector多路复用器<ul><li>名字解释：BIO是遍历每个连接进行检查是否有IO操作，NIO是直接监听<strong>就绪事件列表rdlist</strong>，将多个监听变为一个监听</li></ul></li><li>核心原理是通过调用linux内核的epoll的三个函数做操作(windows是基于winsock2)<ul><li>epoll_create 创建监听实例</li><li>epoll_ctl 监听是否有IO操作，若存在则将该IO操作放在<strong>就绪事件列表rdlist</strong>中</li><li>epoll_wait 线程等待监听<strong>就绪事件列表rdlist</strong>，一旦存在则处理该IO操作</li></ul></li></ul></li></ul><p>面试题：</p><ul><li>select、poll、epoll的区别<ul><li>select、poll是BIO的模型，select的连接数有上限，poll无上限</li><li>epool是NIO的模型(JDK1.5及以上存在)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP8266</title>
    <link href="/2022/05/22/ESP8266/"/>
    <url>/2022/05/22/ESP8266/</url>
    
    <content type="html"><![CDATA[<h5 id="1-建立网络连接"><a href="#1-建立网络连接" class="headerlink" title="1.建立网络连接"></a>1.建立网络连接</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span>        <span class="hljs-comment">//引入库函数</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidOut = <span class="hljs-string">&quot;ESP8266&quot;</span>;    <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordOut = <span class="hljs-string">&quot;12345678&quot;</span>;   <span class="hljs-comment">//定义密码</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);         <span class="hljs-comment">//启动串口通讯</span><br>    WiFi.begin(ssidIn, passwordIn);   <span class="hljs-comment">//连接网络    </span><br>    WiFi.softAP(ssidOut, passwordOut);  <span class="hljs-comment">//NodeMCU的AP模式(开放网络)</span><br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;                             <br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br>    Serial.print(<span class="hljs-string">&#x27;连接到的网络为:&#x27;</span>);<br>    Serial.println(WiFi.SSID()); <br>    Serial.print(<span class="hljs-string">&#x27;分配的ip为:&#x27;</span>); <br>    Serial.println(WiFi.localIP()); <br>    <br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-JSON解析"><a href="#2-JSON解析" class="headerlink" title="2.JSON解析"></a>2.JSON解析</h5><p><a href="https://arduinojson.org/v5/assistant/#/step2">自动生成工具</a></p><h6 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ArduinoJson.h&gt;</span></span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>    Serial.begin(<span class="hljs-number">9600</span>);<br><br>    <span class="hljs-comment">//解析</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> capacity = JSON_ARRAY_SIZE(<span class="hljs-number">1</span>) + JSON_OBJECT_SIZE(<span class="hljs-number">2</span>) + <span class="hljs-number">40</span>;<br>    DynamicJsonBuffer <span class="hljs-title function_">jsonBuffer</span><span class="hljs-params">(capacity)</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json = <span class="hljs-string">&quot;[&#123;\&quot;name\&quot;:\&quot;test\&quot;,\&quot;message\&quot;:\&quot;testMessage\&quot;&#125;]&quot;</span>;<br>    JsonArray&amp; root = jsonBuffer.parseArray(json);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* root_0_name = root[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;name&quot;</span>]; <span class="hljs-comment">// &quot;test&quot;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* root_0_message = root[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>]; <span class="hljs-comment">// &quot;testMessage&quot;</span><br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h6 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ArduinoJson.h&gt;</span></span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>    Serial.begin(<span class="hljs-number">9600</span>);<br>    <br>    <span class="hljs-comment">//生成</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> capacity = JSON_ARRAY_SIZE(<span class="hljs-number">1</span>) + JSON_OBJECT_SIZE(<span class="hljs-number">2</span>);<br>    DynamicJsonBuffer <span class="hljs-title function_">jsonBuffer</span><span class="hljs-params">(capacity)</span>;<br>    JsonArray&amp; root = jsonBuffer.createArray();<br>    JsonObject&amp; root_0 = root.createNestedObject();<br>    root_0[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;test&quot;</span>;<br>    root_0[<span class="hljs-string">&quot;message&quot;</span>] = <span class="hljs-string">&quot;testMessage&quot;</span>;<br>    root.printTo(Serial);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-网络请求"><a href="#3-网络请求" class="headerlink" title="3.网络请求"></a>3.网络请求</h5><h6 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span>        <span class="hljs-comment">//引入wifi库函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WebServer.h&gt;</span>   <span class="hljs-comment">//引入webserver库函数</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidOut = <span class="hljs-string">&quot;ESP8266&quot;</span>;    <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordOut = <span class="hljs-string">&quot;12345678&quot;</span>;   <span class="hljs-comment">//定义密码</span><br>ESP8266WebServer <span class="hljs-title function_">esp8266_server</span><span class="hljs-params">(<span class="hljs-number">80</span>)</span>; <span class="hljs-comment">//设置服务器暴露端口</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <br>Serial.begin(<span class="hljs-number">9600</span>);         <span class="hljs-comment">//启动串口通讯</span><br>    WiFi.begin(ssidIn, passwordIn);   <span class="hljs-comment">//连接网络    </span><br>    WiFi.softAP(ssidOut, passwordOut);  <span class="hljs-comment">//NodeMCU的AP模式(开放网络)</span><br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;                             <br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br>    Serial.print(<span class="hljs-string">&#x27;连接到的网络为:&#x27;</span>);<br>    Serial.println(WiFi.SSID()); <br>    Serial.print(<span class="hljs-string">&#x27;分配的ip为:&#x27;</span>); <br>    Serial.println(WiFi.localIP()); <br><br>    esp8266_server.begin(); <span class="hljs-comment">//启动服务器</span><br>    esp8266_server.on(<span class="hljs-string">&quot;/&quot;</span>, handleRoot);<span class="hljs-comment">//连接成功回调函数</span><br>    esp8266_server.onNotFound(handleNotFound); <span class="hljs-comment">//连接失败回调函数</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>  esp8266_server.handleClient();     <span class="hljs-comment">// 处理http服务器访问</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleRoot</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//成功回调函数</span><br>  esp8266_server.send(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-string">&quot;hello word&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleNotFound</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//失败回调函数</span><br>  esp8266_server.send(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-string">&quot;404: Not found&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span>        <span class="hljs-comment">//引入wifi库函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WebServer.h&gt;</span>   <span class="hljs-comment">//引入webserver库函数</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> buttonPin D3            <span class="hljs-comment">//引入按钮引脚D3</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br><span class="hljs-type">bool</span> pinState;  <span class="hljs-comment">//存储引脚状态用变量</span><br>ESP8266WebServer <span class="hljs-title function_">esp8266_server</span><span class="hljs-params">(<span class="hljs-number">80</span>)</span>; <span class="hljs-comment">//设置服务器暴露端口</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>pinMode(LED_BUILTIN, OUTPUT); <span class="hljs-comment">//设置内置LED引脚为输出模式以便控制LED</span><br>    <br>Serial.begin(<span class="hljs-number">9600</span>);         <span class="hljs-comment">//启动串口通讯</span><br>    WiFi.begin(ssidIn, passwordIn);   <span class="hljs-comment">//连接网络</span><br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;                             <br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br>    Serial.print(<span class="hljs-string">&#x27;连接到的网络为:&#x27;</span>);<br>    Serial.println(WiFi.SSID()); <br>    Serial.print(<span class="hljs-string">&#x27;分配的ip为:&#x27;</span>); <br>    Serial.println(WiFi.localIP()); <br><br>    <span class="hljs-comment">//启动服务器</span><br>    esp8266_server.begin();<br>    <span class="hljs-comment">//GET请求</span><br>    esp8266_server.on(<span class="hljs-string">&quot;/&quot;</span>, HTTP_GET ,handleRoot);<br>    <span class="hljs-comment">//GET请求</span><br>esp8266_server.on(<span class="hljs-string">&quot;/refresh&quot;</span>, HTTP_POST ,handrefresh);<br>    <span class="hljs-comment">//创建post请求</span><br>    esp8266_server.on(<span class="hljs-string">&quot;/led&quot;</span>, HTTP_POST, handleLed);<br>    <span class="hljs-comment">//创建post请求</span><br>    esp8266_server.on(<span class="hljs-string">&quot;/send&quot;</span>, HTTP_GET, handSend);<br>    <span class="hljs-comment">//连接失败回调函数</span><br>    esp8266_server.onNotFound(handleNotFound); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <span class="hljs-comment">//监听http请求</span><br>    esp8266_server.handleClient();     <br>    <span class="hljs-comment">//获取引脚状态</span><br>    pinState = digitalRead(buttonPin); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleRoot</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//返回html</span><br>esp8266_server.send(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;text/html&quot;</span>,<span class="hljs-string">&quot;&lt;form action=\&quot;/led\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;Toggle LED\&quot;&gt;&lt;/form&gt;&lt;form action=\&quot;/refresh\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;REFRESH\&quot;&gt;&lt;/form&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleNotFound</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//失败回调函数</span><br>esp8266_server.send(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-string">&quot;404: Not found&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handrefresh</span><span class="hljs-params">()</span>&#123;<br>    <br>    <span class="hljs-comment">//开发板Flash按键控制电位，按下时D3为高电平，不按时为低电平</span><br><span class="hljs-keyword">if</span>(pinState == HIGH)&#123;<span class="hljs-comment">//当按键引脚D3为高电平</span><br>    digitalWrite(LED_BUILTIN,<span class="hljs-literal">true</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 当按键引脚D3为低电平</span><br>    digitalWrite(LED_BUILTIN,<span class="hljs-literal">false</span>);<br>  &#125;<br>    <br>    esp8266_server.sendHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-comment">//发送Http相应代码303 跳转  </span><br>    esp8266_server.send(<span class="hljs-number">303</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleLed</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//读取当前led的灯的状态</span><br>    Serial.print(digitalRead(LED_BUILTIN));<br>    <span class="hljs-comment">//更改led灯的状态</span><br>    digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));<br>    <span class="hljs-comment">//跳转回页面根目录</span><br>    esp8266_server.sendHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-comment">//发送Http相应代码303 跳转  </span><br>    esp8266_server.send(<span class="hljs-number">303</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handSend</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//更改led灯的状态</span><br>    digitalWrite(LED_BUILTIN,<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFiMulti.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* host = <span class="hljs-string">&quot;192.168.1.3&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> httpPort = <span class="hljs-number">80</span>;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-comment">//启动串口通讯</span><br>    Serial.begin(<span class="hljs-number">9600</span>);<br>    Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>    WiFi.begin(ssidIn, passwordIn);   <span class="hljs-comment">//连接网络                            </span><br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <span class="hljs-comment">//发送请求</span><br>    wifiClientRequest();<br>    delay(<span class="hljs-number">1000</span>);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">wifiClientRequest</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//创建client</span><br>    WiFiClient client;  <br><br><span class="hljs-comment">//拼请求</span><br>    String url = <span class="hljs-string">&quot;/send&quot;</span><br>    String httpRequest =  String(<span class="hljs-string">&quot;GET &quot;</span>) + url + <span class="hljs-string">&quot; HTTP/1.1\r\n&quot;</span> +<br>        <span class="hljs-string">&quot;Host: &quot;</span> + host + <span class="hljs-string">&quot;\r\n&quot;</span> +<br>        <span class="hljs-string">&quot;Connection: close\r\n&quot;</span> +<br>        <span class="hljs-string">&quot;\r\n&quot;</span>;<br><br>    <span class="hljs-comment">//连接服务器</span><br>    <span class="hljs-keyword">if</span> (client.connect(host, httpPort)) &#123;<br>        <span class="hljs-comment">//发送请求</span><br>        client.print(httpRequest);<br>        <span class="hljs-comment">//打印响应信息</span><br>        Serial.println(httpRequest);  <br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        Serial.println(<span class="hljs-string">&quot; failed&quot;</span>);<br>    &#125;<br><br>    client.stop();                         <br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ESP8266HTTPClient"><a href="#ESP8266HTTPClient" class="headerlink" title="ESP8266HTTPClient"></a>ESP8266HTTPClient</h6><ul><li>GET</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266HTTPClient.h&gt;</span></span><br> <br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>  <span class="hljs-comment">//启动串口通讯</span><br>    Serial.begin(<span class="hljs-number">9600</span>);<br>    Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//连接网络</span><br>    WiFi.begin(ssidIn, passwordIn);          <br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> ((WiFi.status() == WL_CONNECTED)) &#123;<br>    http_get();<br>  &#125;<br>  delay(<span class="hljs-number">10000</span>);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">http_get</span><span class="hljs-params">()</span>&#123;<br>  <br>    <span class="hljs-comment">//创建client</span><br>    WiFiClient client;<br>    <span class="hljs-comment">//创建http对象</span><br>    HTTPClient http;<br>    <span class="hljs-comment">//配置请求地址</span><br>    http.begin(client, <span class="hljs-string">&quot;http://api.seniverse.com/v3/weather/now.json?key=SpciTJPArpECQAq0t&amp;location=Beijing&amp;language=en&amp;unit=c&quot;</span>);<br>    <span class="hljs-comment">//发送请求</span><br>    <span class="hljs-type">int</span> httpCode = http.GET();<br>    <br>    <span class="hljs-comment">//判断响应</span><br>    <span class="hljs-keyword">if</span> (httpCode == HTTP_CODE_OK) &#123;<br>        String responsePayload = http.getString();<br>        Serial.println(<span class="hljs-string">&quot;Server Response Payload: &quot;</span>);<br>        Serial.println(responsePayload);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.println(<span class="hljs-string">&quot;Server Respose Code：&quot;</span>);<br>        Serial.println(httpCode);<br>    &#125;<br><br>    http.end();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>POST  <a href="http://www.taichi-maker.com/homepage/iot-development/iot-dev-reference/esp8266-c-plus-plus-reference/esp8266httpclient/post/">参考</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266HTTPClient.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-comment">//启动串口通讯</span><br>    Serial.begin(<span class="hljs-number">9600</span>);<br>    Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//连接网络</span><br>    WiFi.begin(ssidIn, passwordIn);          <br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> ((WiFi.status() == WL_CONNECTED)) &#123;<br>    http_post();<br>  &#125;<br>  delay(<span class="hljs-number">10000</span>);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">http_post</span><span class="hljs-params">()</span> &#123;<br> <br>    <span class="hljs-comment">//创建client</span><br>    WiFiClient client;<br>    <span class="hljs-comment">//创建http对象</span><br>    HTTPClient http;<br>    <span class="hljs-comment">//配置请求地址</span><br>    http.begin(client, <span class="hljs-string">&quot;http://192.168.1.3:8081/posttest&quot;</span>);<br>    <span class="hljs-comment">//发送请求</span><br>    <span class="hljs-type">int</span> httpCode = http.POST(<span class="hljs-string">&quot;this is Requestbody&quot;</span>);<br>    <span class="hljs-comment">//连接失败时 httpCode时为负数</span><br>    <span class="hljs-keyword">if</span> (httpCode &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//打印响应头</span><br>        Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[HTTP] POST... code: %d\n&quot;</span>, httpCode);<br>        <span class="hljs-comment">//响应信息判断</span><br>        <span class="hljs-keyword">if</span> (httpCode == HTTP_CODE_OK) &#123;<br>            <span class="hljs-type">const</span> String&amp; payload = http.getString();<br>            Serial.println(<span class="hljs-string">&quot;received payload:\n&lt;&lt;&quot;</span>);<br>            Serial.println(payload);<br>            Serial.println(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[HTTP] POST... failed, error: %s\n&quot;</span>, http.errorToString(httpCode).c_str());<br>    &#125;<br>    <span class="hljs-comment">//关闭http连接</span><br>    http.end();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-闪存文件"><a href="#4-闪存文件" class="headerlink" title="4.闪存文件"></a>4.闪存文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;FS.h&gt;</span>  </span><br><br><span class="hljs-comment">//创建文件夹目录</span><br>String folder_name = <span class="hljs-string">&quot;/source&quot;</span>;<br><span class="hljs-comment">//设置文件路径</span><br>String file_name = <span class="hljs-string">&quot;/source/test.txt&quot;</span>;<br>String d_file_name = <span class="hljs-string">&quot;/source/delete.txt&quot;</span>;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//格式化闪存</span><br>  SPIFFS.format();<br>  <br>    <span class="hljs-keyword">if</span>(SPIFFS.begin())&#123; <span class="hljs-comment">// 启动SPIFFS</span><br>        Serial.println(<span class="hljs-string">&quot;SPIFFS Started.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.println(<span class="hljs-string">&quot;SPIFFS Failed to Start.&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//建立文件夹目录</span><br>    Dir dir = SPIFFS.openDir(folder_name);<br>    <span class="hljs-comment">//打印该目录的所有文件名</span><br>    <span class="hljs-keyword">while</span> (dir.next()) &#123;<br>        Serial.println(dir.fileName());<br>    &#125;<br>    <span class="hljs-comment">//删除文件</span><br>    SPIFFS.remove(d_file_name)<br>    <br>    <span class="hljs-comment">//打开文件流</span><br>    File dataFileWrite = SPIFFS.open(file_name, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-comment">//写入数据</span><br>    dataFileWrite.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    <span class="hljs-comment">//关闭文件流</span><br>    dataFileWrite.close();<br>    <br>    <br>    <span class="hljs-comment">//确认闪存中是否有file_name文件</span><br>    <span class="hljs-keyword">if</span> (SPIFFS.exists(file_name))&#123;<br>        Serial.print(file_name);<br>        Serial.println(<span class="hljs-string">&quot; FOUND.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.print(file_name);<br>        Serial.print(<span class="hljs-string">&quot; NOT FOUND.&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//打开文件流</span><br>    File dataFileRead = SPIFFS.open(file_name, <span class="hljs-string">&quot;r&quot;</span>); <br>    <span class="hljs-comment">//读取文件内容并且通过串口监视器输出文件信息</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;dataFileRead.size(); i++)&#123;<br>        Serial.print((<span class="hljs-type">char</span>)dataFileRead.read());       <br>    &#125;<br>    <span class="hljs-comment">//关闭文件流</span><br>    dataFileRead.close();<br>    <br>    <span class="hljs-comment">//追加信息</span><br>    <span class="hljs-comment">//File dataFile = SPIFFS.open(file_name, &quot;a&quot;);</span><br>    <br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-OLED"><a href="#5-OLED" class="headerlink" title="5.OLED"></a>5.OLED</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SPI.h&gt;</span> <span class="hljs-comment">// 加载SPI库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span> <span class="hljs-comment">// 加载Wire库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_GFX.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_GFX库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_SSD1306.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_SSD1306库</span></span><br><br><span class="hljs-type">char</span> temp[<span class="hljs-number">3</span>]=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-comment">// 定义 OLED屏幕的分辨率</span><br>Adafruit_SSD1306 display = Adafruit_SSD1306(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, &amp;Wire);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">115200</span>); <span class="hljs-comment">// 设置串口波特率</span><br>  Serial.println(<span class="hljs-string">&quot;OLED FeatherWing test&quot;</span>); <span class="hljs-comment">// 串口输出</span><br>  display.begin(SSD1306_SWITCHCAPVCC, <span class="hljs-number">0x3C</span>); <span class="hljs-comment">// 设置OLED的I2C地址</span><br>  display.clearDisplay(); <span class="hljs-comment">// 清空屏幕</span><br>  display.setTextSize(<span class="hljs-number">2</span>); <span class="hljs-comment">// 设置字体大小</span><br>  display.setTextColor(SSD1306_WHITE); <span class="hljs-comment">// 设置字体颜色</span><br>  display.setCursor(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置开始显示文字的坐标</span><br>  display.println(<span class="hljs-string">&quot;Hello World!&quot;</span>); <span class="hljs-comment">// 输出的字符</span><br>  display.display(); <span class="hljs-comment">// 使更改的显示生效</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="6-心知天气"><a href="#6-心知天气" class="headerlink" title="6.心知天气"></a>6.心知天气</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266HTTPClient.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ArduinoJson.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SPI.h&gt;</span> <span class="hljs-comment">// 加载SPI库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span> <span class="hljs-comment">// 加载Wire库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_GFX.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_GFX库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_SSD1306.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_SSD1306库</span></span><br> <br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ssidIn = <span class="hljs-string">&quot;ChinaNet-aemM&quot;</span>;   <span class="hljs-comment">//定义用户名</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* passwordIn = <span class="hljs-string">&quot;wp907678446&quot;</span>; <span class="hljs-comment">//定义密码</span><br><br><br><span class="hljs-comment">// 定义 OLED屏幕的分辨率</span><br>Adafruit_SSD1306 display = Adafruit_SSD1306(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, &amp;Wire);<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>  <span class="hljs-comment">//启动串口通讯</span><br>    Serial.begin(<span class="hljs-number">9600</span>);<br>    Serial.println(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//连接网络</span><br>    WiFi.begin(ssidIn, passwordIn);          <br>    <span class="hljs-keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;<br>    Serial.println(<span class="hljs-string">&#x27;等待网络连接&#x27;</span>); <br>        delay(<span class="hljs-number">1000</span>);                  <br>    &#125;<br><br>    Serial.begin(<span class="hljs-number">115200</span>); <span class="hljs-comment">// 设置串口波特率</span><br>    display.begin(SSD1306_SWITCHCAPVCC, <span class="hljs-number">0x3C</span>); <span class="hljs-comment">// 设置OLED的I2C地址</span><br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> ((WiFi.status() == WL_CONNECTED)) &#123;<br>    http_get();<br>  &#125;<br>  delay(<span class="hljs-number">10000</span>);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">http_get</span><span class="hljs-params">()</span>&#123;<br>  <br>    <span class="hljs-comment">//创建client</span><br>    WiFiClient client;<br>    <span class="hljs-comment">//创建http对象</span><br>    HTTPClient http;<br>    <span class="hljs-comment">//配置请求地址</span><br>    http.begin(client, <span class="hljs-string">&quot;http://api.seniverse.com/v3/weather/now.json?key=SpciTJPArpECQAq0t&amp;location=ChongQing&amp;language=en&amp;unit=c&quot;</span>);<br>    <span class="hljs-comment">//发送请求</span><br>    <span class="hljs-type">int</span> httpCode = http.GET();<br>    <br>    <span class="hljs-comment">//判断响应</span><br>    <span class="hljs-keyword">if</span> (httpCode == HTTP_CODE_OK) &#123;<br>        String responsePayload = http.getString();<br>        <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> capacity = JSON_ARRAY_SIZE(<span class="hljs-number">1</span>) + JSON_OBJECT_SIZE(<span class="hljs-number">1</span>) + <span class="hljs-number">2</span>*JSON_OBJECT_SIZE(<span class="hljs-number">3</span>) + JSON_OBJECT_SIZE(<span class="hljs-number">6</span>) + <span class="hljs-number">230</span>;<br>        DynamicJsonBuffer <span class="hljs-title function_">jsonBuffer</span><span class="hljs-params">(capacity)</span>;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* json = responsePayload.c_str();<br>        JsonObject&amp; root = jsonBuffer.parseObject(json);<br>        JsonObject&amp; results_0 = root[<span class="hljs-string">&quot;results&quot;</span>][<span class="hljs-number">0</span>];<br>        <br>        JsonObject&amp; results_0_location = results_0[<span class="hljs-string">&quot;location&quot;</span>];<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_location_id = results_0_location[<span class="hljs-string">&quot;id&quot;</span>]; <span class="hljs-comment">// &quot;WX4FBXXFKE4F&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_location_name = results_0_location[<span class="hljs-string">&quot;name&quot;</span>]; <span class="hljs-comment">// &quot;Beijing&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_location_country = results_0_location[<span class="hljs-string">&quot;country&quot;</span>]; <span class="hljs-comment">// &quot;CN&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_location_path = results_0_location[<span class="hljs-string">&quot;path&quot;</span>]; <span class="hljs-comment">// &quot;Beijing,Beijing,China&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_location_timezone = results_0_location[<span class="hljs-string">&quot;timezone&quot;</span>]; <span class="hljs-comment">// &quot;Asia/Shanghai&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_location_timezone_offset = results_0_location[<span class="hljs-string">&quot;timezone_offset&quot;</span>]; <span class="hljs-comment">// &quot;+08:00&quot;</span><br>        <br>        JsonObject&amp; results_0_now = results_0[<span class="hljs-string">&quot;now&quot;</span>];<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_now_text = results_0_now[<span class="hljs-string">&quot;text&quot;</span>]; <span class="hljs-comment">// &quot;Sunny&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_now_code = results_0_now[<span class="hljs-string">&quot;code&quot;</span>]; <span class="hljs-comment">// &quot;0&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_now_temperature = results_0_now[<span class="hljs-string">&quot;temperature&quot;</span>]; <span class="hljs-comment">// &quot;24&quot;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* results_0_last_update = results_0[<span class="hljs-string">&quot;last_update&quot;</span>]; <span class="hljs-comment">// &quot;2022-05-03T12:00:49+08:00&quot;</span><br>        Serial.println(<span class="hljs-string">&quot; &quot;</span>);<br>        Serial.println(<span class="hljs-string">&quot;====================================&quot;</span>);<br>        Serial.println(results_0_now_text);<br>        Serial.println(results_0_now_temperature);<br>        Serial.println(results_0_last_update);<br>        Serial.println(<span class="hljs-string">&quot;====================================&quot;</span>);<br>        Serial.println(<span class="hljs-string">&quot; &quot;</span>);<br><br>        Serial.begin(<span class="hljs-number">115200</span>); <span class="hljs-comment">// 设置串口波特率</span><br>        Serial.println(<span class="hljs-string">&quot;OLED FeatherWing test&quot;</span>); <span class="hljs-comment">// 串口输出</span><br>        display.begin(SSD1306_SWITCHCAPVCC, <span class="hljs-number">0x3C</span>); <span class="hljs-comment">// 设置OLED的I2C地址</span><br>        display.clearDisplay(); <span class="hljs-comment">// 清空屏幕</span><br>        display.setTextSize(<span class="hljs-number">1.5</span>); <span class="hljs-comment">// 设置字体大小</span><br>        display.setTextColor(SSD1306_WHITE); <span class="hljs-comment">// 设置字体颜色</span><br>        display.setCursor(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置开始显示文字的坐标</span><br>        display.println(<span class="hljs-string">&quot;Hello World!&quot;</span>); <span class="hljs-comment">// 输出的字符</span><br>        display.print(<span class="hljs-string">&quot;Weather:   &quot;</span>);<br>        display.println(results_0_now_text);<br>        display.print(<span class="hljs-string">&quot;Temperature:   &quot;</span>);<br>        display.println(results_0_now_temperature);<br>        display.print(<span class="hljs-string">&quot;Time:   &quot;</span>);<br>        display.println(results_0_last_update);<br>        display.display(); <span class="hljs-comment">// 使更改的显示生效</span><br>        <br>        <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.println(<span class="hljs-string">&quot;Server Respose Code：&quot;</span>);<br>        Serial.println(httpCode);<br>    &#125;<br><br>    http.end();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="7-汉字显示"><a href="#7-汉字显示" class="headerlink" title="7.汉字显示"></a>7.汉字显示</h5><ul><li>test.h</li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM hans_wen[] = &#123;<br><span class="hljs-number">0x02</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x20</span>,<br><span class="hljs-number">0x04</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x06</span>,<span class="hljs-comment">/*&quot;文&quot;,0*/</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM hans_peng[] = &#123;<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x4C</span>,<br><span class="hljs-number">0x55</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x04</span>,<span class="hljs-comment">/*&quot;鹏&quot;,1*/</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM hans_xiao[] = &#123;<br><span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x04</span>,<br><span class="hljs-number">0x21</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x00</span>,<span class="hljs-comment">/*&quot;小&quot;,2*/</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM hans_pang[] = &#123;<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA4</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA8</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x20</span>,<br><span class="hljs-number">0x24</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x20</span>,<span class="hljs-comment">/*&quot;胖&quot;,3*/</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM hans_zi[] = &#123;<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<br><span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x00</span>,<span class="hljs-comment">/*&quot;子&quot;,4*/</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SPI.h&gt;</span> <span class="hljs-comment">// 加载SPI库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span> <span class="hljs-comment">// 加载Wire库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_GFX.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_GFX库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_SSD1306.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_SSD1306库</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><br><span class="hljs-comment">// 定义 OLED屏幕的分辨率</span><br>Adafruit_SSD1306 display = Adafruit_SSD1306(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, &amp;Wire);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">115200</span>); <span class="hljs-comment">// 设置串口波特率</span><br>  display.begin(SSD1306_SWITCHCAPVCC, <span class="hljs-number">0x3C</span>); <span class="hljs-comment">// 设置OLED的I2C地址</span><br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>    hans_display();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">display_test</span><span class="hljs-params">()</span>&#123;<br><br>  display.clearDisplay(); <span class="hljs-comment">// 清空屏幕</span><br>  display.setTextSize(<span class="hljs-number">1.5</span>); <span class="hljs-comment">// 设置字体大小</span><br>  display.setTextColor(SSD1306_WHITE); <span class="hljs-comment">// 设置字体颜色</span><br>  display.setCursor(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置开始显示文字的坐标</span><br>  display.print(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>  display.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br>  display.print(<span class="hljs-string">&quot;time: &quot;</span>);<br>  <span class="hljs-comment">//打印自开发板重置以来的秒数：</span><br>  display.print(millis() / <span class="hljs-number">1000</span>);<br>  display.print(<span class="hljs-string">&quot; s&quot;</span>);<br>  display.setCursor(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>);<br>  display.print(<span class="hljs-string">&quot;Author: &quot;</span>);<br>  display.print(<span class="hljs-string">&quot;Dapenson&quot;</span>);<br>  <br>  display.display(); <span class="hljs-comment">// 使更改的显示生效</span><br><br>&#125;<br><br><br> <span class="hljs-type">void</span> <span class="hljs-title function_">hans_display</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 显示之前清屏</span><br>    display.clearDisplay();<br> <br>    <span class="hljs-comment">// 显示文字 (左上角x坐标,左上角y坐标, 图形数组, 图形宽度像素点, 图形高度像素点, 设置颜色)</span><br>    display.drawBitmap(<span class="hljs-number">20</span> * <span class="hljs-number">1</span>, <span class="hljs-number">16</span>, hans_wen, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br>    display.drawBitmap(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>, <span class="hljs-number">16</span>, hans_peng, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br>    display.drawBitmap(<span class="hljs-number">20</span> * <span class="hljs-number">3</span>, <span class="hljs-number">16</span>, hans_xiao, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br>    display.drawBitmap(<span class="hljs-number">20</span> * <span class="hljs-number">4</span>, <span class="hljs-number">16</span>, hans_pang, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br>    display.drawBitmap(<span class="hljs-number">20</span> * <span class="hljs-number">5</span>, <span class="hljs-number">16</span>, hans_zi, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br> <br>    <span class="hljs-comment">//显示图形</span><br>    display.display();<br>    delay(<span class="hljs-number">2000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-图片显示"><a href="#8-图片显示" class="headerlink" title="8.图片显示"></a>8.图片显示</h5><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM boy[] = &#123;<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xCF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xEE</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xE9</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE3</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xE7</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0x97</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x8F</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xDF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xEF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFB</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xA1</span>,<br><span class="hljs-number">0xC4</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFD</span>,<br><span class="hljs-number">0x9F</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xD0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFB</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x80</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE1</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE7</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xC0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xEF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xDF</span>,<span class="hljs-number">0xF3</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC8</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xCF</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xEF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF1</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE3</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFD</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xD1</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF9</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<br><span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF9</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE9</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF9</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF9</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF3</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC7</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0x8F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xEC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xF0</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF7</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF7</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF7</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x01</span>,<span class="hljs-number">0xFB</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<br>&#125;;<br><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PROGMEM girl[] = &#123;<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x7F</span>,<br><span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x10</span>,<br><span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xDF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xDF</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0xC0</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x1C</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<br><span class="hljs-number">0x9F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x1F</span>,<span class="hljs-number">0xED</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1E</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xB4</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x4C</span>,<br><span class="hljs-number">0xFC</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x1C</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x1C</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF2</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x78</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE3</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x9C</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xEB</span>,<br><span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE7</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xDF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0xFF</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xC4</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x1B</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<br><span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x03</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xFC</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SPI.h&gt;</span> <span class="hljs-comment">// 加载SPI库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span> <span class="hljs-comment">// 加载Wire库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_GFX.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_GFX库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_SSD1306.h&gt;</span> <span class="hljs-comment">// 加载Adafruit_SSD1306库</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;image.h&quot;</span></span><br><br><span class="hljs-comment">// 定义 OLED屏幕的分辨率</span><br>Adafruit_SSD1306 display = Adafruit_SSD1306(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, &amp;Wire);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">115200</span>); <span class="hljs-comment">// 设置串口波特率</span><br>  display.begin(SSD1306_SWITCHCAPVCC, <span class="hljs-number">0x3C</span>); <span class="hljs-comment">// 设置OLED的I2C地址</span><br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>    image_display();<br>&#125;<br><br> <span class="hljs-type">void</span> <span class="hljs-title function_">image_display</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 显示之前清屏</span><br>    display.clearDisplay();<br><br>    <span class="hljs-comment">//1,2为显示起始位置,左上角为坐标原点</span><br>    <span class="hljs-comment">//3位置为图形数组</span><br>    <span class="hljs-comment">//4,5为图像宽度和高度(错误不会显示原像)</span><br>    <span class="hljs-comment">//6 颜色</span><br>    display.drawBitmap(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,boy, <span class="hljs-number">72</span>, <span class="hljs-number">70</span>, <span class="hljs-number">1</span>);<br>    display.drawBitmap(<span class="hljs-number">75</span>,<span class="hljs-number">0</span>,girl, <span class="hljs-number">48</span>, <span class="hljs-number">70</span>, <span class="hljs-number">1</span>);<br> <br>    <span class="hljs-comment">//显示图形</span><br>    display.display();<br>    delay(<span class="hljs-number">2000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="9-蜂鸣器使用-学习来自博客"><a href="#9-蜂鸣器使用-学习来自博客" class="headerlink" title="9.蜂鸣器使用(学习来自博客)"></a>9.蜂鸣器使用(学习来自<a href="https://blog.csdn.net/freewebsys/article/details/104586650/">博客</a>)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD0 0</span><br><br><span class="hljs-comment">// low</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL1 262 <span class="hljs-comment">// NOTE_C4  262  L1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL2 294 <span class="hljs-comment">// NOTE_D4  294  L2</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL3 330 <span class="hljs-comment">// NOTE_E4  330  L3</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL4 349 <span class="hljs-comment">// NOTE_F4  349  L4</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL5 392 <span class="hljs-comment">// NOTE_G4  392  L5</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL6 440 <span class="hljs-comment">// NOTE_A4  440  L6</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDL7 494 <span class="hljs-comment">// NOTE_B4  494  L7</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD1 523 <span class="hljs-comment">// NOTE_C5  523   1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD2 587 <span class="hljs-comment">// NOTE_D5  587   2</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD3 659 <span class="hljs-comment">// NOTE_E5  659   3</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD4 698 <span class="hljs-comment">// NOTE_F5  698   4</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD5 784 <span class="hljs-comment">// NOTE_G5  784   5</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD6 880 <span class="hljs-comment">// NOTE_A5  880   6</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTD7 988 <span class="hljs-comment">// NOTE_B5  988   7</span></span><br><br><span class="hljs-comment">// high </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH1 1047 <span class="hljs-comment">// NOTE_C6  1047  H1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH2 1175 <span class="hljs-comment">// NOTE_D6  1175  H2</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH3 1319 <span class="hljs-comment">// NOTE_E6  1319  H3</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH4 1397 <span class="hljs-comment">// NOTE_F6  1397  H4</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH5 1568 <span class="hljs-comment">// NOTE_G6  1568  H5</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH6 1760 <span class="hljs-comment">// NOTE_A6  1760  H6</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTDH7 1976 <span class="hljs-comment">// NOTE_B6  1976  H7</span></span><br><br><br><span class="hljs-comment">// notes in the melody:</span><br><span class="hljs-type">int</span> melody[] = &#123;<br>  NTD3,NTD2,NTD2,NTD1,NTD1,NTD2,NTD1,NTD2,NTD1,NTD2,NTD5,NTD6,NTD5,NTD5,<br>  NTD0,NTD3,NTDH1,NTDH1,NTD7,NTD7,NTD6,NTD5,NTD5,NTD3,NTD3,NTD5,NTD6,NTD5,NTD5,<br>  NTD0,NTD5,NTD6,NTD6,NTD6,NTD6,NTD6,NTD5,NTD5,NTD1,NTD1,NTD1,NTD2,NTD3,NTD0,<br>  NTDL5,NTDL5,NTD3,NTD2,NTD0,NTD1,NTD1,NTD1,NTD1,NTDL6,NTDL6,NTD2,<br>  NTD0,NTD3,NTD2,NTD2,NTD1,NTD1,NTD2,NTD1,NTD2,NTD1,NTD2,NTD5,NTD6,NTD5,NTD5,<br>  NTD0,NTD3,NTDH1,NTDH1,NTD7,NTD7,NTD6,NTD5,NTD5,NTD3,NTD3,NTD5,NTD6,NTD5,NTD5,<br>  NTD0,NTD5,NTD6,NTD6,NTD6,NTD6,NTD6,NTD5,NTD5,NTD1,NTD1,NTD1,NTD2,NTD3,NTD0,<br>  NTDL5,NTDL5,NTD3,NTD2,NTD0,NTD2,NTD2,NTD3,NTD4,NTD5,NTD5,NTD2,<br>  NTD3,NTDL6,NTD2,NTD1,NTD0,NTD0,NTD2,NTD1,NTD0,NTD0,<br>&#125;;<br><br><span class="hljs-comment">// note durations: 4 = quarter note, 8 = eighth note, etc.:</span><br><span class="hljs-type">int</span> noteDurations[] = &#123;<br>  <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>,<br>  <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>,<br>  <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>,<br>  <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>,<br>  <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>,<br>  <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>,<br>  <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>,<br>  <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>,<br>  <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>,<br>&#125;;<br><br><span class="hljs-comment">//针脚，GPIO后面的数字即是针脚数</span><br><span class="hljs-type">int</span> tonepin=<span class="hljs-number">4</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">common_play</span><span class="hljs-params">()</span> &#123;<br><br>  <span class="hljs-comment">//主要是 tone()函数，第一个参数是针脚数，第二个参数是设置电位强弱，第三个参数是持续时间</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> thisNote = <span class="hljs-number">0</span>; thisNote &lt; <span class="hljs-keyword">sizeof</span>(melody)/<span class="hljs-number">4</span>; thisNote++) &#123;<br><br>    <span class="hljs-comment">//节拍设置为8拍</span><br>    <span class="hljs-type">int</span> noteDuration = ( <span class="hljs-number">1000</span> / <span class="hljs-number">8</span> ) * noteDurations[thisNote];<br>    tone(tonepin, melody[thisNote], noteDuration);<br>    delay(noteDuration);<br>    <span class="hljs-comment">// stop the tone playing:</span><br>    noTone(tonepin);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  Serial.print(<span class="hljs-string">&quot; init ...&quot;</span>);<br>  Serial.print(<span class="hljs-keyword">sizeof</span>(melody));<br>  Serial.print(<span class="hljs-keyword">sizeof</span>(noteDurations));<br>  <span class="hljs-comment">//将该针脚作为输出</span><br>  pinMode(tonepin,OUTPUT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  common_play();<span class="hljs-comment">//Play the music.</span><br>  delay(<span class="hljs-number">3000</span>);<span class="hljs-comment">//Pause for a while.</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ESP8266</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP8266</tag>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webuploader</title>
    <link href="/2022/05/12/webuploader/"/>
    <url>/2022/05/12/webuploader/</url>
    
    <content type="html"><![CDATA[<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>上传大文件时使用二进制易造成超时上传，故采用分片上传的方式，一步一步接收，然后存入文件</p><p>技术：百度的webuploader</p><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><h6 id="js版本"><a href="#js版本" class="headerlink" title="js版本"></a>js版本</h6><ul><li>官网下载webuploader</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>webuploader<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.9.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;webuploader-0.1.5/webuploader.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;webuploader-0.1.5/webuploader.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uploader-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--存放文件的容器--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;picker&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload-container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ctlBtn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span>&gt;</span>选择大文件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploadProgress&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>开始上传<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$list = $(<span class="hljs-string">&#x27;#fileList&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> uploader = <span class="hljs-title class_">WebUploader</span>.<span class="hljs-title function_">create</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">auto</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//选完文件后，是否自动上传</span></span><br><span class="language-javascript"><span class="hljs-attr">swf</span>: <span class="hljs-string">&#x27;/webuploader-0.1.5/Uploader.swf&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">server</span>: <span class="hljs-string">&#x27;http://localhost:8081/webuploader/upload&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">pick</span>: <span class="hljs-string">&#x27;#picker&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">multiple</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//选择多个</span></span><br><span class="language-javascript"><span class="hljs-attr">duplicate</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//去重,根据文件名字、文件大小和最后修改时间来生成hash Key</span></span><br><span class="language-javascript"><span class="hljs-attr">chunked</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//开启分片上传 </span></span><br><span class="language-javascript"><span class="hljs-attr">threads</span>: <span class="hljs-number">30</span>, <span class="hljs-comment">//并发数</span></span><br><span class="language-javascript">chunkSize : <span class="hljs-number">50</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">//每片100M</span></span><br><span class="language-javascript"><span class="hljs-attr">fileNumLimit</span>: <span class="hljs-number">1024</span>,</span><br><span class="language-javascript"><span class="hljs-attr">fileSizeLimit</span>: <span class="hljs-number">50</span>*<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<span class="hljs-comment">//50G 验证文件总大小是否超出限制, 超出则不允许加入队列</span></span><br><span class="language-javascript"><span class="hljs-attr">fileSingleSizeLimit</span>: <span class="hljs-number">10</span>*<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">//10G 验证单个文件大小是否超出限制, 超出则不允许加入队列</span></span><br><span class="language-javascript"><span class="hljs-attr">disableGlobalDnd</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//禁掉全局的拖拽功能。这样不会出现图片拖进页面的时候，把图片打开。</span></span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-comment">//resize: false //不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 当有文件被添加进队列的时候</span></span><br><span class="language-javascript">uploader.<span class="hljs-title function_">on</span>( <span class="hljs-string">&#x27;fileQueued&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"> file </span>) &#123;</span><br><span class="language-javascript">$list.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;div id=&quot;&#x27;</span> + file.<span class="hljs-property">id</span> + <span class="hljs-string">&#x27;&quot; class=&quot;item&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript"><span class="hljs-string">&#x27;&lt;h4 class=&quot;info&quot;&gt;&#x27;</span> + file.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&lt;button type=&quot;button&quot; fileId=&quot;&#x27;</span> + file.<span class="hljs-property">id</span> + <span class="hljs-string">&#x27;&quot; class=&quot;btn btn-danger btn-delete&quot;&gt;删除&lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/button&gt;&lt;/h4&gt;&#x27;</span> +</span><br><span class="language-javascript"><span class="hljs-string">&#x27;&lt;p class=&quot;state&quot;&gt;等待上传&lt;/p&gt;&#x27;</span> +</span><br><span class="language-javascript"><span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//删除</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;.btn-delete&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">uploader.<span class="hljs-title function_">removeFile</span>(uploader.<span class="hljs-title function_">getFile</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;fileId&quot;</span>), <span class="hljs-literal">true</span>));</span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">fadeOut</span>();<span class="hljs-comment">//显示删除</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">remove</span>();<span class="hljs-comment">//DOM上删除</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//md5计算</span></span><br><span class="language-javascript">uploader.<span class="hljs-title function_">md5File</span>(file)</span><br><span class="language-javascript">.<span class="hljs-title function_">progress</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">percentage</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Percentage:&#x27;</span>, percentage);</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-comment">// 完成</span></span><br><span class="language-javascript">.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">fileMd5</span>) &#123; <span class="hljs-comment">// 完成</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> end = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;before-send-file  preupload: file.size=&quot;</span>+file.<span class="hljs-property">size</span>+<span class="hljs-string">&quot; file.md5=&quot;</span>+fileMd5);</span><br><span class="language-javascript">file.<span class="hljs-property">wholeMd5</span> = fileMd5;<span class="hljs-comment">//获取到了md5</span></span><br><span class="language-javascript">uploader.<span class="hljs-property">options</span>.<span class="hljs-property">formData</span>.<span class="hljs-property">md5value</span> = file.<span class="hljs-property">wholeMd5</span>;<span class="hljs-comment">//每个文件都附带一个md5，便于实现秒传</span></span><br><span class="language-javascript"><span class="hljs-comment">//$(&#x27;#&#x27; + file.id).find(&#x27;p.state&#x27;).text(&#x27;文件压缩完毕，可以点击上传了&#x27;);</span></span><br><span class="language-javascript"><span class="hljs-comment">//$(&#x27;#uploadButton&#x27;).append(&#x27;&lt;div id=&quot;UploadBtn&quot; class=&quot;webuploader-pick&quot; style=&quot;margin-right:10px;background: #00b7ee; &quot;&gt;开始上传&lt;/div&gt;&#x27; );</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;MD5=&quot;</span>+fileMd5);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 文件上传过程中创建进度条实时显示。</span></span><br><span class="language-javascript">uploader.<span class="hljs-title function_">on</span>( <span class="hljs-string">&#x27;uploadProgress&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"> file, percentage </span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> $li = $( <span class="hljs-string">&#x27;#&#x27;</span>+file.<span class="hljs-property">id</span> ),</span><br><span class="language-javascript">$percent = $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.progress .progress-bar&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 避免重复创建</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> ( !$percent.<span class="hljs-property">length</span> ) &#123;</span><br><span class="language-javascript">$percent = $(<span class="hljs-string">&#x27;&lt;div class=&quot;progress progress-striped active&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript">  <span class="hljs-string">&#x27;&lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; style=&quot;width: 0%&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript">  <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="language-javascript"><span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>( $li ).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.progress-bar&#x27;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;上传中&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">$percent.<span class="hljs-title function_">css</span>( <span class="hljs-string">&#x27;width&#x27;</span>, percentage * <span class="hljs-number">100</span> + <span class="hljs-string">&#x27;%&#x27;</span> );</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">uploader.<span class="hljs-title function_">on</span>( <span class="hljs-string">&#x27;uploadSuccess&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"> file </span>) &#123;</span><br><span class="language-javascript">$( <span class="hljs-string">&#x27;#&#x27;</span>+file.<span class="hljs-property">id</span> ).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;已上传&#x27;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">uploader.<span class="hljs-title function_">on</span>( <span class="hljs-string">&#x27;uploadError&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"> file </span>) &#123;</span><br><span class="language-javascript">$( <span class="hljs-string">&#x27;#&#x27;</span>+file.<span class="hljs-property">id</span> ).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;上传出错&#x27;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">uploader.<span class="hljs-title function_">on</span>( <span class="hljs-string">&#x27;uploadComplete&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"> file </span>) &#123;</span><br><span class="language-javascript">$( <span class="hljs-string">&#x27;#&#x27;</span>+file.<span class="hljs-property">id</span> ).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.progress&#x27;</span>).<span class="hljs-title function_">fadeOut</span>();</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#uploadButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&#x27;#picker&#x27;</span>).<span class="hljs-title function_">onclick</span>();</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="vue版本"><a href="#vue版本" class="headerlink" title="vue版本"></a>vue版本</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div id=&quot;picker&quot;&gt;选择文件&lt;/div&gt;<br>    &lt;ul class=&quot;file-list&quot;&gt;<br>      &lt;li class=&quot;list&quot; v-for=&quot;file in fileList&quot;&gt;<br>        &lt;span&gt;&#123;&#123;file.name&#125;&#125;&lt;/span&gt;<br>        &lt;span&gt;进度：&#123;&#123;file.percentage&#125;&#125;&lt;/span&gt;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script type=&quot;text/ecmascript-6&quot;&gt;<br>  // import &#x27;../assets/lib/jquery2.0.0/jquery-2.0.0.js&#x27;;<br>  import WebUploader from &#x27;webuploader&#x27;;<br><br>  const request = &#123;<br><br>  &#125;;<br><br>  export default &#123;<br>    name: &#x27;HelloWorld&#x27;,<br>    data() &#123;<br>       return &#123;<br>        options: &#123;<br>        &#125;,<br>        file: &#123;&#125;,<br>        fileList: []<br>      &#125;<br>    &#125;,<br>    mounted() &#123;<br>      this.initWebUpload();<br>    &#125;,<br>    methods: &#123;<br>      initWebUpload() &#123;<br>        const options = this.options;<br>        const $this = this;<br><br>        this.uploader = WebUploader.create(&#123;<br>          auto: true, //选完文件后，是否自动上传<br>          swf: &#x27;/webuploader-0.1.5/Uploader.swf&#x27;,<br>          server: &#x27;http://localhost:8081/webuploader/upload&#x27;,<br>          pick: &#x27;#picker&#x27;,<br>          multiple: true,//选择多个<br>          duplicate: true,//去重,根据文件名字、文件大小和最后修改时间来生成hash Key<br>          chunked: true, //开启分片上传 <br>          threads: 30, //并发数<br>          chunkSize : 50 * 1024 * 1024, //每片100M<br>          fileNumLimit: 1024,<br>          fileSizeLimit: 50*1024 * 1024 * 1024,//50G 验证文件总大小是否超出限制, 超出则不允许加入队列<br>          fileSingleSizeLimit: 10*1024 * 1024 * 1024, //10G 验证单个文件大小是否超出限制, 超出则不允许加入队列<br>          disableGlobalDnd: true, //禁掉全局的拖拽功能。这样不会出现图片拖进页面的时候，把图片打开。<br>          method: &#x27;POST&#x27;,<br>          //resize: false //不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！<br>        &#125;);<br><br>        // 当有文件被添加进队列的时候，添加到页面预览<br>        this.uploader.on(&#x27;fileQueued&#x27;, (file) =&gt; &#123;<br>          // this.$emit(&#x27;fileChange&#x27;, file);<br>          $this.fileList.push(file);<br>        &#125;);<br><br>        this.uploader.on(&#x27;uploadStart&#x27;, (file) =&gt; &#123;<br>          // 在这里可以准备好formData的数据<br>          //this.uploader.options.formData.key = this.keyGenerator(file);<br>        &#125;);<br><br>        this.uploader.on(&#x27;startUpload&#x27;, (file) =&gt; &#123;<br>          // 开始一次上传<br>          // this.fileList = [];<br>        &#125;);<br><br>        // 文件上传过程中创建进度条实时显示。<br>        this.uploader.on(&#x27;uploadProgress&#x27;, (file, percentage) =&gt; &#123;<br>          // this.$emit(&#x27;progress&#x27;, file, percentage);<br>          console.log(file, percentage);<br>          $this.fileList.forEach((item, index) =&gt; &#123;<br>            if (item.id === file.id) &#123;<br>              item.percentage = percentage * 100;<br>              $this.fileList.splice(index, 1, item);<br>              return;<br>            &#125;<br>          &#125;);<br>        &#125;);<br><br>        this.uploader.on(&#x27;uploadSuccess&#x27;, (file, response) =&gt; &#123;<br>          // this.$emit(&#x27;success&#x27;, file, response);<br>          console.log(file, response);<br>          $this.fileList.forEach((item, index) =&gt; &#123;<br>            if (item.id === file.id) &#123;<br>              item.percentage = 100;<br>              $this.fileList.splice(index, 1, item);<br>              return;<br>            &#125;<br>          &#125;);<br>        &#125;);<br><br>        this.uploader.on(&#x27;uploadError&#x27;, (file, reason) =&gt; &#123;<br>          // console.error(reason);<br>          // this.$emit(&#x27;uploadError&#x27;, file, reason);<br>        &#125;);<br><br>        this.uploader.on(&#x27;error&#x27;, (type) =&gt; &#123;<br>          let errorMessage = &#x27;&#x27;;<br>          if (type === &#x27;F_EXCEED_SIZE&#x27;) &#123;<br>            errorMessage = `文件大小不能超过$&#123;this.fileSingleSizeLimit / (1024 * 1000)&#125;M`;<br>          &#125; else if (type === &#x27;Q_EXCEED_NUM_LIMIT&#x27;) &#123;<br>            errorMessage = &#x27;文件上传已达到最大上限数&#x27;;<br>          &#125; else &#123;<br>            errorMessage = `上传出错！请检查后重新上传！错误代码$&#123;type&#125;`;<br>          &#125;<br><br>          console.error(errorMessage);<br>          // this.$emit(&#x27;error&#x27;, errorMessage);<br>        &#125;);<br><br>        this.uploader.on(&#x27;uploadComplete&#x27;, (file, response) =&gt; &#123;<br><br>          // this.$emit(&#x27;complete&#x27;, file, response);<br>        &#125;);<br><br>        this.uploader.on(&#x27;uploadFinished&#x27;, () =&gt; &#123;<br>          // 所有文件上传结束<br>          // 重置文件队列<br>          this.uploader.reset();<br>        &#125;);<br>      &#125;,<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;<br>&lt;style scoped&gt;<br>  #picker &#123;<br>    display: inline-block;<br>    width: 100px;<br>    padding: 7px 10px;<br>    border: 1px solid #0099CC;<br>    background: #0099CC;<br>    border-radius: 3px;<br>    color: #fff;<br>    font-size: 12px;<br>  &#125;<br><br>  #picker input &#123;<br>    display: none;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><p>先接收分片的文件，然后通过RandomAccessFile写入文件中</p><p>注：原理是RandomAccessFile可以指定位置写入文件流</p><ul><li>配置类(跨域)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//配置跨域请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置类(http请求大小限制)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMultipartConfigElement</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">multipartConfigElement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MultipartConfigFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartConfigFactory</span>();<br>        <span class="hljs-comment">//允许上传的文件最大值</span><br>        factory.setMaxFileSize(DataSize.parse(<span class="hljs-string">&quot;1024MB&quot;</span>)); <span class="hljs-comment">//KB,MB</span><br>        <span class="hljs-comment">// 设置总上传数据总大小</span><br>        factory.setMaxRequestSize(DataSize.parse(<span class="hljs-string">&quot;1024MB&quot;</span>));<br>        <span class="hljs-keyword">return</span> factory.createMultipartConfig();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>bootStrap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:<br>  port: 8081<br>  #设置临时文件夹<br>  tomcat:<br>    basedir: /root/prods/temp<br>  servlet:<br>    session:<br>      timeout: 1200<br>  reactive:<br>    session:<br>      timeout: 1200<br><br>spring:<br>  servlet:<br>    multipart:<br>      max-file-size: 400MB<br>      max-request-size: 2048MB<br><br></code></pre></td></tr></table></figure><p>注：上述配置也不知道哪里起效的故都配置上</p><ul><li>实现层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//存放临时文件目录</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">uploadPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/root/files/&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">lastPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/root/files/tmp/&quot;</span>;<br><br><span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> Return <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFileParam param)</span>&#123;<br><br>    <span class="hljs-comment">//分片下标</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">schunk</span> <span class="hljs-operator">=</span> param.getChunk();<br>    <span class="hljs-comment">//总分片数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">schunks</span> <span class="hljs-operator">=</span> param.getChunks();<br>    <span class="hljs-comment">//文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> param.getName();<br>    <span class="hljs-comment">//分片文件</span><br>    <span class="hljs-type">MultipartFile</span> <span class="hljs-variable">fileData</span> <span class="hljs-operator">=</span> param.getFile();<br>    <span class="hljs-comment">//文件大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">fileSize</span> <span class="hljs-operator">=</span> fileData.getSize();<br>    <span class="hljs-comment">//每片大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">chunkSize</span> <span class="hljs-operator">=</span> schunk+<span class="hljs-number">1</span> &lt; schunks ? fileData.getSize() : (param.getSize()-fileSize) / (schunks-<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadPath);<br>        <span class="hljs-comment">//判断文件夹是否存在，不存在则创建</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> file.exists();<br>        <span class="hljs-keyword">if</span>(!flag) &#123;<br>            file.setWritable(<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>            file.mkdirs();<br>        &#125;<br><br>        <span class="hljs-comment">//生成分片文件</span><br>        <span class="hljs-keyword">if</span> (fileData.getSize() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tempFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (name != <span class="hljs-literal">null</span>) &#123;<br>                tempFileName = schunk + <span class="hljs-string">&quot;_&quot;</span> + name;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">fileTemp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadPath + tempFileName);<br>                fileTemp.setWritable(<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>                fileTemp.mkdirs();<br>                fileData.transferTo(fileTemp);<br>            &#125;<br>            <span class="hljs-comment">//此处由于出现流正在使用未关闭，其它的线程去读取文件的时候读取不到文件问题，故等待1秒</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br><br>            <span class="hljs-comment">//分片文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadPath+schunk+<span class="hljs-string">&quot;_&quot;</span>+name);<br>            <span class="hljs-comment">//目标文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(lastPath+name);<br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                raf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(src, <span class="hljs-string">&quot;r&quot;</span>);<br>                bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(dest,<span class="hljs-string">&quot;rw&quot;</span>);<br>                <span class="hljs-comment">//读取文件</span><br>                bos.seek((<span class="hljs-type">long</span>)schunk* chunkSize);<br>                <span class="hljs-comment">//缓冲区</span><br>                <span class="hljs-type">byte</span>[] flush = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> &lt;&lt; <span class="hljs-number">2</span>];<br>                <span class="hljs-comment">//接收长度</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (-<span class="hljs-number">1</span> != (len = raf.read(flush))) &#123;<br>                    <span class="hljs-keyword">if</span> (fileSize - len &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//查看是否足够</span><br>                        <span class="hljs-comment">//写出</span><br>                        bos.write(flush, <span class="hljs-number">0</span>, len);<br>                        fileSize = fileSize - len; <span class="hljs-comment">//剩余量</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//写出最后一次的剩余量</span><br>                        bos.write(flush, <span class="hljs-number">0</span>, (<span class="hljs-type">int</span>) fileSize);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                raf.close();<br>                <span class="hljs-comment">//删除源文件</span><br>                src.delete();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThrowException</span>(<span class="hljs-string">&quot;上传失败&quot;</span>);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">assert</span> raf != <span class="hljs-literal">null</span>;<br>                raf.close();<br>                <span class="hljs-keyword">assert</span> bos != <span class="hljs-literal">null</span>;<br>                bos.close();<br>            &#125;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Return.ok();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>webuploader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webuploader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文档转换</title>
    <link href="/2022/04/18/%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/04/18/%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<ul><li><p>背景：工作中用到office文档互转的情况</p><ul><li>Word 转 PDF</li><li>Excel 转 PDF</li><li>Excel 转 图片</li></ul></li><li><p>普通解决办法：</p><ul><li>开源软件 libreoffice、openoffice(需要服务器部署)</li><li>注：此两种方式的使用方式相同，但libreoffice可以通过ip+端口的方式连接使用</li></ul></li><li><p>终极解决办法：</p><ul><li>使用收费软件 Aspose、Spire.Doc等</li></ul></li></ul><h4 id="WORD转PDF"><a href="#WORD转PDF" class="headerlink" title="WORD转PDF"></a>WORD转PDF</h4><p>注：此为简单的转换，会出现word中部分内容空白的情况</p><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.docx4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docx4j-JAXB-Internal<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.docx4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docx4j-export-fo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>代码([来源](<a href="https://zhuanlan.zhihu.com/p/396014149">利用java实现doc转换pdf - 知乎 (zhihu.com)</a>))</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">word2pdf</span><span class="hljs-params">(String source, String target)</span> &#123;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WordprocessingMLPackage</span> <span class="hljs-variable">pkg</span> <span class="hljs-operator">=</span> Docx4J.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(source));<br><br>        <span class="hljs-type">Mapper</span> <span class="hljs-variable">fontMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdentityPlusMapper</span>();<br>        fontMapper.put(<span class="hljs-string">&quot;隶书&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;LiSu&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;宋体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;SimSun&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;微软雅黑&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;Microsoft Yahei&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;黑体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;SimHei&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;楷体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;KaiTi&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;新宋体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;NSimSun&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文行楷&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STXingkai&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文仿宋&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STFangsong&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;仿宋&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;FangSong&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;幼圆&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;YouYuan&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文宋体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STSong&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文中宋&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STZhongsong&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;等线&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;SimSun&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;等线 Light&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;SimSun&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文琥珀&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STHupo&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文隶书&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STLiti&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文新魏&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STXinwei&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文彩云&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STCaiyun&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;方正姚体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;FZYaoti&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;方正舒体&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;FZShuTi&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;华文细黑&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;STXihei&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;宋体扩展&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;simsun-extB&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;仿宋_GB2312&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;FangSong_GB2312&quot;</span>));<br>        fontMapper.put(<span class="hljs-string">&quot;新細明體&quot;</span>, PhysicalFonts.get(<span class="hljs-string">&quot;SimSun&quot;</span>));<br>        pkg.setFontMapper(fontMapper);<br><br>        Docx4J.toPDF(pkg, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(target));<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (Docx4JException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="EXCEL转PDF"><a href="#EXCEL转PDF" class="headerlink" title="EXCEL转PDF"></a>EXCEL转PDF</h4><p>此处记录例子为 通过libreoffice转换</p><ul><li>linux 安装libreoffice并启动(网上一大堆教程)</li><li>贴上本地打包到docker的dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:latest<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /libreoffice</span><br>  <br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> LibreOffice_7.1.7_Linux_x86-64_rpm.tar.gz /libreoffice</span><br> <br><span class="hljs-keyword">RUN</span><span class="language-bash"> tar -xzvf LibreOffice_7.1.7_Linux_x86-64_rpm.tar.gz</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf LibreOffice_7.1.7_Linux_x86-64_rpm.tar.gz</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum install ./LibreOffice_7.1.7.2_Linux_x86-64_rpm/RPMS/*.rpm</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8100</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/bin/libreoffice7.1&quot;</span>,<span class="hljs-string">&quot;--headless&quot;</span>,<span class="hljs-string">&quot;--accept=&#x27;socket,host=0.0.0.0,port=8100;urp;&#x27;&quot;</span>,<span class="hljs-string">&quot;--nofirststartwizard&quot;</span>,<span class="hljs-string">&quot;&amp;&quot;</span>]</span><br></code></pre></td></tr></table></figure><ul><li>springboot接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">convertFile</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">inputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\1234\\Desktop\\测试ppt.pptx&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\1234\\Desktop\\文件测试.pdf&quot;</span>);<br>    <br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-type">SocketOpenOfficeConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketOpenOfficeConnection</span>(<span class="hljs-string">&quot;192.168.0.105&quot;</span>, <span class="hljs-number">8100</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        connection.connect();<br>        System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (java.net.ConnectException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;连接失败&quot;</span>);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-type">StreamOpenOfficeDocumentConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamOpenOfficeDocumentConverter</span>(connection);<br><br>    <span class="hljs-keyword">try</span>&#123;<br>        converter.convert(inputExcel, outputPdf);<br>        System.out.println(<span class="hljs-string">&quot;转换成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;转换失败&quot;</span>);<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        connection.disconnect();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后续例子待更新"><a href="#后续例子待更新" class="headerlink" title="后续例子待更新"></a>后续例子待更新</h4>]]></content>
    
    
    <categories>
      
      <category>文档转换</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文档转换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Optional常用</title>
    <link href="/2022/04/16/java%E5%9F%BA%E7%A1%80-Optional/"/>
    <url>/2022/04/16/java%E5%9F%BA%E7%A1%80-Optional/</url>
    
    <content type="html"><![CDATA[<h4 id="优雅的判null"><a href="#优雅的判null" class="headerlink" title="优雅的判null"></a>优雅的判null</h4><p>举例</p><ul><li>实体类User</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-comment">//信息</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">//爱好</span><br>    <span class="hljs-keyword">private</span> Hobby hobby;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>实体类Hobby</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hobby</span> &#123;<br>    <span class="hljs-comment">//爱好名</span><br>    <span class="hljs-keyword">private</span> String hobbyName;<br>    <span class="hljs-comment">//描述</span><br>    <span class="hljs-keyword">private</span> String hobbydesc;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>模拟使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MyException &#123;<br><br>    <span class="hljs-comment">//简单的一层结构(效果不明显，用ifPresent 和 ==null区别不大)</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    Optional.ofNullable(user).ifPresent( <span class="hljs-comment">//判断是否为空</span><br>        user1 -&gt; &#123;<br>            System.out.println(user1.getUserName());<br>            System.out.println(user.getMessage());<br>        &#125;<br>    );<br>    <span class="hljs-comment">//抛出异常</span><br>    Optional.ofNullable(user).map(User::getMessage).orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;这是抛出我的自定义异常&quot;</span>));<br>    <span class="hljs-comment">//不抛出异常直接给默认值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> Optional.ofNullable(user).map(User::getMessage).orElse(<span class="hljs-string">&quot;&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;这是我给的值&quot;</span>+message);<br><br>    <span class="hljs-comment">//多层结构(多层的时候可以多个map.然后通过ifPresent可以直接判断空,比不断地判断 ==null 简洁方便)</span><br>    Optional.ofNullable(user).map(User::getHobby).ifPresent(<br>        hobby -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;这里执行获取到hobby的事&quot;</span>);<br>        &#125;<br>    );<br>    <span class="hljs-comment">//抛出异常</span><br>    Optional.ofNullable(user).map(User::getHobby).map(Hobby::getHobbyName).orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;这是抛出我的自定义异常&quot;</span>));<br>    <span class="hljs-comment">//直接给默认值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hobbyName</span> <span class="hljs-operator">=</span> Optional.ofNullable(user).map(User::getHobby).map(Hobby::getHobbyName).orElse(<span class="hljs-string">&quot;&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;获取Hobby中默认给的值为&quot;</span>+hobbyName);<br>    <span class="hljs-comment">//给对象中的对象默认对象</span><br>    <span class="hljs-type">Hobby</span> <span class="hljs-variable">hobby</span> <span class="hljs-operator">=</span> Optional.ofNullable(user).map(User::getHobby).orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hobby</span>());<br>    System.out.println(<span class="hljs-string">&quot;获取Hobby中的值不报异常为&quot;</span>+hobby.getHobbyName());<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础</category>
      
      <category>java8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Optional</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2022/04/09/java%E5%9F%BA%E7%A1%80-jvm/"/>
    <url>/2022/04/09/java%E5%9F%BA%E7%A1%80-jvm/</url>
    
    <content type="html"><![CDATA[<ul><li><p>堆</p><p>存对象</p></li><li><p>线程栈</p><p>每有一个线程就会从线程栈中划分一块区域</p><ul><li><p>栈帧</p><p>每执行一个方法就会在线程栈中分配一块区域</p><ul><li><p>操作数栈</p><p>将临时数据做加减乘除的操作的地方</p></li><li><p>局部变量(指针指向堆)</p><p>存储临时数据(变量)</p></li><li><p>动态链接</p><p>通过动态链接去链接到方法区，拿到方法区的方法</p></li><li><p>方法出口</p><p>链接到上层调用</p></li></ul></li></ul></li><li><p>方法区(元空间)（指针指向堆）</p><ul><li>常量</li><li>静态变量</li><li>类信息</li></ul></li><li><p>程序计数器</p><p>用于记录执行当前所到的步骤(cpu的执行权限被抢走时记录当前程序的执行步骤，用于抢回权限后接着执行)</p></li><li><p>本地方法栈</p><p>native修饰的方法执行的内存空间(c、c++实现的方法)</p></li></ul><p><font color = 'red'>注:</font></p><p>JVM调优的目的是减少FULL GC，因为在FULL GC的时候会STW(stop the world)，停掉当前运行的线程</p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2022/01/26/RabbitMq/"/>
    <url>/2022/01/26/RabbitMq/</url>
    
    <content type="html"><![CDATA[<p>场景：需要基于队列实现消息传递，保证消息不被丢弃和稳定</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><h6 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h6><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y epel-release<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -Uvh erlang-solutions-1.0-1.noarch.rpm<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y erlang<br></code></pre></td></tr></table></figure><ul><li>验证安装成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">erl -version<br></code></pre></td></tr></table></figure><h6 id="安装RabitMq"><a href="#安装RabitMq" class="headerlink" title="安装RabitMq"></a>安装RabitMq</h6><ul><li>官网下载 RPM包，上传到服务器上</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -Uvh rabbitmq-server-3.9.12-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start rabbitmq-server<br></code></pre></td></tr></table></figure><ul><li>查看状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status rabbitmq-server<br></code></pre></td></tr></table></figure><ul><li>启动控制台</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><ul><li>添加用户名和密码以及设置权限</li></ul><p><a href="https://www.cnblogs.com/shangpolu/p/8275126.html">参考</a></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">rabbitmqctl add_user <span class="hljs-literal">admin</span> <span class="hljs-number">123456</span><br>rabbitmqctl set_user_tags <span class="hljs-literal">admin</span> administrator<br>rabbitmqctl set_permissions -p / <span class="hljs-literal">admin</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">226.128</span>:<span class="hljs-number">15672</span><br></code></pre></td></tr></table></figure><h5 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">provider</span> &#123;<br><br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myQueue&quot;</span>;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myDirectExchange&quot;</span>;<br>    <span class="hljs-comment">//设置一个路由键</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routeKey&quot;</span>;<br>    <span class="hljs-comment">//队列是否持久化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">QUEUE_PERSISTENCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//是否共享消息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">MESSAGE_SHART</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//是否自动删除</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">AUTO_DELETE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.226.128&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">//创建连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//创建信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">//信道绑定队列和配置参数</span><br>        channel.queueDeclare(QUEUE_NAME,QUEUE_PERSISTENCE,MESSAGE_SHART,AUTO_DELETE,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//信道开启发布确认</span><br>        channel.confirmSelect();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 信道绑定交换机 交换机类型</span><br><span class="hljs-comment">         * 1.direct 严格校验routeKey,只有设置相同的routeKey的才能收到</span><br><span class="hljs-comment">         * 2.fanout 所有连接该交换机的队列都能收到</span><br><span class="hljs-comment">         * 3.topic 模糊匹配，关键词中间以点隔开，#号匹配1个或多个字，*匹配一个关键字</span><br><span class="hljs-comment">         * 4.headers 根据消息中的headers属性匹配</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//信道绑定交换机和队列</span><br>        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,ROUTE_KEY,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//设置发送成功与否的监听器</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">ackCallback</span> <span class="hljs-operator">=</span> (deliveryTag, multiple) -&gt; &#123;<br>            <span class="hljs-comment">//deliveryTag 消息序号，multiple是否批量确认</span><br>            System.out.println(<span class="hljs-string">&quot;[&quot;</span>+deliveryTag +<span class="hljs-string">&quot;]发送成功&quot;</span>);<br>        &#125;;<br>        <span class="hljs-comment">//设置失败回调函数</span><br>        <span class="hljs-type">ConfirmCallback</span> <span class="hljs-variable">nackCallback</span> <span class="hljs-operator">=</span> (deliveryTag, multiple) -&gt; &#123;<br>            <span class="hljs-comment">//deliveryTag 消息序号，multiple是否批量确认</span><br>            System.out.println(<span class="hljs-string">&quot;[&quot;</span>+deliveryTag +<span class="hljs-string">&quot;]发送失败&quot;</span>);<br>        &#125;;<br>        channel.addConfirmListener(ackCallback, nackCallback);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(scanner.hasNextLine())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 发送消息</span><br><span class="hljs-comment">             * 1.交换机</span><br><span class="hljs-comment">             * 2.队列</span><br><span class="hljs-comment">             * 3.消息的属性 MessageProperties.PERSISTENT_TEXT_PLAIN 消息持久化</span><br><span class="hljs-comment">             * 4.消息体</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">//设置超时时间</span><br>            AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">basicProperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="hljs-string">&quot;10000&quot;</span>).build();<br>            channel.basicPublish(EXCHANGE_NAME,ROUTE_KEY,basicProperties,str.getBytes(StandardCharsets.UTF_8));<br>            <span class="hljs-comment">//调用方法确认</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-comment">//通过waitForConfirms可用于判断是否发送成功</span><br>                <span class="hljs-keyword">if</span>(channel.waitForConfirms())&#123;<br>                    System.out.println(<span class="hljs-string">&quot;消息发送成功:[&quot;</span>+str+<span class="hljs-string">&quot;]&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">consumer</span> &#123;<br><br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myQueue&quot;</span>;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myDirectExchange&quot;</span>;<br>    <span class="hljs-comment">//设置一个路由键</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONSUMER_ROUTE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routeKey1&quot;</span>;<br>    <span class="hljs-comment">//死信队列名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myDeadQueue&quot;</span>;<br>    <span class="hljs-comment">//死信交换机名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myDeadDirectExchange&quot;</span>;<br>    <span class="hljs-comment">//设置一个死信路由键</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONSUMER_DEAD_ROUTE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routeKeyDead&quot;</span>;<br>    <span class="hljs-comment">//是否自动应答</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">AUTO_ACK</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//是否批量应答</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">BATCH_ACK_FLAG</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.226.128&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        connectionFactory.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">//创建连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//创建信道</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">//设置预取值 0-是公平分发即轮询获取 &gt;=1-不公平分发(理解:信道的容量，即最多堆积的数量)</span><br>        channel.basicQos(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//设置交换机</span><br>        channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//信道绑定交换机和队列</span><br>        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,CONSUMER_ROUTE_KEY,<span class="hljs-literal">null</span>);<br><br>        Map&lt;String, Object&gt; arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE_NAME); <span class="hljs-comment">//设置死信交换机</span><br>        arguments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>,CONSUMER_DEAD_ROUTE_KEY); <span class="hljs-comment">//设置死信路由键</span><br>        arguments.put(<span class="hljs-string">&quot;x-max-length&quot;</span>,<span class="hljs-number">20</span>); <span class="hljs-comment">//设置最大存储消息量</span><br>        <span class="hljs-comment">//设置死信交换机</span><br>        channel.exchangeDeclare(DEAD_EXCHANGE_NAME,BuiltinExchangeType.DIRECT);<br>        <span class="hljs-comment">//信道绑定死信交换机和死信队列</span><br>        channel.queueBind(DEAD_QUEUE_NAME,DEAD_EXCHANGE_NAME,CONSUMER_DEAD_ROUTE_KEY,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//信道绑定队列</span><br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arguments);<br>        channel.queueDeclare(DEAD_QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,arguments);<br><br><br>        <span class="hljs-comment">//正常消费回调函数</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,message) -&gt;&#123;<br>            <span class="hljs-comment">//打印接收到的消息信息</span><br>            System.out.println(<span class="hljs-string">&quot;消费者[&quot;</span>+consumerTag+<span class="hljs-string">&quot;]:&quot;</span> +<br>                    <span class="hljs-string">&quot;消息序号[&quot;</span>+message.getEnvelope().getDeliveryTag()+<span class="hljs-string">&quot;]:&quot;</span> +<br>                    <span class="hljs-string">&quot;路由键[&quot;</span>+message.getEnvelope().getRoutingKey()+<span class="hljs-string">&quot;]:&quot;</span>+<br>                    <span class="hljs-string">&quot;内容[&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody())+<span class="hljs-string">&quot;]&quot;</span>);<br>            <span class="hljs-comment">//手动应答</span><br>            channel.basicAck(message.getEnvelope().getDeliveryTag(),BATCH_ACK_FLAG);<br>        &#125;;<br>        <span class="hljs-comment">//取消消费的回调函数</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;这是返回的回调&quot;</span>);<br>        &#125;;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1.队列名</span><br><span class="hljs-comment">         * 2.应答方式 true-自动应答 false-手动应答</span><br><span class="hljs-comment">         * 3.回调函数</span><br><span class="hljs-comment">         * 4.取消消费的回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(QUEUE_NAME,AUTO_ACK,deliverCallback,cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：</p><ul><li><p>一个信道可以对应多个交换机，一个交换机可以绑定多个队列</p></li><li><p>交换机和队列中间有个routing_key(路由键)，路由键在交换机是direct的时候起作用</p></li><li><p>死信队列出现的情况</p><ul><li>消息被拒绝</li><li>消息超时响应</li><li>队列达到最大长度</li></ul></li><li><p>消息的应答方式有自动应答和手动应答，手动应答时可通过回调函数处理逻辑</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quartz</title>
    <link href="/2022/01/18/Quartz/"/>
    <url>/2022/01/18/Quartz/</url>
    
    <content type="html"><![CDATA[<h5 id="Timer原生实现"><a href="#Timer原生实现" class="headerlink" title="Timer原生实现"></a>Timer原生实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//创建定时器</span><br>    <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>    <span class="hljs-comment">//创建task</span><br>    <span class="hljs-type">TimerTask</span> <span class="hljs-variable">timerTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;这是任务执行体&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">//从现在起推迟2秒后，每隔1秒执行</span><br>    timer.schedule(timerTask, <span class="hljs-number">2000</span>, <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="lombok注解实现"><a href="#lombok注解实现" class="headerlink" title="lombok注解实现"></a>lombok注解实现</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//启动类添加注解开启Scheduler</span><br><span class="hljs-meta">@EnableScheduling</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SchedulerAchieve</span> &#123;<br><br>    <span class="hljs-comment">//使用corn表达式</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;*/1 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是任务执行体&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Quartz实现"><a href="#Quartz实现" class="headerlink" title="Quartz实现"></a>Quartz实现</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>job</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是任务执行体&quot;</span>);<br>        <span class="hljs-comment">//拿取JobDetail中的JobDataMap</span><br>        <span class="hljs-type">JobDataMap</span> <span class="hljs-variable">jobDataMap</span> <span class="hljs-operator">=</span> jobExecutionContext.getJobDetail().getJobDataMap();<br>        <span class="hljs-comment">//拿取Trigger中的JobDataMap</span><br>        <span class="hljs-type">JobDataMap</span> <span class="hljs-variable">jobDataMapTrigger</span> <span class="hljs-operator">=</span> jobExecutionContext.getTrigger().getJobDataMap();<br>        System.out.println(jobDataMap.get(<span class="hljs-string">&quot;key&quot;</span>));<br>        System.out.println(jobDataMapTrigger.get(<span class="hljs-string">&quot;key&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyScheduler</span> &#123;<br><br>    <span class="hljs-comment">//创建Scheduler</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Scheduler scheduler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SchedulerException, InterruptedException &#123;<br>        create();<br>        start();<br>        Thread.sleep(<span class="hljs-number">10000</span>);<br>        shutdown();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建定时任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        <span class="hljs-type">SchedulerFactory</span> <span class="hljs-variable">schedulerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StdSchedulerFactory</span>();<br>        scheduler = schedulerFactory.getScheduler();<br><br>        <span class="hljs-comment">//JobDataMap可以用于执行体中获取使用</span><br>        <span class="hljs-type">JobDataMap</span> <span class="hljs-variable">jobDataMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDataMap</span>();<br>        jobDataMap.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;我是jobDataMap中的数据&quot;</span>);<br><br>        <span class="hljs-comment">//创建JobDetail</span><br>        <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(MyJob.class)<br>                <span class="hljs-comment">//定义名字，组名默认值是DEFAULT</span><br>                .withIdentity(<span class="hljs-string">&quot;job&quot;</span>,<span class="hljs-string">&quot;group1&quot;</span>)<br>                <span class="hljs-comment">//传入map值到JobDetail可用于执行体中获取</span><br>                .setJobData(jobDataMap)<br>                .build();<br><br>        <span class="hljs-comment">//不同的计划构建方式</span><br>        <span class="hljs-comment">//CronSchedule</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cronStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*/1 * * * * ? *&quot;</span>;<br>        <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">scheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(cronStr); <span class="hljs-comment">//传入cron</span><br><span class="hljs-comment">//        //SimpleSchedule</span><br><span class="hljs-comment">//        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()</span><br><span class="hljs-comment">//                .withIntervalInSeconds(1)//每隔1s执行一次</span><br><span class="hljs-comment">//                .repeatForever();//一直执行</span><br><span class="hljs-comment">//        //CalendarIntervalSchedule</span><br><span class="hljs-comment">//        CalendarIntervalScheduleBuilder scheduleBuilder = CalendarIntervalScheduleBuilder.calendarIntervalSchedule()</span><br><span class="hljs-comment">//                //每秒执行1次</span><br><span class="hljs-comment">//                .withIntervalInSeconds(1);</span><br><br>        <span class="hljs-comment">//创建Trigger</span><br>        <span class="hljs-type">Trigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger()<br>                <span class="hljs-comment">//定义名字，组名默认值是DEFAULT</span><br>                .withIdentity(<span class="hljs-string">&quot;trigger&quot;</span>,<span class="hljs-string">&quot;group1&quot;</span>)<br>                .startNow()<span class="hljs-comment">//马上开始</span><br><span class="hljs-comment">//                .startAt(new Date())//从什么时间开始</span><br>                .withSchedule(scheduleBuilder)<br>                .usingJobData(jobDataMap)<br>                .build();<br><br>        <span class="hljs-comment">//jobDetail为执行体，trigger为执行计划</span><br>        scheduler.scheduleJob(jobDetail, trigger);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启定时任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        scheduler.start();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭定时任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        scheduler.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Quartz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quartz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA无限续杯</title>
    <link href="/2022/01/13/%E5%85%B6%E5%AE%83-idea%E6%97%A0%E9%99%90%E7%BB%AD%E6%9D%AF/"/>
    <url>/2022/01/13/%E5%85%B6%E5%AE%83-idea%E6%97%A0%E9%99%90%E7%BB%AD%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<p>idea 商店</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">file</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">setting</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">plugins</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">installed</span> -&gt;</span> Manage plugin repositories<br>https:<span class="hljs-comment">//plugins.zhile.io </span><br></code></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">ide <span class="hljs-built_in">eval</span> Reset<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">help -&gt; <span class="hljs-built_in">eval</span> <span class="hljs-built_in">reset</span><br>勾选 Auto <span class="hljs-built_in">reset</span> before per <span class="hljs-built_in">restart</span> -&gt; <span class="hljs-built_in">reset</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>激活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bpmn文件解释</title>
    <link href="/2021/12/03/bpmn/"/>
    <url>/2021/12/03/bpmn/</url>
    
    <content type="html"><![CDATA[<h4 id="根节点"><a href="#根节点" class="headerlink" title="根节点"></a>根节点</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:definitions</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:bpmn2</span>=<span class="hljs-string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="hljs-attr">xmlns:bpmndi</span>=<span class="hljs-string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="hljs-attr">xmlns:dc</span>=<span class="hljs-string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="hljs-attr">xmlns:di</span>=<span class="hljs-string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sample-diagram&quot;</span> <span class="hljs-attr">targetNamespace</span>=<span class="hljs-string">&quot;http://bpmn.io/schema/bpmn&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:definitions</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="中间两个节点"><a href="#中间两个节点" class="headerlink" title="中间两个节点"></a>中间两个节点</h4><h5 id="process"><a href="#process" class="headerlink" title="process"></a>process</h5><p>(表示节点和连线的信息)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:process</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Process_1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:process</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 开始节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:startEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StartEvent_1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;开始&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_11wp6xg<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:outgoing</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:startEvent</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 结束节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:endEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;EndEvent_03foojn&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;结束&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:incoming</span>&gt;</span>SequenceFlow_1uoo14p<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:incoming</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:incoming</span>&gt;</span>SequenceFlow_152djel<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:incoming</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:endEvent</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 网关节点记录连进来的线的信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:exclusiveGateway</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ExclusiveGateway_18wv5dj&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:incoming</span>&gt;</span>SequenceFlow_14ico3u<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:incoming</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_1ymg9x5<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:outgoing</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_1qyxaz6<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:outgoing</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:exclusiveGateway</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 一进一出节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:task</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Task_023809g&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;计划1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:incoming</span>&gt;</span>SequenceFlow_11wp6xg<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:incoming</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_14ico3u<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:outgoing</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:task</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:task</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Task_0sk0zxt&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;正确执行&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:incoming</span>&gt;</span>SequenceFlow_1ymg9x5<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:incoming</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_1uoo14p<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:outgoing</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:task</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:task</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Task_1baahwq&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;失败执行&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:incoming</span>&gt;</span>SequenceFlow_1qyxaz6<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:incoming</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_152djel<span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:outgoing</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmn2:task</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：</p><ul><li>对于节点，incoming表示连进来的连线，outgoing表示连出去的连线</li><li>对于连线，sourceRef表示指向开始节点，targetRef表示指向目的节点</li></ul><h6 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 连线 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SequenceFlow_11wp6xg&quot;</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">&quot;StartEvent_1&quot;</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">&quot;Task_023809g&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SequenceFlow_14ico3u&quot;</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">&quot;Task_023809g&quot;</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">&quot;ExclusiveGateway_18wv5dj&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SequenceFlow_1uoo14p&quot;</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">&quot;Task_0sk0zxt&quot;</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">&quot;EndEvent_03foojn&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SequenceFlow_152djel&quot;</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">&quot;Task_1baahwq&quot;</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">&quot;EndEvent_03foojn&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SequenceFlow_1ymg9x5&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">&quot;ExclusiveGateway_18wv5dj&quot;</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">&quot;Task_0sk0zxt&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bpmn2:sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SequenceFlow_1qyxaz6&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">&quot;ExclusiveGateway_18wv5dj&quot;</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">&quot;Task_1baahwq&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="diagram"><a href="#diagram" class="headerlink" title="diagram"></a>diagram</h5><p>(表示连线和节点的尺寸位置信息）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">bpmndi:BPMNDiagram</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BPMNDiagram_1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bpmndi:BPMNDiagram</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Flowable</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Flowable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mqtt</title>
    <link href="/2021/11/17/MQTT/"/>
    <url>/2021/11/17/MQTT/</url>
    
    <content type="html"><![CDATA[<h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.paho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>org.eclipse.paho.client.mqttv3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.eclipse.paho.client.mqttv3.*;<br><span class="hljs-keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMqttServer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Server();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Server</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//mqtt服务器地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">MQTT_HOST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tcp://10.245.228.67:1883&quot;</span>;<br>        <span class="hljs-comment">//设备唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">MQTT_CLIENT_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server1&quot;</span>;<br>        <span class="hljs-comment">//连接服务器的用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>        <span class="hljs-comment">//连接服务器的密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>        <span class="hljs-comment">//订阅标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">MQTT_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;this is my first topic&quot;</span>;<br><br><br>        <span class="hljs-type">MqttClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//连接mqtt服务器</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttClient</span>(MQTT_HOST, MQTT_CLIENT_ID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryPersistence</span>());<br>            <span class="hljs-type">MqttConnectOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttConnectOptions</span>();<br>            options.setCleanSession(<span class="hljs-literal">true</span>);<br>            options.setUserName(userName);<br>            options.setPassword(password.toCharArray());<br>            <span class="hljs-comment">//会话超时时间</span><br>            options.setConnectionTimeout(<span class="hljs-number">10</span>);<br>            <span class="hljs-comment">//心跳时间</span><br>            options.setKeepAliveInterval(<span class="hljs-number">20</span>);<br>            client.connect(options);<br>        &#125; <span class="hljs-keyword">catch</span> (MqttException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建message对象</span><br>            <span class="hljs-type">MqttMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttMessage</span>();<br>            <span class="hljs-comment">//创建消息</span><br>            <span class="hljs-type">MqttTopic</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> client.getTopic(MQTT_TOPIC);<br>            <span class="hljs-comment">//结果等级，0-只发一次不管是否被接收到，1-发送多次保证至少发送成功给接受者(可能出现消息重复)，2-保证接受者只接受一次(消息不会未接收到且不会重复接收)</span><br>            message.setQos(<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//服务器是否保留该消息</span><br>            message.setRetained(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//传入推送内容</span><br>            message.setPayload(<span class="hljs-string">&quot;这是推送的内容&quot;</span>.getBytes());<br>            <span class="hljs-comment">//进行推送</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">MqttDeliveryToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> topic.publish(message);<br>                token.waitForCompletion();<br>                System.out.println(<span class="hljs-string">&quot;已经发布了&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">10000</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (MqttException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.eclipse.paho.client.mqttv3.*;<br><span class="hljs-keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMqttClient</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Client();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Client</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//mqtt服务器地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">MQTT_HOST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tcp://10.245.228.67:1883&quot;</span>;<br>        <span class="hljs-comment">//设备唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">MQTT_CLIENT_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;client1&quot;</span>;<br>        <span class="hljs-comment">//连接服务器的用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>        <span class="hljs-comment">//连接服务器的密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>        <span class="hljs-comment">//订阅标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">MQTT_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;this is my first topic&quot;</span>;<br><br>        <span class="hljs-type">MqttClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//连接mqtt服务器</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttClient</span>(MQTT_HOST, MQTT_CLIENT_ID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryPersistence</span>());<br>            <span class="hljs-type">MqttConnectOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttConnectOptions</span>();<br>            options.setCleanSession(<span class="hljs-literal">true</span>);<br>            options.setUserName(userName);<br>            options.setPassword(password.toCharArray());<br>            <span class="hljs-comment">//会话超时时间</span><br>            options.setConnectionTimeout(<span class="hljs-number">10</span>);<br>            <span class="hljs-comment">//心跳时间</span><br>            options.setKeepAliveInterval(<span class="hljs-number">20</span>);<br>            client.connect(options);<br>        &#125; <span class="hljs-keyword">catch</span> (MqttException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//订阅消息</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//设置订阅的topic(不能为空)</span><br>            client.subscribe(MQTT_TOPIC);<br>            <span class="hljs-comment">//设置回调</span><br>            client.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttCallback</span>() &#123;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connectionLost</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;连接失去了&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">messageArrived</span><span class="hljs-params">(String topic, MqttMessage message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    System.out.println(<span class="hljs-string">&quot;接受消息成功，topic：&quot;</span>+topic+<span class="hljs-string">&quot; 内容：&quot;</span>+message);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deliveryComplete</span><span class="hljs-params">(IMqttDeliveryToken token)</span> &#123;<br><br>                &#125;<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (MqttException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mqtt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mqtt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>security</title>
    <link href="/2021/11/11/springBoot-security/"/>
    <url>/2021/11/11/springBoot-security/</url>
    
    <content type="html"><![CDATA[<p>使用场景：用于访问权限的限制于管理</p><p>过程：通过用户名查询密码和角色，校验密码和判断该url是否允许该角色访问</p><h5 id="引用Security准备"><a href="#引用Security准备" class="headerlink" title="引用Security准备"></a>引用Security准备</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatisplus相关依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 角色安全控制 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- swagger相关依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- swagger增强 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- json转换类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * security配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginFailHandler loginFailHandler;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginSuccessHandler loginSuccessHandler;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ForbidHandler forbidHandler;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定加密方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用BCrypt加密密码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置认证用户的来源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userService);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置各种拦截规则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//关闭csrf</span><br>        http.csrf().disable();<br><br>        <span class="hljs-comment">//自定义登录</span><br>        http.formLogin()<br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>)<br>                <span class="hljs-comment">//设置登录成功或者失败的Handler,也可直接配置静态页面</span><br>                .successHandler(loginSuccessHandler)<br>                .failureHandler(loginFailHandler);<br><br>        <span class="hljs-comment">//自定义无权限跳转页面也可直接配置静态页面</span><br>        http.exceptionHandling().accessDeniedHandler(forbidHandler);<br>        <br>        <span class="hljs-comment">//注销调登出接口</span><br>        http.logout()<br>                <span class="hljs-comment">//前端点击注销请求logout接口</span><br>                .logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<br>                <span class="hljs-comment">//logout请求成功后调登出接口返回登录界面</span><br>                .logoutSuccessUrl(<span class="hljs-string">&quot;/test/toLogin&quot;</span>);<br>        <br>        <span class="hljs-comment">//权限配置</span><br>        http.authorizeRequests()<br>                <span class="hljs-comment">//放行</span><br>                .antMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>).permitAll()<br>                <span class="hljs-comment">//其它请求需登录获取权限</span><br>                .anyRequest().authenticated();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取用户以及获取角色权限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 继承该类实现loadUserByUsername方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserDao sysUserDao;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名查询所有的role，最后根据role去判断是否可以访问</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">//获取用户信息</span><br>        QueryWrapper&lt;SysUser&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        List&lt;SysUser&gt; users = sysUserDao.selectList(queryWrapper);<br>        <span class="hljs-keyword">if</span> (users.size() &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;未找到用户信息&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//角色集合</span><br>        List&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (SysUser sysUser:users) &#123;<br>            <span class="hljs-comment">//得到用户角色</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> sysUser.getRole();<br>            <span class="hljs-comment">//直接添加role角色权限(通过 hasAuthority、hasAnyAuthority 判断)</span><br>            authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(role));<br>            <span class="hljs-comment">//通过工具类传入role角色(通过 hasRole、hasAnyRole 判断)</span><br><span class="hljs-comment">//            authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;ROLE_&quot;+role);</span><br>        &#125;<br><br>        <span class="hljs-type">SysUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> users.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(user.getUsername(), passwordEncoder.encode(user.getPassword()), authorities);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Handler</li></ul><p>登录成功Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> response.getWriter();<br>        printWriter.write(ReturnDto.ok().toString());<br>        printWriter.flush();<br>        printWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>登录失败Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFailHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> response.getWriter();<br>        printWriter.write(ReturnDto.error(<span class="hljs-string">&quot;登录失败&quot;</span>).toString());<br>        printWriter.flush();<br>        printWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无访问权限Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForbidHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> response.getWriter();<br>        printWriter.write(ReturnDto.error(<span class="hljs-string">&quot;无查看权限&quot;</span>).toString());<br>        printWriter.flush();<br>        printWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="配置类方式配置"><a href="#配置类方式配置" class="headerlink" title="配置类方式配置"></a>配置类方式配置</h5><ul><li>测试Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/toLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toLogin</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        response.sendRedirect(<span class="hljs-string">&quot;login.html&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/test1&quot;)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">TestOnly</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ReturnDto.ok(<span class="hljs-string">&quot;访问成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置类修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * security配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginFailHandler loginFailHandler;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginSuccessHandler loginSuccessHandler;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ForbidHandler forbidHandler;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定加密方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用BCrypt加密密码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置认证用户的来源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userService);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置各种拦截规则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//关闭csrf</span><br>        http.csrf().disable();<br><br>        <span class="hljs-comment">//自定义登录</span><br>        http.formLogin()<br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>)<br>                <span class="hljs-comment">//设置登录成功或者失败的Handler,也可直接配置静态页面</span><br>                .successHandler(loginSuccessHandler)<br>                .failureHandler(loginFailHandler);<br><br>        <span class="hljs-comment">//自定义无权限跳转页面也可直接配置静态页面</span><br>        http.exceptionHandling().accessDeniedHandler(forbidHandler);<br>        <br>        <span class="hljs-comment">//注销调登出接口</span><br>        http.logout()<br>                <span class="hljs-comment">//前端点击注销请求logout接口</span><br>                .logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<br>                <span class="hljs-comment">//logout请求成功后调登出接口返回登录界面</span><br>                .logoutSuccessUrl(<span class="hljs-string">&quot;/test/toLogin&quot;</span>);<br>        <br>        <span class="hljs-comment">//权限配置</span><br>        http.authorizeRequests()<br>                <span class="hljs-comment">//放行</span><br>                .antMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>).permitAll()<br>                <span class="hljs-comment">//设置仅admin用户访问的url</span><br><span class="hljs-comment">//                .antMatchers(&quot;/test/**&quot;).hasAuthority(&quot;admin&quot;)</span><br><span class="hljs-comment">//                .antMatchers(&quot;/test/**&quot;).hasAnyAuthority(&quot;admin&quot;)</span><br><span class="hljs-comment">//                .antMatchers(&quot;/test/**&quot;).hasRole(&quot;admin&quot;)</span><br><span class="hljs-comment">//                .antMatchers(&quot;/test/**&quot;).hasAnyRole(&quot;admin&quot;)</span><br>                <span class="hljs-comment">//其它请求需登录获取权限</span><br>                .anyRequest().authenticated();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注解方式配置"><a href="#注解方式配置" class="headerlink" title="注解方式配置"></a>注解方式配置</h5><ul><li>开启注解功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span><br></code></pre></td></tr></table></figure><ul><li>使用注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//只能判断角色</span><br><span class="hljs-meta">@Secured(&#123;&quot;ROLE_admin&quot;,&quot;ROLE_user&quot;&#125;)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法执行之前判断判断</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAnyRole(&#x27;ROLE_admin&#x27;)&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在方法执行之后判断</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyRole(&#x27;ROLE_admin&#x27;)&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对请求参数进行过滤</span><br><span class="hljs-meta">@PreFilter(&quot;filterObject.key == &#x27;正&#x27;&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对返回数据进行过滤</span><br><span class="hljs-meta">@PostFilter(&quot;filterObject.key == &#x27;正&#x27;&quot;)</span><br></code></pre></td></tr></table></figure><p>代码例子</p><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/toLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toLogin</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        response.sendRedirect(<span class="hljs-string">&quot;login.html&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/test1&quot;)</span><br><span class="hljs-comment">//    @Secured(&#123;&quot;ROLE_admin&quot;,&quot;ROLE_user&quot;&#125;)</span><br><span class="hljs-comment">//    @PreAuthorize(&quot;hasAnyRole(&#x27;ROLE_admin&#x27;)&quot;)</span><br><span class="hljs-comment">//    @PostAuthorize(&quot;hasAnyRole(&#x27;ROLE_admin&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">TestOnly</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ReturnDto.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testPostFilter&quot;)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">testPostFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> ReturnDto.ok(testService.testPostFilter());<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testPreFilter&quot;)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">testPreFilter</span><span class="hljs-params">()</span>&#123;<br>        List&lt;TestEntity&gt; testEntities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;正&quot;</span>,<span class="hljs-string">&quot;数据1&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;反&quot;</span>,<span class="hljs-string">&quot;数据1(反)&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;反&quot;</span>,<span class="hljs-string">&quot;数据2(反)&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;正&quot;</span>,<span class="hljs-string">&quot;数据2&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;反&quot;</span>,<span class="hljs-string">&quot;数据3(反)&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;正&quot;</span>,<span class="hljs-string">&quot;数据3&quot;</span>));<br>        <span class="hljs-keyword">return</span> ReturnDto.ok(testService.testPreFilter(testEntities));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestService</span> &#123;<br><br>    <span class="hljs-meta">@PostFilter(&quot;filterObject.key == &#x27;正&#x27;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;TestEntity&gt; <span class="hljs-title function_">testPostFilter</span><span class="hljs-params">()</span>&#123;<br>        List&lt;TestEntity&gt; testEntities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;正&quot;</span>,<span class="hljs-string">&quot;数据1&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;反&quot;</span>,<span class="hljs-string">&quot;数据1(反)&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;反&quot;</span>,<span class="hljs-string">&quot;数据2(反)&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;正&quot;</span>,<span class="hljs-string">&quot;数据2&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;反&quot;</span>,<span class="hljs-string">&quot;数据3(反)&quot;</span>));<br>        testEntities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestEntity</span>(<span class="hljs-string">&quot;正&quot;</span>,<span class="hljs-string">&quot;数据3&quot;</span>));<br>        <span class="hljs-keyword">return</span> testEntities;<br>    &#125;<br><br>    <span class="hljs-meta">@PreFilter(&quot;filterObject.key == &#x27;正&#x27;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;TestEntity&gt; <span class="hljs-title function_">testPreFilter</span><span class="hljs-params">(List&lt;TestEntity&gt; testEntities)</span>&#123;<br>        <span class="hljs-keyword">return</span> testEntities;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>validation参数验证</title>
    <link href="/2021/10/14/springBoot-validation/"/>
    <url>/2021/10/14/springBoot-validation/</url>
    
    <content type="html"><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exceptionHander</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 抓取自带注解的报错(校验<span class="hljs-doctag">@NotNull</span>、<span class="hljs-doctag">@NotBlank</span> 等)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(BindException.class)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">handleError</span><span class="hljs-params">(BindException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> ReturnDto.error(e.getBindingResult().getFieldError().getDefaultMessage());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 抓取自带注解的报错</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(ConstraintViolationException.class)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">handleError</span><span class="hljs-params">(ConstraintViolationException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> ReturnDto.error(e.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 抓取自定义注解的报错(或校验<span class="hljs-doctag">@Length</span> 等)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> ReturnDto.error(e.getBindingResult().getFieldError().getDefaultMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(&quot;标题&quot;)</span><br><span class="hljs-meta">@NotNull(message = &quot;标题不能为空&quot;)</span><br><span class="hljs-keyword">private</span> String title;<br><br><span class="hljs-meta">@ApiModelProperty(&quot;信息&quot;)</span><br><span class="hljs-meta">@NotNull(message = &quot;信息不能为空&quot;)</span><br><span class="hljs-meta">@Length(min=0, max=5)</span><br><span class="hljs-keyword">private</span> String message;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抛出全局异常</title>
    <link href="/2021/10/14/spring-%E6%8A%9B%E5%87%BA%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8/"/>
    <url>/2021/10/14/spring-%E6%8A%9B%E5%87%BA%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h5 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h5><p>Exception分为运行时异常和非运行时异常</p><p>运行时异常：编译时不会报错，会在运行中报错，若空指针异常</p><p>非运行时异常：在编译时报错，如 IOException</p><h5 id="全局异常抓取抛出"><a href="#全局异常抓取抛出" class="headerlink" title="全局异常抓取抛出"></a>全局异常抓取抛出</h5><ul><li>自定义类设置校验规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//继承运行时异常类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-comment">//此类要继承运行时异常</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThrowException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThrowException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThrowException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThrowException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ThrowException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-type">boolean</span> enableSuppression, <span class="hljs-type">boolean</span> writableStackTrace)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>设置handler抓取异常并返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionAdvice</span> &#123;<br><br>    <span class="hljs-comment">//注明异常类</span><br>    <span class="hljs-meta">@ExceptionHandler(value = ThrowException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">ErrorHandler</span><span class="hljs-params">(ThrowException e)</span> &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-comment">//将抓取的异常返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnDto</span>(e.getMessage(), <span class="hljs-string">&quot;406&quot;</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThrowException</span>(<span class="hljs-string">&quot;此处主动抛出异常&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlserver小点杂</title>
    <link href="/2021/10/13/sqlserver-sqlserver%E5%B0%8F%E7%82%B9%E6%9D%82/"/>
    <url>/2021/10/13/sqlserver-sqlserver%E5%B0%8F%E7%82%B9%E6%9D%82/</url>
    
    <content type="html"><![CDATA[<h5 id="时间相加"><a href="#时间相加" class="headerlink" title="时间相加"></a>时间相加</h5><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">DATEADD(type,number,<span class="hljs-type">date</span>)<br></code></pre></td></tr></table></figure><ul><li>常用类型</li></ul><table><thead><tr><th>年</th><th>季度</th><th>月</th><th>周</th><th>日</th><th>时</th><th>分</th><th>秒</th><th>毫秒</th></tr></thead><tbody><tr><td>yy或yyyy</td><td>qq或q</td><td>mm或m</td><td>wk或ww</td><td>dd或d</td><td>hh</td><td>mi或n</td><td>ss或s</td><td>ms</td></tr></tbody></table><ul><li>举例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> DATEADD(ss,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2021-02-27 15:05:33.0&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>给用户创建function权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> log_bin_trust_function_creators <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>sqlserver相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlserver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql小点杂</title>
    <link href="/2021/09/30/mysql-mysql%E5%B0%8F%E7%82%B9%E6%9D%82/"/>
    <url>/2021/09/30/mysql-mysql%E5%B0%8F%E7%82%B9%E6%9D%82/</url>
    
    <content type="html"><![CDATA[<h4 id="时间差"><a href="#时间差" class="headerlink" title="时间差"></a>时间差</h4><ul><li>类型</li></ul><table><thead><tr><th>秒数</th><th>分钟数</th><th>小时数</th><th>天数</th><th>周数</th><th>季度数</th><th>月数</th><th>年数</th></tr></thead><tbody><tr><td>SECOND</td><td>MINUTE</td><td>HOUR</td><td>DAY</td><td>WEEK</td><td>QUARTER</td><td>MONTH</td><td>YEAR</td></tr></tbody></table><ul><li>举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT TIMESTAMPDIFF(SECOND,‘1993-03-23 00:00:00’,DATE_FORMAT(NOW(), &#x27;%Y-%m-%d %H:%i:%S&#x27;))<br></code></pre></td></tr></table></figure><h4 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h4><ul><li>前后补字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> RPAD(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">as</span> num<br><span class="hljs-keyword">select</span> LPAD(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">as</span> num<br></code></pre></td></tr></table></figure><h4 id="行拆分"><a href="#行拆分" class="headerlink" title="行拆分"></a>行拆分</h4><ul><li>对于逗号隔开的数据拆分成行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    substring_index(substring_index( a.note,<span class="hljs-string">&#x27;,&#x27;</span>,b.help_topic_id <span class="hljs-operator">+</span> <span class="hljs-number">1</span>),<span class="hljs-string">&#x27;,&#x27;</span> ,<span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br><span class="hljs-keyword">FROM</span><br>    (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1,2,3,4&#x27;</span> <span class="hljs-keyword">as</span> note) a  <br><span class="hljs-keyword">JOIN</span> mysql.help_topic b <span class="hljs-keyword">ON</span> b.help_topic_id <span class="hljs-operator">&lt;</span><br>(length(a.note) <span class="hljs-operator">-</span> length( replace(a.note,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>变形，补行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    a.startNum <span class="hljs-operator">+</span> b.help_topic_id <span class="hljs-keyword">AS</span> rn<br><span class="hljs-keyword">FROM</span><br>    (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;001&#x27;</span> <span class="hljs-keyword">AS</span> startNum,<span class="hljs-string">&#x27;200&#x27;</span> <span class="hljs-keyword">as</span> endNumber) a  <br><span class="hljs-keyword">JOIN</span> mysql.help_topic b <span class="hljs-keyword">ON</span> b.help_topic_id <span class="hljs-operator">&lt;</span><br>(a.endNumber <span class="hljs-operator">-</span>a.startNum   <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>结合上面的行拆分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    LPAD(a.startNum <span class="hljs-operator">+</span> b.help_topic_id,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">AS</span> rn<br><span class="hljs-keyword">FROM</span><br>    (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;001&#x27;</span> <span class="hljs-keyword">AS</span> startNum,<span class="hljs-string">&#x27;200&#x27;</span> <span class="hljs-keyword">as</span> endNumber) a  <br><span class="hljs-keyword">JOIN</span> mysql.help_topic b <span class="hljs-keyword">ON</span> b.help_topic_id <span class="hljs-operator">&lt;</span><br>(a.endNumber <span class="hljs-operator">-</span>a.startNum   <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="逗号隔开的数据关联查询"><a href="#逗号隔开的数据关联查询" class="headerlink" title="逗号隔开的数据关联查询"></a>逗号隔开的数据关联查询</h4><p>table2的PARAM_ID是逗号隔开的，要查询显示逗号隔开的table2.PARAM_NAME</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>GROUP_CONCAT( table2.PARAM_NAME ) <br><span class="hljs-keyword">FROM</span><br>table2 <br><span class="hljs-keyword">WHERE</span><br>table2.PARAM_ID REGEXP ( <span class="hljs-keyword">SELECT</span> REPLACE ( ( <span class="hljs-keyword">SELECT</span> table1.PARAM_ID <span class="hljs-keyword">FROM</span> table1 <span class="hljs-keyword">WHERE</span> table1.id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> ), <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span> ) )<br></code></pre></td></tr></table></figure><h4 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h4><ul><li>逗号隔开的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>SUBSTRING_INDEX( SUBSTRING_INDEX( <span class="hljs-string">&#x27;1,2,3,4&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, help_topic_id <span class="hljs-operator">+</span> <span class="hljs-number">1</span> ), <span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-operator">-</span> <span class="hljs-number">1</span> ) <span class="hljs-keyword">AS</span> num <br><span class="hljs-keyword">FROM</span><br>mysql.help_topic <br><span class="hljs-keyword">WHERE</span><br>help_topic_id <span class="hljs-operator">&lt;</span> LENGTH( <span class="hljs-string">&#x27;1,2,3,4&#x27;</span> ) <span class="hljs-operator">-</span> LENGTH( REPLACE ( <span class="hljs-string">&#x27;1,2,3,4&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span> ) ) <span class="hljs-operator">+</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>非逗号隔开的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">LEFT</span>(<span class="hljs-built_in">SUBSTRING</span>(<span class="hljs-string">&#x27;QWER&#x27;</span>,help_topic_id<span class="hljs-operator">+</span><span class="hljs-number">1</span>),<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> num <span class="hljs-keyword">FROM</span> mysql.help_topic <span class="hljs-keyword">WHERE</span> help_topic_id <span class="hljs-operator">&lt;</span> LENGTH(<span class="hljs-string">&#x27;QWER&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h4><p><font color='red'>获取某个表的某个字段信息</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">and</span> COLUMN_NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;列名&#x27;</span><br></code></pre></td></tr></table></figure><p><font color=red>参数连接</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> CONCAT(A, B, C) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <br></code></pre></td></tr></table></figure><p>参数连接用concat函数</p><p>注：存在复杂字符串连接，若其中某个字段查询为null，则整个字符串为null(解决办法为通过IFNULL函数判断，IFNULL(AAA,’’))</p><h4 id="查看执行计划"><a href="#查看执行计划" class="headerlink" title="查看执行计划"></a>查看执行计划</h4><p>explain 字段</p><ul><li>查看mysql的耗cpu</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.threads <span class="hljs-keyword">where</span> PROCESSLIST_COMMAND <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Query&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> THREAD_OS_ID <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p>注：THREAD_OS_ID越高用的线程数越高</p><ul><li>查看目前正在查询的耗时时间长的SQL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.`PROCESSLIST` <span class="hljs-keyword">where</span> Command <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;Sleep&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> `<span class="hljs-type">time</span>` <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><ul><li>统一修改字符集(生产修改的sql然后统一执行)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">distinct</span><br>CONCAT(&quot;ALTER TABLE `&quot;, TABLE_NAME,&quot;` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;&quot;) <br><span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_SCHEMA <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;fit&#x27;</span>  <span class="hljs-keyword">and</span> table_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;t_pom%&#x27;</span> <br><span class="hljs-keyword">and</span> (character_set_name <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;utf8&#x27;</span><br><span class="hljs-keyword">or</span> collation_name <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;utf8_general_ci&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>查询缓存</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#quert_cache_type <span class="hljs-number">0</span><span class="hljs-operator">-</span>关闭 <span class="hljs-number">1</span><span class="hljs-operator">-</span>开启 <span class="hljs-number">2</span><span class="hljs-operator">-</span>查询使用SQL_CACHE的才缓存 <br>#linux my.cnf文件<br>query_cache_type<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>#使用方法(一般对于静态表才使用缓存)<br><span class="hljs-keyword">SELECT</span> SQL_CACHE <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Mysql相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取配置文件参数</title>
    <link href="/2021/09/22/spring-%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <url>/2021/09/22/spring-%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 该依赖功能为在书写yml时有提示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件数据</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wp</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">str:</span> <span class="hljs-string">这是字符串</span><br></code></pre></td></tr></table></figure><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>通过@Value注解(可不创建实体类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@PropertySource(value = &quot;application.yml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoService</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;person.str&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigCes</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：@PropertySource用来指定要获取的配置文件</p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>通过@ConfigurationProperties注解(创建实体类)</p><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@PropertySource(value = &quot;application.yml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&#x27;&quot;</span> + age + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, str=&#x27;&quot;</span> + str + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：该实体类需要注册进容器</p><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.simplemw.model.Person;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Person person;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigCes</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> person.toString();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合sentinel</title>
    <link href="/2021/08/03/springboot-sentinel/"/>
    <url>/2021/08/03/springboot-sentinel/</url>
    
    <content type="html"><![CDATA[<p>sentinel用于对请求的流量控制，熔断降级的管控</p><p>实现原理：通过拦截器对配置了限流规则的接口或者代码块进行限流和熔断降级处理</p><h4 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h4><p>流程原理：目的微服务暴露8719端口，控制台可根据8719的接口获取埋点的信息(若该端口被已经被占用，则会开启8719自增未被占用的端口)，控制台设置规则并将规则发送到目的微服务，目的微服务在进行每次访问的时候被其拦截器拦截，根据规则来流量控制</p><h5 id="开启控制台"><a href="#开启控制台" class="headerlink" title="开启控制台"></a>开启控制台</h5><p>控制台用于获取要控制的微服务的埋点，以及给每个埋点设置规则</p><ul><li><p>官网下载sentinel代码或者直接<a href="https://github.com/alibaba/Sentinel">下载</a>dashbord的jar包</p><p>启动dashbord</p></li><li><p>默认端口为8080</p></li></ul><h5 id="整合sentinel"><a href="#整合sentinel" class="headerlink" title="整合sentinel"></a>整合sentinel</h5><h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs XML">spring:<br>  application:<br>    name: sentinel<br>  cloud:<br>    sentinel:<br>      transport:<br>        #配置sentinel控制台的ip和端口<br>        dashboard: localhost:8080<br>        heartbeat-interval-ms: 500<br>      #懒加载标志 默认是false<br>      eager: true<br>      filter:<br>        #配置是否对controller进行默认控制，默认是true<br>        enabled: true<br>feign:<br>  sentinel:<br>    #feign开启sentinel限流，默认为false，且只需在FeignClient注解中配置属性 fallback就行<br>    enabled: true<br></code></pre></td></tr></table></figure><h6 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h6><ul><li>配置超出规则后的默认返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.BlockExceptionHandler;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义sentinel拦截返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>);<br>        map.put(<span class="hljs-string">&quot;mesg&quot;</span>, <span class="hljs-string">&quot;流量控制，请求失败&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(map);<br><br>        httpServletResponse.setStatus(<span class="hljs-number">500</span>);<br>        httpServletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        httpServletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> httpServletResponse.getWriter();<br>        out.print(jsonString);<br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置权限控制的校验</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.RequestOriginParser;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义Sentinel授权规则，可根据请求信息，做一个判断，返回审核结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelRequestOriginParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestOriginParser</span> &#123;<br><br>    <span class="hljs-comment">//配置授权规则可根据返回的信息进行控制</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseOrigin</span><span class="hljs-params">(HttpServletRequest httpServletRequest)</span> &#123;<br>        <span class="hljs-comment">//如：可以获取头部信息中的token去限制访问</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> httpServletRequest.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-comment">//如：判断token</span><br>        <span class="hljs-comment">//如：返回的String为调用方，在dashbord中授权规则配置中是根据返回的调用方去设置黑白名单</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;stopUser&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.Entry;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.SphU;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.Tracer;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.context.ContextUtil;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ces&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SentinelResource 注解是用于热点流控的埋点</span><br><span class="hljs-comment">     * fallback和fallbackClass指定自定义的返回的类的方法，注：该方法要为static</span><br><span class="hljs-comment">     * blockHandler和blockHandlerClass指定自定义的返回的类的方法</span><br><span class="hljs-comment">     * 两组SentinelResource的属性配置的区别是fallback是方法异常时返回，blockHandler是超出限流规则时返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;ces&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;ces&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ces</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1111&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手动创建对方法或者代码块的限流控制</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;manual&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ManualSentinelDo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//为了方便记录直接写在controller</span><br><br>        ContextUtil.enter(<span class="hljs-string">&quot;manual&quot;</span>,<span class="hljs-string">&quot;stopUser&quot;</span>);<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//设置规则</span><br>            entry = SphU.entry(<span class="hljs-string">&quot;manual&quot;</span>);<br><br>            <span class="hljs-comment">//要做限流的代码块---------------------------start</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString();<br>            <span class="hljs-keyword">return</span> date;<br>            <span class="hljs-comment">//要做限流的代码块----------------------------end</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (BlockException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;熔断降级处理...&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//正常返回异常</span><br>            e.printStackTrace();<br>            <span class="hljs-comment">//用于sentinel统计代码块中异常次数</span><br>            Tracer.trace(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//如果不为空则关闭</span><br>            <span class="hljs-keyword">if</span>(entry != <span class="hljs-literal">null</span>)&#123;<br>                entry.exit();<br>            &#125;<br>            ContextUtil.exit();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;result&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h6><p>注：</p><ul><li><p>若同一个ip起两个整合了sentinel的微服务，则第一个开发8719端口，第二个开启的端口会累加</p></li><li><p>规则是在埋点的基础上进行设置的</p></li><li><p>埋点可以是controller的接口，也可以是方法，甚至可以是一段代码块</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring Cloud Alibaba</category>
      
      <category>Sentinel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Sentinel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合flowable-model</title>
    <link href="/2021/07/06/springBoot-flowable/"/>
    <url>/2021/07/06/springBoot-flowable/</url>
    
    <content type="html"><![CDATA[<h5 id="下载Flowabel"><a href="#下载Flowabel" class="headerlink" title="下载Flowabel"></a>下载Flowabel</h5><ul><li><p>下载 <a href="https://github.com/flowable/flowable-engine">地址</a></p></li><li><p>此次使用的6.4.1版本(切换分支即可找到对应版本)</p></li></ul><h5 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h5><h5 id="准备数据库相关环境"><a href="#准备数据库相关环境" class="headerlink" title="准备数据库相关环境"></a>准备数据库相关环境</h5><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--Mysql连接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1234</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/flowable?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2b8&amp;nullCatalogMeansCurrent=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">flowable</span><br><br><span class="hljs-comment"># Mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mybatis/*.xml</span><br><br></code></pre></td></tr></table></figure><h5 id="初始化flowale的表"><a href="#初始化flowale的表" class="headerlink" title="初始化flowale的表"></a>初始化flowale的表</h5><h6 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h6><ul><li>引入依赖使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 用于初始化表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-spring-boot-starter-process<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建初始化类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.simplemw.config;<br><br><span class="hljs-keyword">import</span> org.flowable.spring.SpringProcessEngineConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowableProcessInit</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-comment">//事务管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">dataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用flowable中的类初始化数据库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringProcessEngineConfiguration <span class="hljs-title function_">springProcessEngineConfiguration</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SpringProcessEngineConfiguration</span> <span class="hljs-variable">springProcessEngineConfiguration</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringProcessEngineConfiguration</span>();<br>        springProcessEngineConfiguration.setDataSource(dataSource);<br>        <span class="hljs-comment">//此处是配置表的更新</span><br>        <span class="hljs-comment">//fale:默认值。在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。（生产环境常用）</span><br>        <span class="hljs-comment">//true:在启动时，会对数据库中所有表进行更新操作。如果表不存在，则自动创建。（开发时常用）</span><br>        springProcessEngineConfiguration.setDatabaseSchemaUpdate(<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">//传入事务管理器</span><br>        springProcessEngineConfiguration.setTransactionManager(dataSourceTransactionManager(dataSource));<br>        <span class="hljs-keyword">return</span> springProcessEngineConfiguration;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h6><ul><li>引入依赖使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建初始化类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.simplemw.config;<br><br><span class="hljs-keyword">import</span> org.flowable.engine.ProcessEngineConfiguration;<br><span class="hljs-keyword">import</span> org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceInit</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建ProcessEngineConfiguration实例,该实例可以配置与调整流程引擎的设置</span><br>        <span class="hljs-type">ProcessEngineConfiguration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandaloneProcessEngineConfiguration</span>()<br>                <span class="hljs-comment">//配置数据库相关参数</span><br>                .setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/flowable_test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2b8&amp;nullCatalogMeansCurrent=true&quot;</span>)<br>                .setJdbcUsername(<span class="hljs-string">&quot;root&quot;</span>)<br>                .setJdbcPassword(<span class="hljs-string">&quot;123456&quot;</span>)<br>                .setJdbcDriver(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)<br>                <span class="hljs-comment">//此处是配置表的更新</span><br>                <span class="hljs-comment">//flase:默认值。在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。（生产环境常用）</span><br>                <span class="hljs-comment">//true:在启动时，会对数据库中所有表进行更新操作。如果表不存在，则自动创建。（开发时常用）</span><br>                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);<br>        <span class="hljs-comment">//初始化ProcessEngine流程引擎实例</span><br>        cfg.buildProcessEngine();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h5><ul><li><p>引入 flowable-ui-modeler-app 目录下的 \src\main\resources\static，放入项目中</p></li><li><p>启动项目测试是否出现画面</p></li><li><p>account接口和models接口 404</p></li></ul><h5 id="引入rest接口并测试"><a href="#引入rest接口并测试" class="headerlink" title="引入rest接口并测试"></a>引入rest接口并测试</h5><p>经过不断的报错调试，结果如下</p><ul><li>添加model相关依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-ui-modeler-rest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-ui-modeler-logic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-ui-modeler-conf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启动类添加扫描rest的各个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//由于不需要flowable的权限管理，所以启动时排除</span><br><span class="hljs-meta">@SpringBootApplication(exclude=&#123;SecurityAutoConfiguration.class,  SecurityFilterAutoConfiguration.class&#125;)</span><br><span class="hljs-comment">//扫描添加的依赖中的项目的包，以及自定义的配置类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;org.flowable.ui.modeler.rest&quot;,&quot;org.flowable.ui.common&quot;,&quot;com.simplemw.*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowableTestApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(FlowableTestApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>复制 flowable-ui-modeler-conf 中的配置类 ApplicationConfiguration，修改ComponentScan</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(FlowableModelerAppProperties.class)</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;</span><br><span class="hljs-meta">        //引入DatabaseConfiguration，所以排除扫描</span><br><span class="hljs-meta">//        &quot;org.flowable.ui.modeler.conf&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.modeler.repository&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.modeler.service&quot;,</span><br><span class="hljs-meta">        //flowable自己的安全验证，排除</span><br><span class="hljs-meta">//        &quot;org.flowable.ui.modeler.security&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.common.conf&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.common.filter&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.common.service&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.common.repository&quot;,</span><br><span class="hljs-meta">        //flowable自己的安全验证，排除</span><br><span class="hljs-meta">//        &quot;org.flowable.ui.common.security&quot;,</span><br><span class="hljs-meta">        &quot;org.flowable.ui.common.tenant&quot; &#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">modelerApiServlet</span><span class="hljs-params">(ApplicationContext applicationContext)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">dispatcherServletConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        dispatcherServletConfiguration.setParent(applicationContext);<br>        dispatcherServletConfiguration.register(ApiDispatcherServletConfiguration.class);<br>        <span class="hljs-type">DispatcherServlet</span> <span class="hljs-variable">servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>(dispatcherServletConfiguration);<br>        <span class="hljs-type">ServletRegistrationBean</span> <span class="hljs-variable">registrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(servlet, <span class="hljs-string">&quot;/api/*&quot;</span>);<br>        registrationBean.setName(<span class="hljs-string">&quot;Flowable Modeler App API Servlet&quot;</span>);<br>        registrationBean.setLoadOnStartup(<span class="hljs-number">1</span>);<br>        registrationBean.setAsyncSupported(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>复制 flowable-ui-modeler-conf 中的配置类 DatabaseConfiguration</p></li><li><p>yaml中添加  解决报错  <code>flowable.common.app.idm-url</code> must be set</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flowable:</span><br>  <span class="hljs-attr">common:</span><br>    <span class="hljs-attr">app:</span><br>      <span class="hljs-attr">idm-url:</span> <span class="hljs-string">http://localhost:$&#123;server.port&#125;/$&#123;spring.application.name&#125;/idm</span><br></code></pre></td></tr></table></figure><ul><li><p>由于取消了权限配置相关，且无需登录，则需要自己配置登录的信息</p><p>修改文件 static\scripts\configuration\url-config.js，即修改页面请求过来的路径</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getAccountUrl</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">FLOWABLE</span>.<span class="hljs-property">CONFIG</span>.<span class="hljs-property">contextRoot</span> + <span class="hljs-string">&#x27;/login/rest/account&#x27;</span>;<br>&#125;,<br></code></pre></td></tr></table></figure><p>​新建controller接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowableController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取默认的管理员信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/rest/account&quot;, method = RequestMethod.GET, produces = &quot;application/json&quot;)</span><br>    <span class="hljs-keyword">public</span> UserRepresentation <span class="hljs-title function_">getAccount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserRepresentation</span> <span class="hljs-variable">userRepresentation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepresentation</span>();<br>        userRepresentation.setId(<span class="hljs-string">&quot;admin&quot;</span>);<br>        userRepresentation.setEmail(<span class="hljs-string">&quot;admin@flowable.org&quot;</span>);<br>        userRepresentation.setFullName(<span class="hljs-string">&quot;Administrator&quot;</span>);<br>        userRepresentation.setLastName(<span class="hljs-string">&quot;Administrator&quot;</span>);<br>        userRepresentation.setFirstName(<span class="hljs-string">&quot;Administrator&quot;</span>);<br>        List&lt;String&gt; privileges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        privileges.add(DefaultPrivileges.ACCESS_MODELER);<br>        privileges.add(DefaultPrivileges.ACCESS_IDM);<br>        privileges.add(DefaultPrivileges.ACCESS_ADMIN);<br>        privileges.add(DefaultPrivileges.ACCESS_TASK);<br>        privileges.add(DefaultPrivileges.ACCESS_REST_API);<br>        userRepresentation.setPrivileges(privileges);<br>        <span class="hljs-keyword">return</span> userRepresentation;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建模型报错（问题出在未传入UserId）,登录时添加进去即在 &#x2F;rest&#x2F;account 接口中添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserEntityImpl</span>();<br>user.setId(<span class="hljs-string">&quot;myflowable&quot;</span>);<br>SecurityUtils.assumeUser(user);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Flowable</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Flowable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign配置</title>
    <link href="/2021/05/11/springBoot-feign/"/>
    <url>/2021/05/11/springBoot-feign/</url>
    
    <content type="html"><![CDATA[<p>feign 远程服务调用组件，主要是用于微服务之间接口的互相调用</p><p>feign需要依赖于注册中心，如eurake、nacos，即用feign的提供者和消费者需要都被注册发现在注册中心中</p><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>生产者不需要做其它配置，只需要将自己注册进注册中心中就行了，如controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provide&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/ces&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provide</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我打印出来了&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>消费者需要引入openfeign依赖，且也需将自己注册进注册中心，并配置生产者信息</p><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>feign接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里的注解写服务提供者的服务名</span><br><span class="hljs-meta">@FeignClient(value = &quot;feign-provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyFeign</span> &#123;<br><br>    <span class="hljs-comment">//这里是写服务的请求接口</span><br>    <span class="hljs-meta">@GetMapping(&quot;/provide/ces&quot;)</span><br>    String <span class="hljs-title function_">provide</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoService</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">public</span> MyFeign myFeign;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provide</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> myFeign.provide();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整合到springboot很简单，难的是eurake版本的适配     <a href="https://start.spring.io/actuator/info">查询spring版本</a></p><p>本次测试版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring Cloud Alibaba</category>
      
      <category>Feign</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hystrix配置</title>
    <link href="/2021/05/11/springBoot-hystrix/"/>
    <url>/2021/05/11/springBoot-hystrix/</url>
    
    <content type="html"><![CDATA[<p> hystrix 熔断机制，用于服务间互相调用的熔断，结合feign使用</p><p>配置方式</p><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yml配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment">#开启熔断机制，默认false</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>熔断类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HystrixReturn</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyFeign</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provide</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我熔断了&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我熔断了&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承与feign的接口，即会对每一个feign做一个降级熔断返回信息配置</p><ul><li>feign类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里的注解写服务提供者的服务名</span><br><span class="hljs-meta">@FeignClient(value = &quot;feign-provider&quot;,fallback = HystrixReturn.class)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyFeign</span> &#123;<br><br>    <span class="hljs-comment">//这里是写服务的请求接口</span><br>    <span class="hljs-meta">@GetMapping(&quot;/provide/ces&quot;)</span><br>    String <span class="hljs-title function_">provide</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注解中添加降级的熔断返回信息配置类</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring Cloud</category>
      
      <category>Hystrix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Hystrix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis分布式锁使用</title>
    <link href="/2021/04/22/web-redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2021/04/22/web-redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h5 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a><a href="">安装redis</a></h5><h5 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis"></a>整合redis</h5><h5 id="简单的原生实现"><a href="#简单的原生实现" class="headerlink" title="简单的原生实现"></a>简单的原生实现</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建加锁和解锁方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLockCommon</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Redis加锁的操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key, String value)</span> &#123;<br><br>            <span class="hljs-comment">//创建redis键值对,设置超时时间为2000毫秒</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">localresult</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key,value,<span class="hljs-number">2000</span>,TimeUnit.MILLISECONDS);<br>            System.out.println(<span class="hljs-string">&quot;key：&quot;</span>+key+<span class="hljs-string">&quot; value: &quot;</span>+value);<br>            <span class="hljs-keyword">if</span>(localresult)&#123;<br>                System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">if</span>(!localresult)&#123;<br>                System.out.println(<span class="hljs-string">&quot;已存在，循环等待&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Redis解锁的操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key, String value)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentValue</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(key).toString();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (StringUtil.isNotEmpty(currentValue) &amp;&amp; currentValue.equals(value)) &#123;<br>                redisTemplate.opsForValue().getOperations().delete(key);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Service写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisLockCommon redisLock;    <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doThings</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dec_store_lock&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span>  <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span>(flag)&#123;<br>            <span class="hljs-keyword">if</span>(redisLock.tryLock(key, value))&#123;<br>                <br>                <span class="hljs-comment">//这里写要执行的代码</span><br><br>                <span class="hljs-comment">//将flag改为false</span><br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//解锁</span><br>        redisLock.unlock(key, value);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：本例子只是为了简单实现redis分布式锁，未表示出可重入锁、和看门狗特性，具体请百度</p><p>也可使用jedis来实现，Jedis 是简单的封装了 Redis 的API库，可以看作是Redis客户端，它的方法和Redis 的命令很类似，尝试加锁的命令是 setnx()</p><h5 id="redis分布式锁实现原理"><a href="#redis分布式锁实现原理" class="headerlink" title="redis分布式锁实现原理"></a><font color=red>redis分布式锁实现原理</font></h5><p>1.关键在于setIfAbsent()方法，对应linux命令setnx，即若已经存在同样的key则返回false，若不存在则创建</p><p>2.加锁即在该key中，将区分本线程与其它线程的信息写入该key的value中，可以是本线程产生的uuid也可以是本线程的线程id</p><p>3.未抢到锁的线程需不断地循环去获取锁，即创建 键值对</p><h5 id="使用redisson实现"><a href="#使用redisson实现" class="headerlink" title="使用redisson实现"></a>使用redisson实现</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实现代码，创建client客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6379&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 创建redisson</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>    config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://&quot;</span> + host + <span class="hljs-string">&quot;:&quot;</span> + port);<br>    <span class="hljs-keyword">return</span> Redisson.create(config);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doThings</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//作为锁的key</span><br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock_product&quot;</span>;<br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span>  <span class="hljs-operator">=</span> redissonClient.getLock(key);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//尝试获取锁操作，当获取到成功后即执行要实现的代码，否则则一直循环尝试获取锁</span><br>        <span class="hljs-comment">//第一个参数是等待时间该时间后获取不到锁，则直接返回。 第二个参数是强制释放时间</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">5000</span>, <span class="hljs-number">60000</span>, TimeUnit.MILLISECONDS);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-comment">//这中间是要实现的代码</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//执行完毕后解锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>三方服务</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis基础</title>
    <link href="/2021/04/22/web-redis/"/>
    <url>/2021/04/22/web-redis/</url>
    
    <content type="html"><![CDATA[<h4 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h4><h5 id="linux安装-官网-安装"><a href="#linux安装-官网-安装" class="headerlink" title="linux安装 官网 安装"></a>linux安装 <a href="http://www.redis.cn/download.html">官网</a> <a href="https://blog.csdn.net/weixin_30552635/article/details/101880100">安装</a></h5><h5 id="访问虚拟机6379设置"><a href="#访问虚拟机6379设置" class="headerlink" title="访问虚拟机6379设置"></a>访问虚拟机6379设置</h5><ul><li>关闭防火墙</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br></code></pre></td></tr></table></figure><ul><li><p>修改配置文件 redis.conf</p><ul><li>bind 127.0.0.1 注释掉</li><li>protected-mode no  关闭保护模式</li></ul></li><li><p>重新启动</p><p>src中输入</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-server ../redis.conf<br></code></pre></td></tr></table></figure><h5 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h5><h6 id="进入数据操作"><a href="#进入数据操作" class="headerlink" title="进入数据操作"></a>进入数据操作</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">src下</span><br>./redis-cli<br></code></pre></td></tr></table></figure><h6 id="清除redis"><a href="#清除redis" class="headerlink" title="清除redis"></a>清除redis</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">FLUSHDB<br></code></pre></td></tr></table></figure><h6 id="String"><a href="#String" class="headerlink" title="String"></a>String</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">存入</span><br>SET key value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 <span class="hljs-built_in">set</span> str 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取</span><br>GET key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 get str</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">截取字符串获取</span><br>GETRANGE key start end<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 GETRANGE str 0 -1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 GETRANGE str 0 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">字符串替换</span><br>SETRANGE key offset value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 SETRANGE str 1 aa</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">增加1</span><br>INCR key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 INCR str</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">减少1</span><br>DECR key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 DECR str</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">自定义增长</span><br>INCRBY key increment<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 INCRBY str 2</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">自定义减少</span><br>DECRBY key increment<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 DECRBY str 2</span><br></code></pre></td></tr></table></figure><h6 id="list"><a href="#list" class="headerlink" title="list"></a>list</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">存入</span><br>LPUSH key value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例  LPUSH list str1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">例  LPUSH list str2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">例  LPUSH list str3</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看listchangdu</span><br>LLEN key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 LLEN list</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看</span><br>LRANGE key sart stop<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例查所有 LRANGE list 0 -1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">例查一部分 LRANGE list 0 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据下标查看</span><br>LINDEX key index<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 LINDEX list 0</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">移除最左边</span><br>LPOP key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 LPOP list</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除最右边</span><br>RPOP key<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 RPOP list</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除指定值</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">value值可重复，count是移除几个</span><br>LREM key count value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 LREM list 1 str1</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">截取list</span><br>LTRIM key start stop<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 LTRIM list 1 2</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">替换</span><br>LSET key index value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 LSET list 0 str1</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">插入</span><br>LINSERT key BEFORE|AFTER pivot value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LINSERT list BEFORE str1 str0.1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LINSERT list AFTER str2 str2.1</span><br></code></pre></td></tr></table></figure><h6 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h6><p>与字符串相似，只不过value是键值对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">存入</span><br>HSET key field value<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 HSET <span class="hljs-built_in">hash</span> key value</span><br>HMSET key field value <br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 HSET <span class="hljs-built_in">hash</span> key1 value key2 value</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取</span><br>HGET key field<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例 HGET <span class="hljs-built_in">hash</span> key</span><br></code></pre></td></tr></table></figure><h6 id="set"><a href="#set" class="headerlink" title="set"></a>set</h6><h6 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h6><h4 id="springboot整合redis"><a href="#springboot整合redis" class="headerlink" title="springboot整合redis"></a>springboot整合redis</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="config-序列化"><a href="#config-序列化" class="headerlink" title="config 序列化"></a>config 序列化</h5><p>RedisTemplate默认的所有序列化规则都是JDKSerializer，而StringRedisTemplate默认的序列化规则是StringRedisSerializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;Object, Object&gt;();<br>        redisTemplate.setConnectionFactory(connectionFactory);<br><br>        <span class="hljs-comment">// 使用Jackson2JsonRedisSerialize替换默认序列化</span><br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br><br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class="hljs-comment">// 设置key和value的序列化规则</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># redis数据库索引(默认为0)，我们使用索引为3的数据库，避免和其他数据库冲突</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># redis服务器地址（默认为loaclhost）</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.255</span><span class="hljs-number">.129</span><br>    <span class="hljs-comment"># redis端口（默认为6379）</span><br>    <span class="hljs-attr">post:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment"># redis访问密码（默认为空）</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-comment"># redis连接超时时间（单位毫秒）</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">5000</span><br>    <span class="hljs-comment"># redis连接池配置</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment"># 最大空闲连接数（默认为8，负数表示无限）</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 最小空闲连接数（默认为0，负数表示无限）</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 最大可用连接数（默认为8，负数表示无限）</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h5 id="存取数据"><a href="#存取数据" class="headerlink" title="存取数据"></a>存取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-comment">//存String</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;str&quot;</span>,<span class="hljs-string">&quot;这是存字符串&quot;</span>);<br><span class="hljs-comment">//取String</span><br>redisTemplate.opsForValue().get(<span class="hljs-string">&quot;str&quot;</span>).toString();<br><span class="hljs-comment">//存Hash</span><br>redisTemplate.opsForHash().put(<span class="hljs-string">&quot;hash&quot;</span>,<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;这是hash中map的value值&quot;</span>);<br><span class="hljs-comment">//取Hash</span><br>redisTemplate.opsForHash().get(<span class="hljs-string">&quot;hash&quot;</span>,<span class="hljs-string">&quot;key&quot;</span>).toString();<br><span class="hljs-comment">//存set</span><br><br><span class="hljs-comment">//取set</span><br><br><br></code></pre></td></tr></table></figure><p>注：</p><p>Redis与数据库关系</p><p>1.Redis可以做为数据库，但由于都是存在内存中，当Redis中数据越来越大，启动时都会全部放在内存中，会导致内存不够的情况，所以一般不作为数据库</p><p>2.Redis与数据库结合，做数据操作时，首先看Redis中是否存在数据，存在则对Redis中的数据进行操作，不存在则去数据库中取数据到Redis中进行数据操作，Redis会周期性的与数据库中的数据进行同步</p><p>目前有两种连接池  Jedis和Lettuce</p>]]></content>
    
    
    <categories>
      
      <category>三方服务</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zookeeper分布式锁使用</title>
    <link href="/2021/04/22/web-zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2021/04/22/web-zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h5 id="整合zookeeper"><a href="#整合zookeeper" class="headerlink" title="整合zookeeper"></a>整合zookeeper</h5><ul><li><p>安装zookeeper</p><ul><li>开启zookeeper服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在zookeeper安装目录bin目录下</span><br>zkServer.sh start<br></code></pre></td></tr></table></figure><ul><li>开启zookeeper客户端</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在zookeeper安装目录bin目录下</span><br>./zkCli.sh<br></code></pre></td></tr></table></figure></li><li><p>依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过封装好的curator来实现</p><ul><li>代码顺序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CuratorFramework curatorFramework;<br><br><span class="hljs-comment">//设置zookeeper节点</span><br><span class="hljs-type">InterProcessMutex</span> <span class="hljs-variable">interProcessMutex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterProcessMutex</span>(curatorFramework,<span class="hljs-string">&quot;/product&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//开启锁</span><br>    interProcessMutex.acquire();<br>    zookeeperService.doThings();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//释放锁</span><br>        interProcessMutex.release();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><ul><li>多个线程都会在zookeeper的同一个路径下创建节点，并且zookeeper会自动按创建的先后顺序给节点编号</li><li>线程的执行先后顺序按节点的大小来，最先创建节点的线程先执行，即节点值最小的先执行</li><li>为了解决惊群效应，则使用后一个监听前一个的方式，当前一个节点故障或者被删除才执行后一个线程</li></ul>]]></content>
    
    
    <categories>
      
      <category>三方服务</category>
      
      <category>Zookeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nfs共享存储</title>
    <link href="/2021/04/22/%E6%8A%80%E6%9C%AF%E4%BA%86%E8%A7%A3-nfs%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8/"/>
    <url>/2021/04/22/%E6%8A%80%E6%9C%AF%E4%BA%86%E8%A7%A3-nfs%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h5 id="服务机"><a href="#服务机" class="headerlink" title="服务机"></a>服务机</h5><p>ip： 192.168.128.128</p><ul><li>下载nfs软件包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install nfs-utils rpcbind<br></code></pre></td></tr></table></figure><ul><li>设置目录 vim &#x2F;etc&#x2F;exports</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#rw 允许读写 ro 只读</span><br><span class="hljs-comment">#sync 同时将数据写入内存和硬盘  async 先写入内存再写入硬盘</span><br><span class="hljs-comment">#root_squash 当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户(不常用)</span><br><span class="hljs-comment">#no_root_squash 当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员(不常用)</span><br><span class="hljs-comment">#all_squash 无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户(常用)</span><br><span class="hljs-comment">#no_all_squash 无论NFS客户端使用什么账户访问，先与本机匹配，匹配不到则为匿名用户</span><br><span class="hljs-regexp">/tmp/</span>share  <span class="hljs-number">192.168</span>.<span class="hljs-number">128.129</span>/<span class="hljs-number">24</span>(rw,async,no_root_squash)<br></code></pre></td></tr></table></figure><ul><li>创建服务机地文件夹，并设置读写权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir share<br>chmod 777 /share<br></code></pre></td></tr></table></figure><ul><li>关闭防火墙</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><ul><li>可查看本机的nfs地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exportfs -rv<br></code></pre></td></tr></table></figure><ul><li>启动nfs服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start rpcbind ; systemctl start nfs<br></code></pre></td></tr></table></figure><ul><li>确认挂载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">df -Th<br></code></pre></td></tr></table></figure><h5 id="客户机"><a href="#客户机" class="headerlink" title="客户机"></a>客户机</h5><p>ip： 192.168.128.129</p><ul><li>下载nfs软件包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install nfs-utils rpcbind<br></code></pre></td></tr></table></figure><ul><li>创建要共享的文件夹，并设置读写权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /tmp/share<br>chmod 777 /tmp/share<br></code></pre></td></tr></table></figure><ul><li>关闭防火墙</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service rpcbind start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术了解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java各种锁</title>
    <link href="/2021/03/02/java%E5%9F%BA%E7%A1%80-%E9%94%81/"/>
    <url>/2021/03/02/java%E5%9F%BA%E7%A1%80-%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h5 id="悲观锁、乐观锁"><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h5><ul><li><p>悲观锁</p><ul><li>假设在修改数据时，同时有另外的线程修改数据</li><li>处理之前加锁，数据操作完成后释放锁</li></ul></li><li><p>乐观锁</p><ul><li><p>假设在修改数据时，不会有其它的线程修改数据</p></li><li><p>处理不加锁，同步数据时若数据已经被另外线程修改，则做失败或者重试处理</p></li></ul></li></ul><h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><ul><li>若阻塞线程唤醒线程的开销大，可将线程进行循环等待</li><li>实际是牺牲CPU(处理器时间)，换取线程切换的开销</li></ul><p>问题：若一直无法抢占到运行条件，会一直自旋；解决方法控制自旋次数</p><h5 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h5><ul><li>公平锁：线程按照申请锁的顺序存在队列中，只有队列第一个线程能获得锁，其它线程都是阻塞</li><li>非公平锁：线程也是按照申请锁的顺序存在队列中，但是刚来的线程若碰到正好有锁可用则能直接插列获得锁，正所谓来得早不如来得巧</li></ul><p>公平锁：缺点是阻塞和唤醒线程开销无法避免，非公平锁对与来得巧的线程则无该开销</p><p>非公平锁：缺点是有些线程可能一直获取不到锁，或者等待到锁的时间很长</p><h5 id="可重入锁、不可重入锁"><a href="#可重入锁、不可重入锁" class="headerlink" title="可重入锁、不可重入锁"></a>可重入锁、不可重入锁</h5><ul><li>可重入锁：同一个线程在外层方法获取锁的时候，调用该线程的内层方法会自动获取锁，避免出现死锁情况，在分布式锁中是会用一个字段来记录加锁的层数</li><li>不可重入锁：与可重入锁相反，同一个线程在外层方法获取锁的时候，调用该线程的内层方法不会获取到该锁</li></ul><p>注：不可重入锁缺点：由外层方法获取锁的时候，若在该线程中有调用自己本线程方法的时候由于本线程未释放，则无法调用本线程方法，导致本线程无法释放，形成死锁</p><h5 id="独享锁、共享锁"><a href="#独享锁、共享锁" class="headerlink" title="独享锁、共享锁"></a>独享锁、共享锁</h5><ul><li>独享锁：获取到锁后，本线程独享读写</li><li>共享锁：获取到锁后，本线程读写，其它线程读</li></ul><h5 id="锁的状态"><a href="#锁的状态" class="headerlink" title="锁的状态"></a>锁的状态</h5><p>无锁、偏向锁、轻量级锁、重量级锁</p><p>锁只能升级不能降级，方向为 无锁–&gt;偏向锁–&gt;轻量级锁–&gt;重量级锁</p><ul><li>无锁–&gt;偏向锁   当同步代码一直被一个线程占用，无锁就会转为偏向锁</li><li>偏向锁–&gt;轻量级锁  当有另外的一个线程加入进来，偏向锁会转为轻量级锁，该加入的线程会已自旋的方式进行循环等待</li><li>轻量级锁–&gt;重量级锁  当又有一个线程或多个线程加入进来，轻量级锁会转为重量级锁，等待锁的线程会转为阻塞状态</li></ul><p>操作系统的调用分为内核态和用户态</p><ul><li><p>无锁、偏向锁、轻量级锁是在用户态运行的</p></li><li><p>重量级锁是在内核态运行的</p></li></ul><p>偏向锁：减少对象下一次访问线程时再次获取锁过程</p><p>轻量级锁：当对象的获取有竞争时，线程都会以CAS自旋方式去抢占对象，抢到对象的线程会将线程id存在 mark word中</p><p>重量级锁：重量级锁是内核态的，当自旋次数达到设定的最大自旋次数，会升级为重量级锁，mark word中是指向互斥量的指针，重量级锁是互斥锁</p><p>注：轻量级锁–&gt;重量级锁 原因：等待的线程太多了，将未获取到锁的线程放入 <font color=red>等待状态</font></p><h6 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h6><p>若对象中存在 加了synchronized同步字段的方法，若jvm判断该对象不可能被其它线程引用，则jvm会自动优化，会自动消除对象内部的锁   如：StringBuffer</p><h6 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h6><p>若对象中存在 加了synchronized同步字段的方法，若该对象被多次加锁(循环)，则jvm会将加锁操作粗化到循环外部</p><p><font color=red>借鉴<a href="https://tech.meituan.com/2018/11/15/java-lock.html">出处</a></font></p><h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><p>实现原理：java原生地实现锁，即是线程将线程id写入到对象地markword中，哪个线程写入了，就哪个线程抢到了锁</p><p>三个层面解析synchronized：</p><ul><li><p>代码层面  即synchronized修饰方法或者代码块</p></li><li><p>字节码层面 被synchronized修饰的代码块，在字节码层面是 用monitorenter和monitorexit这两个命令来实现加锁和解锁的</p></li><li><p>汇编层面  即lock修饰，CAS的原理在此处的实现命令 cmpxchg，即比较改变，lock来修饰 cmpxchg保证原子性</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows开机启动jar</title>
    <link href="/2021/02/24/tools-winsw/"/>
    <url>/2021/02/24/tools-winsw/</url>
    
    <content type="html"><![CDATA[<p>使用场景：</p><p>将jar程序设置为开机启动(注：windows上)</p><h4 id="方法一：vbs文件方式"><a href="#方法一：vbs文件方式" class="headerlink" title="方法一：vbs文件方式"></a>方法一：vbs文件方式</h4><p>原理将文件放入windows启动文件夹，开机启动时会执行vbs文件</p><h5 id="创建bat文件"><a href="#创建bat文件" class="headerlink" title="创建bat文件"></a>创建bat文件</h5><p>将 java -jar xxxx.jar 执行命令放入bat文件中</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">start</span> java -jar xxxx.jar<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><h5 id="创建vbs文件"><a href="#创建vbs文件" class="headerlink" title="创建vbs文件"></a>创建vbs文件</h5><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbs"><span class="hljs-keyword">set</span> ws=WScript.<span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;WScript.Shell&quot;</span>) <br>ws.Run <span class="hljs-string">&quot;C:\xxxx.bat /start&quot;</span>,<span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><h5 id="创建vbs快捷方式"><a href="#创建vbs快捷方式" class="headerlink" title="创建vbs快捷方式"></a>创建vbs快捷方式</h5><p>创建该vbs文件的快捷方式放入windows的启动文件夹内，不同系统文件夹路径不同</p><p>如：win10专业版  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</p><p>若找不到则直接资源管理器打开该地址 或者 必找到位置方式 win+R 键入 shell:startup回车</p><p>缺点：若给直接使用的人使用，不便于部署</p><h4 id="方法二：windows服务方式"><a href="#方法二：windows服务方式" class="headerlink" title="方法二：windows服务方式"></a>方法二：windows服务方式</h4><h5 id="失败案例-sc"><a href="#失败案例-sc" class="headerlink" title="失败案例 sc"></a>失败案例 sc</h5><p>通过windows自带的sc.exe工具创建windows服务</p><ul><li>创建</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc.exe create XXXXname binpath= C:\XXXX.bat  start= auto<br></code></pre></td></tr></table></figure><p>格式为 sc.exe create 服务名 binpath&#x3D; 需要自启的bat路径  start&#x3D; auto(服务启动方式)</p><ul><li>删除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc.exe delete XXXXname<br></code></pre></td></tr></table></figure><p>格式为 sc.exe delete 服务名</p><p><font color=red>结果：</font>可创建服务，但启动服务超时(windows 1053)，网上找了很多解决方式如修改执行权限等无一解决，目前猜想，windows服务只能启动.exe文件，无法执行.bat文件</p><h5 id="成功案例一-winsw"><a href="#成功案例一-winsw" class="headerlink" title="成功案例一 winsw"></a>成功案例一 winsw</h5><p>使用第三方winsw程序，原理为注册window服务启动winsw.exe，再由winsw.exe启动java程序</p><ul><li><p>环境需要JDK，所以jdk安装必不可少</p></li><li><p>下载winsw程序，由于3版本没有2版本的简洁，使用的2版本的   <a href="https://github.com/winsw/winsw/releases">下载地址</a></p></li><li><p>为了区分启动的程序，需对winsw.exe改名为自定义的名字，如print.exe</p></li><li><p>创建.xml配置文件(注：需与上面修改的名字相同 如print.xml) </p><p>内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- service服务的id --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>print<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-comment">&lt;!-- service服务名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>print-service<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- service服务描述 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>websocket 打印服务<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置jar执行方式(下面的配置表示 使用JAVA_HOME目录下的java.exe去启动jar，即java -jar print.jar) --&gt;</span><br><span class="hljs-comment">&lt;!-- 此处也可配置其它执行命令，不一定是 java -jar --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JAVA_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%JAVA_HOME%&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">arguments</span>&gt;</span>-jar &quot;print.jar&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">arguments</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">startmode</span>&gt;</span>Automatic<span class="hljs-tag">&lt;/<span class="hljs-name">startmode</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 服务启动的日志目录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logpath</span>&gt;</span>%BASE%\log<span class="hljs-tag">&lt;/<span class="hljs-name">logpath</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">logmode</span>&gt;</span>rotate<span class="hljs-tag">&lt;/<span class="hljs-name">logmode</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建服务</p><p>cmd管理员到当前目录下</p><ul><li>新增windows服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">print.exe install<br></code></pre></td></tr></table></figure><ul><li>删除windows服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">print.exe uninstall<br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><p>windows运行     services.msc，找到新增的服务启动  </p></li><li><p>原理分析与解释</p><p>启动服务成功后查看运行程序的详情，出现两个程序</p><p>一个是windows服务程序（依托于java环境启动的，作用是使程序开机自启）</p><p>一个是启动的jar程序，该程序由winsw.exe 执行 java -jar xxxx.jar命令启动的</p><p>启动程序不会影响 运行jar包程序</p></li></ul><p>缺点：启动程序需要JDK配置环境</p><p>本质：就是创建一个执行一条命令的windows服务</p><hr><p>由于工作中用到的是单项目，则为了方便，写了其它bat来方便注册启动与卸载</p><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- service服务的id --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>print<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-comment">&lt;!-- service服务名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>print-service<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- service服务描述 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>websocket 打印服务<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置jar执行方式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JAVA_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%JAVA_HOME%&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>printService<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">arguments</span>&gt;</span>-jar &quot;print.jar&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">arguments</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">startmode</span>&gt;</span>Automatic<span class="hljs-tag">&lt;/<span class="hljs-name">startmode</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 服务启动的日志目录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logpath</span>&gt;</span>%BASE%\log<span class="hljs-tag">&lt;/<span class="hljs-name">logpath</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">logmode</span>&gt;</span>rotate<span class="hljs-tag">&lt;/<span class="hljs-name">logmode</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注册</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span><br>::获取管理员权限<br>%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span> off<br>::到当前bat执行目录,必须加/d,否则除c盘外无法切换目录<br><span class="hljs-built_in">cd</span> /d %~dp0<br>::注册服务<br><span class="hljs-built_in">print</span>.exe install<br>::由于工作中为了区分启动的服务，便于控制，故复制一个java.exe程序并改名<br><span class="hljs-built_in">copy</span> <span class="hljs-variable">%JAVA_HOME%</span>\bin\java.exe <span class="hljs-variable">%JAVA_HOME%</span>\bin\printService.exe<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span><br>::获取管理员权限<br>%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span> off<br>::到当前bat执行目录,必须加/d,否则除c盘外无法切换目录<br><span class="hljs-built_in">cd</span> /d %~dp0<br>::杀掉两个进程<br><span class="hljs-built_in">taskkill</span> /f /im <span class="hljs-built_in">print</span>.exe<br><span class="hljs-built_in">taskkill</span> /f /im printService.exe<br>::卸载服务<br><span class="hljs-built_in">print</span>.exe uninstall<br>::删除复制的java.exe<br><span class="hljs-built_in">del</span> <span class="hljs-variable">%JAVA_HOME%</span>\bin\printService.exe<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>开启服务</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span><br>::获取管理员权限<br>%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span> off<br>::停止服务<br>@<span class="hljs-built_in">net</span> stop <span class="hljs-built_in">print</span>-service<br>::启动服务<br>@<span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> <span class="hljs-built_in">print</span>-service<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>关闭服务</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span><br>::获取管理员权限<br>%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span> off<br>::工作需要就直接杀进程<br><span class="hljs-built_in">taskkill</span> /f /im <span class="hljs-built_in">print</span>.exe<br><span class="hljs-built_in">taskkill</span> /f /im printService.exe<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><h5 id="成功案例二-nssm"><a href="#成功案例二-nssm" class="headerlink" title="成功案例二 nssm"></a>成功案例二 nssm</h5><p>使用第三方nssm程序，原理为注册window服务启动nssm.exe，再由nssm.exe启动java程序</p><ul><li><p>下载nssm程序软件  <a href="https://nssm.cc/download">下载地址</a></p></li><li><p>官方常用命令 <a href="https://nssm.cc/commands">地址</a></p></li><li><p>创建服务</p><ul><li>新增windows服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">nssm install 服务名 执行文件路径   若文件需要其它程序执行如jar，可以创建bat文件，将此处的bat作为执行文件</span><br>nssm install printService  %cd%\print.bat<br></code></pre></td></tr></table></figure><ul><li>卸载window服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">nssm remove 服务名</span><br>nssm remove printService<br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><ul><li>启动服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nssm start printService<br></code></pre></td></tr></table></figure><ul><li>关闭服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nssm stop printService<br></code></pre></td></tr></table></figure></li></ul><p>原理分析：与上面winsw原理一致</p><hr><p>由于工作中用到的是单项目，则为了方便，写了其它bat来方便注册启动与卸载，与上面winsw一样</p><ul><li>实际执行bat</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span><br><span class="hljs-built_in">cd</span> /d %~dp0<br>printService.exe -jar <span class="hljs-built_in">print</span>.jar<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>注册</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bat">%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span><br><span class="hljs-built_in">cd</span> /d %~dp0<br><span class="hljs-built_in">copy</span> &quot;<span class="hljs-variable">%JAVA_HOME%</span>\bin\java.exe&quot; &quot;<span class="hljs-variable">%JAVA_HOME%</span>\bin\printService.exe&quot;<br>nssm install printService  <span class="hljs-variable">%cd%</span>\<span class="hljs-built_in">print</span>.bat<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bat">%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span><br><span class="hljs-built_in">cd</span> /d %~dp0<br>nssm stop printService<br><span class="hljs-built_in">del</span> &quot;<span class="hljs-variable">%JAVA_HOME%</span>\bin\printService.exe&quot;<br>nssm remove printService confirm<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bat">%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span><br><span class="hljs-built_in">cd</span> /d %~dp0<br><span class="hljs-built_in">taskkill</span> /f /im <span class="hljs-built_in">print</span>.exe<br><span class="hljs-built_in">taskkill</span> /f /im printService.exe<br>nssm stop printService<br>nssm <span class="hljs-built_in">start</span> printService<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><ul><li>关闭</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bat">%<span class="hljs-number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>@<span class="hljs-built_in">echo</span><br>nssm stop printService<br><span class="hljs-built_in">taskkill</span> /f /im <span class="hljs-built_in">print</span>.exe<br><span class="hljs-built_in">taskkill</span> /f /im printService.exe<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务部署</category>
      
      <category>windows开机启动jar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务部署</tag>
      
      <tag>windows开机启动jar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Websocket</title>
    <link href="/2021/01/27/springBoot-websocket/"/>
    <url>/2021/01/27/springBoot-websocket/</url>
    
    <content type="html"><![CDATA[<p>一次握手，双向数据传输</p><p>介绍：特点是一次握手，双向数据传输</p><p>出现原因：http协议的生命周期是 客户端发送请求，服务端接收响应，缺点是服务端无法在客户端未发送请求的情况下主动发送信息，websocket就是在这种情况下产生的，在建立连接后实现双通道传输。</p><p>springboot整合websocket</p><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 若启动报错排除tomcat依赖试试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- websocket依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- json转换工具 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ServerEndpointExporter 作用</span><br><span class="hljs-comment">     * 这个Bean会自动注册使用<span class="hljs-doctag">@ServerEndpoint</span>注解声明的websocket endpoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServerEndpoint(value = &quot;/connect&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(WebSocketServer.class);<br><br>    <span class="hljs-comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br>    <span class="hljs-keyword">private</span> Session session;<br><br>    <span class="hljs-comment">//接收sid</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sid</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session, <span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        <span class="hljs-built_in">this</span>.session = session;<br>        webSocketSet.add(<span class="hljs-built_in">this</span>);     <span class="hljs-comment">//加入set中</span><br>        addOnlineCount();           <span class="hljs-comment">//在线数加1</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-string">&quot;&quot;</span>.equals(sid))&#123;<br>            log.info(<span class="hljs-string">&quot;有新的连接加入：sid=&quot;</span>+sid+<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        log.info( <span class="hljs-string">&quot;当前在线人数为&quot;</span> + getOnlineCount());<br>        <span class="hljs-built_in">this</span>.sid = sid;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            sendMessage(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            log.error(<span class="hljs-string">&quot;websocket IO异常&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 断开</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">()</span> &#123;<br>        webSocketSet.remove(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">//从set中删除</span><br>        subOnlineCount();           <span class="hljs-comment">//在线数减1</span><br>        log.info(<span class="hljs-string">&quot;有一连接关闭！当前在线数为&quot;</span> + getOnlineCount());<br>    &#125;<br><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message, Session session)</span> &#123;<br>        <span class="hljs-type">BaseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResult</span>();<br>        <span class="hljs-comment">//把用户发来的消息解析成json对象</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> JSONObject.parseObject(message);<br>        <span class="hljs-comment">//测试获取里面的一个参数</span><br>        System.out.println(param.get(<span class="hljs-string">&quot;test&quot;</span>));<br>        <span class="hljs-keyword">try</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这里执行操作&quot;</span>);<br>            result.setStatus(<span class="hljs-string">&quot;OK&quot;</span>);<br>            result.setCode(<span class="hljs-string">&quot;200&quot;</span>);<br>            result.setMsg(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>            session.getAsyncRemote().sendText(JSON.toJSONString(result));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            result.setStatus(<span class="hljs-string">&quot;fail&quot;</span>);<br>            result.setCode(<span class="hljs-string">&quot;406&quot;</span>);<br>            result.setMsg(e.getMessage());<br>            session.getAsyncRemote().sendText(JSON.toJSONString(result));<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@OnError</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Session session, Throwable error)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;发生错误&quot;</span>);<br>        error.printStackTrace();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主动推送</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.session.getBasicRemote().sendText(message);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义群发消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendInfo</span><span class="hljs-params">(String message, <span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        log.info(<span class="hljs-string">&quot;推送消息到窗口&quot;</span> + sid + <span class="hljs-string">&quot;,推送消息内容:&quot;</span> + message);<br>        <span class="hljs-keyword">for</span> (WebSocketServer item : webSocketSet) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//设定只能推送这个sid，为null则全部推送</span><br>                <span class="hljs-keyword">if</span> (sid == <span class="hljs-literal">null</span>) &#123;<br>                    item.sendMessage(message);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.sid.equals(sid)) &#123;<br>                    item.sendMessage(message);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> onlineCount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        WebSocketServer.onlineCount++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        WebSocketServer.onlineCount--;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：</p><p>实现类中</p><p><font color=red>@OnOpen</font>注解的方法为第一次握手执行</p><p><font color=red>@OnMessage</font>注解的方法为连接后数据传输执行的</p><p>测试方法：</p><p>网络找websocket在线测试工具，介绍网站 <a href="https://www.toolfk.com/">工具网站</a> </p><p>地址为 ws:&#x2F;&#x2F;IP:端口&#x2F;connect     注：connect为@ServerEndpoint注解设置的</p><p>先连接，后发送信息如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;紧急信息&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>扩展：</p><p>网上搜索websocket的时候，都提到了ajax和long poll，记录自己理解</p><p>ajax：一直发送请求，一直轮询，有新消息就接收，所以ajax一般用在保证实时性高的地方，如项目开发中的可视化数据展示</p><p>long poll：长轮询，后端接收到前端的消息后，后端在进行处理的时候如果处理时间很长就会将该请求一直等待，直到处理完毕后，才将响应返回</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Websocket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven</title>
    <link href="/2020/12/23/springBoot-maven/"/>
    <url>/2020/12/23/springBoot-maven/</url>
    
    <content type="html"><![CDATA[<p>用途：用于项目构建 jar包下载管理</p><h5 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h5><ul><li>setting文件  地址 maven\apache-maven-3.6.3\conf\settings.xml</li></ul><p>常用配置解释：</p><p><font color=red>本地仓库地址</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\maven<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color=red>访问仓库的用户密码</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color=red>镜像仓库地址</font>  作用类似于代理，若中央远程仓库在国外，可以使用此处配置国内的镜像仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color=red>远程仓库</font> 本地依赖的下载来源仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun-repos<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>  <br></code></pre></td></tr></table></figure><ul><li>本地仓库</li></ul><p>若不在settings.xml配置，则默认在 C:\Users\Administrator\.m2  里面(Administrator为目前windows的用户名)</p><ul><li>idea配置</li></ul><p>File—&gt;settings—&gt;Buile,Execution,Deployment—&gt;maven 配置</p><p>Maven home directory 配置 本地maven安装目录</p><p>User settings file 配置 settings.xml文件地址</p><p>Local repository 配置 本地maben仓库地址</p><h5 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h5><p>spring项目在创建时会创建一个pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!-- pom的约束 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- pom的版本，兼容2和3 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 父项目 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.simplemw<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 父项目版本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 项目名称，表示该pom对应哪个项目 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置信息，可记录统一配置信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置编码格式为utf-8 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置工作环境，可配置多个然后自由切换(用于不同的环境有不同的配置时使用，如此处可以放置docker的ip信息等) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- profile的名字 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 若未选定profile时默认为这个 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置信息，可配置当前profile的配置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- profile的名字 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>pre<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置信息，可配置当前profile的配置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- web启动依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 插件，使用的一些插件可以在这里进行配置，如docker插件等 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Spring Boot --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 用于指定jdk的编译版本(编译后会将引用了properties的文件将properties中的信息填入进去) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">compilerArgs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>-parameters<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">compilerArgs</span>&gt;</span> <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：依赖的scope五种设置   <strong>compile</strong>、<strong>provided</strong>、<strong>runtime</strong>、<strong>test</strong>、<strong>system</strong></p><p>compile：scope的默认配置，编译以及测试运行时都提供，打包会包含进去</p><p>provided：只在使用的时候(并且JDK或者容器中已经存在该资源)，编译以及测试运行时才提供，打包不会包含进去</p><p>runtime：不进行编译，测试和运行时提供，打包不会包含进去</p><p>test：不进行编译，只在测试时使用</p><p>system：用于指定本地jar时使用</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nacos配置</title>
    <link href="/2020/12/22/springBoot-nacos/"/>
    <url>/2020/12/22/springBoot-nacos/</url>
    
    <content type="html"><![CDATA[<p>Nacos是继Eureka后的新的配置注册服务中心</p><p>分为两部分 discovery(注册中心) 和 config(配置中心)</p><h5 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h5><p>网上下载nacos，windows版或者linux版，不同版本有不同的启动方式</p><ul><li>默认端口为8848，初始用户名和密码为 nacos&#x2F;nacos</li><li>启动后使用 localhost:8848&#x2F;nacos登录页面，能显示则启动成功</li></ul><h5 id="discovery-注册中心"><a href="#discovery-注册中心" class="headerlink" title="discovery(注册中心)"></a>discovery(注册中心)</h5><p>与Eureka一样，配置了discovery的注册发现的会在nacos中显示，并且可由nacos控制</p><ul><li>配置依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web启动依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- nacos注册发现依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启动类添加注册发现注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br></code></pre></td></tr></table></figure><p>新版本已经不需要写这个注解了</p><ul><li>bootstrap.yml或者application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment">#本服务的端口</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1112</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment">#本服务的名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-discovery</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment">#nacos注册中心的ip以及端口</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.200</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment">#添加服务名(会显示在nacos页面上)，经测试不添加服务名只在启动的时候能够被注册发现</span><br>        <span class="hljs-attr">service:</span> <span class="hljs-string">nacos-discovery</span><br></code></pre></td></tr></table></figure><h5 id="config-配置中心"><a href="#config-配置中心" class="headerlink" title="config(配置中心)"></a>config(配置中心)</h5><p>与Eureka一样，可以将配置存在其它地方，nacos是将配置信息存在nacos服务本地的文件夹中的</p><ul><li>配置依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web启动依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--nacos配置中心--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>bootstrap.yml或者application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1111</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment">#设置组，不写默认为DEFAULT_GROUP</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>        <span class="hljs-comment">#配置真实ip，不能配置127.0.0.1</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.200</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment">#要与nacos上的配置的类型一致，例不能yml和yaml</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">nacos-config</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">02bd5c1e-ad56-47c2-a934-7a9e89c4a73c</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment">#设置注册发现服务名</span><br>        <span class="hljs-attr">service:</span> <span class="hljs-string">nacos-config</span><br>        <span class="hljs-comment">#配置真实ip，不能配置127.0.0.1</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.200</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment">#nacos显示页面左边添加命名空间，这里填入命名空间的id</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">02bd5c1e-ad56-47c2-a934-7a9e89c4a73c</span><br></code></pre></td></tr></table></figure><p>注：nacos添加的配置信息需要与这里的配置信息对应才能拿到，特别注意 namespace</p><p>举例获取配置信息</p><ul><li>nacos配置    data Id &#x3D; nacos-config.yaml      Group &#x3D; DEFAULT_GROUP</li></ul><p>注：data Id的命名规则为 ${prefix}-${spring.profiles.active}.${file-extension}，spring.profiles.active不配置则不用写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">data:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-number">234</span><br></code></pre></td></tr></table></figure><p>另：可以配置多个yaml或者配置共享yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#设置共享配置文件</span><br><span class="hljs-attr">shared-configs:</span> <span class="hljs-string">datasource.yaml</span><br></code></pre></td></tr></table></figure><ul><li>代码获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestContoller</span> &#123;<br><span class="hljs-comment">//官方推荐使用@Value，@NacosValue获取不到值，若启动报错则给默认值如 $&#123;data.name:123&#125;</span><br>    <span class="hljs-meta">@Value(value = &quot;$&#123;data.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-meta">@GetMapping(&quot;ces&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h5><ul><li>nacos的依赖是springcloud的，若项目为springboot则 boot和cloud的版本要一致</li><li>discovery的配置中要写上 service:服务名  不然只在启动时才显示出来</li><li>config配置发现也要写上discovery注册发现</li><li>namespace工作空间一定要写上，切为创建的工作空间的id</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring Cloud Alibaba</category>
      
      <category>Nacos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式转换</title>
    <link href="/2020/12/18/java%E5%9F%BA%E7%A1%80-%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/12/18/java%E5%9F%BA%E7%A1%80-%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h5 id="map转json"><a href="#map转json" class="headerlink" title="map转json"></a>map转json</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JSONObject</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(map);<br></code></pre></td></tr></table></figure><h5 id="json转map"><a href="#json转map" class="headerlink" title="json转map"></a>json转map</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashMap</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> JSONObject.parseObject(jsonstr, HashMap.class);<br></code></pre></td></tr></table></figure><h5 id="时间格式转换"><a href="#时间格式转换" class="headerlink" title="时间格式转换"></a>时间格式转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).parse(downloadAcousticTxtVm.getTestTime());<br>downloadAcousticTxtVm.setTestTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>).format(date));<br></code></pre></td></tr></table></figure><h5 id="字符串补位"><a href="#字符串补位" class="headerlink" title="字符串补位"></a>字符串补位</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String.format(<span class="hljs-string">&quot;%03d&quot;</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>效果：1—&gt;001        0是补位的符号，3是补足多少位，d是整形   <a href="https://blog.csdn.net/anita9999/article/details/82346552">了解</a></p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chis主题添加Valine评论</title>
    <link href="/2020/12/16/hexo%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA/"/>
    <url>/2020/12/16/hexo%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.leancloud.cn/">leanCloud</a> 创建应用 获取 appid和appkey</li><li>_config.yml文件添加</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine.</span><br><span class="hljs-comment"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="hljs-comment"># more info please open https://valine.js.org</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">************************************</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">*****************************</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 评论回复提醒</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 验证码</span><br><span class="hljs-attr">placeholder:</span> <span class="hljs-string">Please</span> <span class="hljs-string">leave</span> <span class="hljs-string">your</span> <span class="hljs-string">footprints....</span> <br><span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">wavatar</span><br><span class="hljs-attr">tag:</span> <br><span class="hljs-attr">master:</span> <span class="hljs-string">博主</span><br><span class="hljs-attr">friends:</span> <span class="hljs-string">小伙伴</span><br><span class="hljs-attr">eachother:</span> <span class="hljs-string">访客</span><br><span class="hljs-attr">emailSet:</span> <br><span class="hljs-attr">master:</span> [<span class="hljs-string">&quot;c2d3a0cc0e960d0378ed2ca174feb84f&quot;</span>]   <span class="hljs-comment">#博主邮箱md5</span><br><span class="hljs-attr">friends:</span> [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>]  <span class="hljs-comment">#标识为小伙伴的邮箱不添加则标识为访客 </span><br><span class="hljs-attr">metaPlaceholder:</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">昵称/QQ号(输入QQ号邮箱能自动回显)</span><br><span class="hljs-attr">email:</span> <span class="hljs-string">邮箱</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">网址（http://）</span><br></code></pre></td></tr></table></figure><ul><li>Chic\layout_plugins 下添加 valine.ejs</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;valine_comment&quot;&gt;&lt;/div&gt;<br>&lt;!--载入js，在&lt;/body&gt;之前插入即可--&gt;<br>&lt;!--Leancloud 操作库:--&gt;<br>&lt;script src=&quot;/blog/js/av-min.js&quot;&gt;&lt;/script&gt;<br>&lt;!--Valine 的核心代码库--&gt;<br>&lt;script src=&quot;/blog/js/Valine.min.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>  new Valine(&#123;<br>      el: &#x27;.valine_comment&#x27;,<br>      app_id: &#x27;&lt;%= theme.valine.appid %&gt;&#x27;,<br>      app_key: &#x27;&lt;%= theme.valine.appkey %&gt;&#x27;,<br>      placeholder: &#x27;&lt;%= theme.valine.placeholder %&gt;&#x27;,<br>      notify: &#x27;&lt;%= theme.valine.notify %&gt;&#x27;,<br>      verify: &#x27;&lt;%= theme.valine.verify %&gt;&#x27;,<br>      enableQQ: &#x27;&lt;%= theme.valine.enableQQ %&gt;&#x27;,<br>      master: &#x27;&lt;%= theme.valine.emailSet.master %&gt;&#x27;,<br>friends: &#x27;&lt;%= theme.valine.emailSet.friends %&gt;&#x27;,  <br>tagMeta: new Array(&quot;&lt;%= theme.valine.tag.master %&gt;&quot;,&quot;&lt;%= theme.valine.tag.friends %&gt;&quot;,&quot;&lt;%= theme.valine.tag.eachother %&gt;&quot;),<br>metaPlaceholder: &#123;&quot;nick&quot;:&quot;&lt;%= theme.valine.metaPlaceholder.name %&gt;&quot;,&quot;mail&quot;:&quot;&lt;%= theme.valine.metaPlaceholder.email %&gt;&quot;,&quot;link&quot;:&quot;&lt;%= theme.valine.metaPlaceholder.url %&gt;&quot;&#125;,<br>avatar: &#x27;&lt;%= theme.valine.avatar %&gt;&#x27;,<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>Chic\source\js 添加 文件 Valine.min.js 和 av-min.js</li></ul><p>地址为 <a href="https://simplemw.gitee.io/blog/js/Valine.min.js">https://simplemw.gitee.io/blog/js/Valine.min.js</a></p><p>和 <a href="https://simplemw.gitee.io/blog/js/av-min.js">https://simplemw.gitee.io/blog/js/av-min.js</a></p><p>注：Valine.min.js是找的魔改版，比原官方多的功能是输入qq号自动获取头像和邮箱</p><ul><li><p>评论输入区加了图片，在 Chic\source\image 中添加 comment.jpg图片</p></li><li><p>启动后看样式，若出现格式不对 则修改 Valine.min.js文件</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Http请求</title>
    <link href="/2020/12/15/java%E5%9F%BA%E7%A1%80-Http%E8%AF%B7%E6%B1%82/"/>
    <url>/2020/12/15/java%E5%9F%BA%E7%A1%80-Http%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>场景：后台Http请求其它接口获取token</p><h5 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">HttpGetUrlJump</span><span class="hljs-params">(String getUrl, Map&lt;String, Object&gt; HeaderParams, Map&lt;String, Object&gt; params)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//拼url</span><br>        <span class="hljs-keyword">if</span> (params != <span class="hljs-literal">null</span>) &#123;<br>            Iterator&lt;String&gt; it = params.keySet().iterator();<br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) params.get(key);<br>                <span class="hljs-keyword">if</span> (sb == <span class="hljs-literal">null</span>) &#123;<br>                    sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>                    sb.append(<span class="hljs-string">&quot;?&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    sb.append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>                &#125;<br>                sb.append(key);<br>                sb.append(<span class="hljs-string">&quot;=&quot;</span>);<br>                sb.append(value);<br>            &#125;<br>            getUrl += sb.toString();<br>        &#125;<br><br>        <span class="hljs-comment">//创建url</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(getUrl);<br>        <span class="hljs-comment">//创建连接对象（HttpURLConnection是实现的接口URLConnection）</span><br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        <span class="hljs-comment">//默认为true，设置后可使用inputStream获取数据</span><br>        connection.setDoInput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置为GET提交</span><br>        connection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>        <span class="hljs-comment">//Post 请求不能使用缓存</span><br>        connection.setUseCaches(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//最高超时时间</span><br>        connection.setConnectTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">//最高读取时间</span><br>        connection.setReadTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">//最高连接时间</span><br>        connection.setConnectTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">//设置本次连接是否自动重定向</span><br>        connection.setInstanceFollowRedirects(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">//判断是否需要Header传参</span><br>        <span class="hljs-keyword">if</span> (HeaderParams.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            Set&lt;String&gt; set = HeaderParams.keySet();<br>            <span class="hljs-keyword">for</span> (String str : set) &#123;<br>                <span class="hljs-comment">//设置每一条请求头信息</span><br>                connection.setRequestProperty(str, (String) HeaderParams.get(str));<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//连接</span><br>        connection.connect();<br><br>        <span class="hljs-comment">//获取响应</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(connection.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            result += line;<br>        &#125;<br>        <span class="hljs-comment">//关闭reader</span><br>        reader.close();<br>        <span class="hljs-comment">//断开连接</span><br>        connection.disconnect();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面拼url方法来自网络，非常巧妙，使用一个外接变量，初始设为null判断为null为第一次的方式巧妙地确定了第一次———————<font color=red>good，good，good，机智，机智，机智</font></p><h5 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h5><p>需要传入url，请求头header，请求body信息(都以map的形式传入)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">HttpPostUrlJump</span><span class="hljs-params">(String postUrl, Map&lt;String,Object&gt; HeaderParams, Map&lt;String,Object&gt; params)</span>&#123;<br>    String result=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//创建url</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(postUrl);<br>        <span class="hljs-comment">//创建连接对象（HttpURLConnection是实现的接口URLConnection）</span><br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        <span class="hljs-comment">//默认未false,设置后可使用outputStream传数据；若为get请求不需开启</span><br>        connection.setDoOutput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//默认为true，设置后可使用inputStream获取数据</span><br>        connection.setDoInput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置为post提交</span><br>        connection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        <span class="hljs-comment">//Post 请求不能使用缓存</span><br>        connection.setUseCaches(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//最高超时时间</span><br>        connection.setConnectTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">//最高读取时间</span><br>        connection.setReadTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">//最高连接时间</span><br>        connection.setConnectTimeout(<span class="hljs-number">60000</span>);<br>        <span class="hljs-comment">//设置本次连接是否自动重定向</span><br>        connection.setInstanceFollowRedirects(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//设置请求头信息key，value</span><br>        <span class="hljs-comment">//Content-Type设置发送的内容编码类型,通用使用application/x-www-form-urlencoded，json使用application/json</span><br>        connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/json&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否需要Header传参</span><br>        <span class="hljs-keyword">if</span>(HeaderParams.size()&gt;<span class="hljs-number">0</span>)&#123;<br>            Set&lt;String&gt; set = HeaderParams.keySet();<br>            <span class="hljs-keyword">for</span> (String str : set) &#123;<br>                <span class="hljs-comment">//设置每一条请求头信息</span><br>                connection.setRequestProperty(str, (String) HeaderParams.get(str));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//连接</span><br>        connection.connect();<br>        <span class="hljs-comment">// 得到请求的输出流对象</span><br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(connection.getOutputStream(),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">//传入请求体信息body为json格式</span><br>        <span class="hljs-keyword">if</span>(params.size()&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//传入body内容json格式</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(params);<br>            writer.write(String.valueOf(json));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//传入参数为空时传入&#123;&#125;</span><br>            writer.write(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//刷新缓冲区</span><br>        writer.flush();<br>        <span class="hljs-comment">//关闭writer</span><br>        writer.close();<br><br>        <span class="hljs-comment">//获取响应</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(connection.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            result += line;<br>        &#125;<br>        <span class="hljs-comment">//关闭reader</span><br>        reader.close();<br>        <span class="hljs-comment">//断开连接</span><br>        connection.disconnect();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><p>注：其中有些值还是写死，具体情况具体修改</p><p>Http的两种提交方式跳转：<a href="https://simplemw.gitee.io/blog/2020/11/12/spring-%E5%9F%BA%E7%A1%80.html#web%E6%8F%90%E4%BA%A4">GET,POST比较</a></p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2020/12/03/web-docker/"/>
    <url>/2020/12/03/web-docker/</url>
    
    <content type="html"><![CDATA[<h3 id="虚拟机安装Docker以及启动"><a href="#虚拟机安装Docker以及启动" class="headerlink" title="虚拟机安装Docker以及启动"></a>虚拟机安装Docker以及启动</h3><h4 id="将老版本docker删除干净"><a href="#将老版本docker删除干净" class="headerlink" title="将老版本docker删除干净"></a>将老版本docker删除干净</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br>rpm  -qa |grep  docker<br>yum <span class="hljs-keyword">list</span> installed | grep docker<br>yum remove -y  containerd.io.x86_64   docker-ce.x86_64   docker-ce-cli.x86_64<br></code></pre></td></tr></table></figure><p>安装见 <a href="https://blog.csdn.net/weixin_39553910/article/details/89953617">教程</a></p><h4 id="修改docker-service文件"><a href="#修改docker-service文件" class="headerlink" title="修改docker.service文件"></a>修改docker.service文件</h4><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service</p><ul><li>第一种</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/dockerd -H tcp:/</span><span class="hljs-regexp">/0.0.0.0:2375 -H fd:/</span><span class="hljs-regexp">/ --containerd=/</span>run<span class="hljs-regexp">/containerd/</span>containerd.sock<br></code></pre></td></tr></table></figure><p>若启动失败，则删除 -H fd:&#x2F;&#x2F; –containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock</p><ul><li>第二种</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/dockerd -H tcp:/</span><span class="hljs-regexp">/0.0.0.0:2375 -H unix:/</span><span class="hljs-regexp">/var/</span>run/docker.sock<br></code></pre></td></tr></table></figure><h4 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><h4 id="加入宿主机路由"><a href="#加入宿主机路由" class="headerlink" title="加入宿主机路由"></a>加入宿主机路由</h4><p>虚拟机启动docker，宿主机无法访问虚拟机中的docker，需加入路由</p><p>route -p add 172.17.0.0 mask 255.255.0.0 192.168.128.129  前面是docker的ip后面是虚拟机的ip</p><h4 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h4><ul><li>FROM      基于什么基础镜像</li><li>RUN    构建镜像时运行的指令</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#运行shell指令</span><br><span class="hljs-built_in">RUN</span> yum install -y vim<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#运行数组模式的命令</span><br><span class="hljs-built_in">RUN</span> [<span class="hljs-string">&quot;yum&quot;</span>,<span class="hljs-string">&quot;install&quot;</span>,<span class="hljs-string">&quot;-y&quot;</span>,<span class="hljs-string">&quot;vim&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#运行echo打印</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> hello</span><br></code></pre></td></tr></table></figure><ul><li><p>EXPOSE    暴露的端口</p></li><li><p>WORKDIR  进入镜像的落脚点目录</p></li><li><p>COPY、ADD   将文件拷贝入镜像中</p><p>解释：区别：ADD会自动解压、ADD还能对文件中的地址进行自动下载，但对下载的压缩包不会自动解压</p></li><li><p>VOLUME    设置镜像可挂载目录</p></li><li><p>ENV 设置环境变量</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ENV JAVA_HOME <span class="hljs-regexp">/data/</span>JDK<br></code></pre></td></tr></table></figure><ul><li>CMD、ENTRYPOINT</li></ul><p>解释：区别，ENTRYPOINT只能执行一个指令，CMD可以运行多个但只能执行最后一个</p><p>与 RUN的区别，RUN是在镜像生成时执行，CMD和ENTRYPOINT是在运行容器时第一个命令</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><h4 id="新建镜像"><a href="#新建镜像" class="headerlink" title="新建镜像"></a>新建镜像</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t  mycentos:<span class="hljs-number">01</span> .<br></code></pre></td></tr></table></figure><p>解释：后面的.表示Dockerfile在当前路径下</p><h4 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it centos<br></code></pre></td></tr></table></figure><p>解释：加it表示运行时进入container</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">加长版run</span><br>docker run -d -p 9669:9669 --name demoname mycentos:01 --network host<br></code></pre></td></tr></table></figure><p>解释：-d 后台启动  -p 设置端口映射  –name 设置容器名称 –network host 以当前服务器的ip作为容器ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 9669:9669 --name demoname mycentos:01 --restart=always<br></code></pre></td></tr></table></figure><p>解释：–restart&#x3D;always 服务器开机自启镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec<br></code></pre></td></tr></table></figure><p>解释：在运行的容器中执行命令</p><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#查看正在运行的容器</span><br><span class="hljs-attribute">docker</span> ps<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#查看运行过的容器</span><br>docker ps -<span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><h4 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker stop 容器名<br></code></pre></td></tr></table></figure><h4 id="移除容器"><a href="#移除容器" class="headerlink" title="移除容器"></a>移除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#移除停止的容器</span><br>docker <span class="hljs-built_in">rm</span> 容器名<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#移除全部已经停止的容器</span><br>docker <span class="hljs-built_in">rm</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-qa</span>)<br></code></pre></td></tr></table></figure><h4 id="移除镜像"><a href="#移除镜像" class="headerlink" title="移除镜像"></a>移除镜像</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> rmi 镜像ID<br></code></pre></td></tr></table></figure><h4 id="镜像物理转移"><a href="#镜像物理转移" class="headerlink" title="镜像物理转移"></a>镜像物理转移</h4><ul><li>镜像转tar</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker save -o aaa.tar mycentos:01<br></code></pre></td></tr></table></figure><ul><li>tar转镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker load -i aaa.tar<br></code></pre></td></tr></table></figure><h3 id="IDEA集成docker"><a href="#IDEA集成docker" class="headerlink" title="IDEA集成docker"></a>IDEA集成docker</h3><h4 id="安装docker插件"><a href="#安装docker插件" class="headerlink" title="安装docker插件"></a>安装docker插件</h4><h4 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#设置基础镜像</span><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jre<br><span class="hljs-comment">#设置进入镜像的目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-comment">#将上下文目录中的jar复制到WORKDIR目录</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> docker-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="hljs-comment">#暴露接口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">9669</span><br><span class="hljs-comment">#容器运行时最先执行的命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>]</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h4 id="POM中引入dockerfile"><a href="#POM中引入dockerfile" class="headerlink" title="POM中引入dockerfile"></a>POM中引入dockerfile</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这里实际配置的是在docker服务器上要执行的命令 --&gt;</span><br><span class="hljs-comment">&lt;!-- 要生成的镜像名称 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>dockerdemo:0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定远程 docker api地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dockerHost</span>&gt;</span>http://172.17.0.1:2375<span class="hljs-tag">&lt;/<span class="hljs-name">dockerHost</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置用户的安全验证，用户名和密码，需在maven的setting.xml文件中进行配置 --&gt;</span><br><span class="hljs-comment">&lt;!-- setting.xml有两处配置位置：</span><br><span class="hljs-comment">1.用户/.m2/settings.xml</span><br><span class="hljs-comment">2.maven/apache-maven-3.6.3/conf/setting.xml(maven安装路径)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">serverId</span>&gt;</span>my-docker-registry<span class="hljs-tag">&lt;/<span class="hljs-name">serverId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置tar信息及地址(需要先对项目进行package打包) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 描述，可以写开发人员的信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>docker_maven docker_maven@email.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Dockerfile--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class="hljs-tag">&lt;/<span class="hljs-name">dockerDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务部署</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务部署</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日期时间 LocalDateTime</title>
    <link href="/2020/12/02/java%E5%9F%BA%E7%A1%80-LocalDateTime/"/>
    <url>/2020/12/02/java%E5%9F%BA%E7%A1%80-LocalDateTime/</url>
    
    <content type="html"><![CDATA[<p>场景：</p><p>SimpleDateFormat 的format和parse方法是线程不安全的</p><p>LocalDateTime、LocalDate、LocalTime </p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建当前日期</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br><span class="hljs-comment">//创建当前时间</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br><span class="hljs-comment">//创建当前日期时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br><span class="hljs-comment">//构造日期</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate1</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>);<br><span class="hljs-comment">//构造时间</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime1</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">9</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//构造日期时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime1</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>);<br><span class="hljs-comment">//根据构造日期和构造时间合成日期时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime2</span> <span class="hljs-operator">=</span> LocalDateTime.of(localDate1,localTime1);<br></code></pre></td></tr></table></figure><h5 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">//格式化日期时间 使用LocalDateTime的标准样式转字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> localDateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);<br>System.out.println(str1);<br><br><span class="hljs-comment">//指定格式格式化 LocalDateTime转字符串</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> dateTimeFormatter.format(localDateTime);<br>System.out.println(str2);<br><br><span class="hljs-comment">//指定时间格式解析时间 字符串转LocalDateTime</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2020.05.12 13:14:00&quot;</span>;<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> LocalDateTime.parse(str, dateTimeFormatter);<br>System.out.println(dateTime);<br></code></pre></td></tr></table></figure><h5 id="获取年月日时分秒"><a href="#获取年月日时分秒" class="headerlink" title="获取年月日时分秒"></a>获取年月日时分秒</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取年月日时分秒</span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> dateTime.getYear();<br><span class="hljs-type">Month</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> dateTime.getMonth();<br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> dateTime.getDayOfMonth();<br><span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> dateTime.getHour();<br><span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> dateTime.getMinute();<br><span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> dateTime.getSecond();<br>System.out.println(<span class="hljs-string">&quot;年：&quot;</span>+year+<span class="hljs-string">&quot; 月：&quot;</span>+month+<span class="hljs-string">&quot; 日：&quot;</span>+day+<span class="hljs-string">&quot; 时：&quot;</span>+hour+<span class="hljs-string">&quot; 分：&quot;</span>+minute+<span class="hljs-string">&quot; 秒：&quot;</span>+second);<br></code></pre></td></tr></table></figure><h5 id="LocalDateTime转Date"><a href="#LocalDateTime转Date" class="headerlink" title="LocalDateTime转Date"></a>LocalDateTime转Date</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());<br></code></pre></td></tr></table></figure><h5 id="Date转LocalDateTime"><a href="#Date转LocalDateTime" class="headerlink" title="Date转LocalDateTime"></a>Date转LocalDateTime</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> date.toInstant()<br>        .atZone(ZoneId.systemDefault())<br>        .toLocalDateTime();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis相关</title>
    <link href="/2020/11/26/springBoot-mybatis/"/>
    <url>/2020/11/26/springBoot-mybatis/</url>
    
    <content type="html"><![CDATA[<p>此为mybatis的用法，plus的用法 <a href="http://simplemw.gitee.io/blog/2020/11/07/spring-mybatisplus.html">点击</a> 进入</p><h5 id="xml中使用uuid"><a href="#xml中使用uuid" class="headerlink" title="xml中使用uuid"></a>xml中使用uuid</h5><ul><li>uuid用法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span>  <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;key名&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span>&gt;</span><br>    select uuid()<br><span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<insert>   </insert>中间加上上面段落 keyProperty为insert的id栏位值</p><ul><li><p>即使java中有方法重载，但XML中标签id不能有相同的</p></li><li><p>yml配置</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span> <span class="hljs-comment">#mapper.xml配置路径，该配置对应resources/mapper/</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.simplemw.entity</span> <span class="hljs-comment"># 实体类所在的位置</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment">#用于控制台打印sql语句</span><br></code></pre></td></tr></table></figure><h5 id="使用handler处理字段"><a href="#使用handler处理字段" class="headerlink" title="使用handler处理字段"></a>使用handler处理字段</h5><p>mybtis中提供了不同类型的继承BaseTypeHandler<T>的不同类型的handler来处理字段</p><p>工作中问题，存入数据在blob中，拿出来的时候乱码，解决办法：使用mybtis的handler直接进行处理</p><ul><li>配置handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisBlobHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-comment">//指定字符集</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_CHARSET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf-8&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理 数据插入时 执行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ps PreparedStatement</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i parameter参数位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameter 参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jdbcType 参数类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i,String parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        ByteArrayInputStream bis;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//把String转化成byte流，字符集为 utf-8</span><br>            bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(parameter.getBytes(DEFAULT_CHARSET));<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            <span class="hljs-comment">//String转化byte失败时使用</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Blob Encoding Error!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//传入 PreparedStatement</span><br>        ps.setBinaryStream(i, bis, parameter.length());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理 根据列名获取时 执行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs 查询结果集</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> columnName 列名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span><span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//获取结果集中的数据</span><br>        <span class="hljs-type">Blob</span> <span class="hljs-variable">blob</span> <span class="hljs-operator">=</span> (Blob) rs.getBlob(columnName);<br>        <span class="hljs-type">byte</span>[] returnValue = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != blob) &#123;<br>            <span class="hljs-comment">//转换为byte[]</span><br>            returnValue = blob.getBytes(<span class="hljs-number">1</span>, (<span class="hljs-type">int</span>) blob.length());<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//把byte转化成string，使用字符集为 utf-8</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returnValue, DEFAULT_CHARSET);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Blob Encoding Error!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理 根据下标获取时 执行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cs</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> columnIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span><span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//从结果集中获取blob</span><br>        <span class="hljs-type">Blob</span> <span class="hljs-variable">blob</span> <span class="hljs-operator">=</span> (Blob) cs.getBlob(columnIndex);<br>        <span class="hljs-type">byte</span>[] returnValue = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != blob) &#123;<br>            <span class="hljs-comment">//blob转byte[]</span><br>            returnValue = blob.getBytes(<span class="hljs-number">1</span>, (<span class="hljs-type">int</span>) blob.length());<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//返回值</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returnValue, DEFAULT_CHARSET);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Blob Encoding Error!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理 存储过程调用时 执行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> columnIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span><span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>pojo中配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(typeHandler = MybatisBlobHandler.class)</span><br></code></pre></td></tr></table></figure><p>理解：</p><p>BaseTypeHandler<T> 中存在4个方法，一个set与三个get(通过列名从结果集中获取字段，通过下标从结果集中获取字段，还有一个专用于存储过程(吾目前没用过))</p><p>setNonNullParameter()，mybatis中的sql执行是以预编译的形式，上面的实现原理就是在insert之前对数据进行处理然后放入PreparedStatement中</p><p>getNullableResult()，查询结果出来后，获取查询的信息，对其中的信息做处理然后返回至pojo对象中</p><h5 id="使用pagehelper分页"><a href="#使用pagehelper分页" class="headerlink" title="使用pagehelper分页"></a>使用pagehelper分页</h5><p>实现原理就是在执行的sql后面添加 limit(pageNum,pageSize)</p><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-comment">#默认会自动识别数据库类型，但也可以指定</span><br>  <span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-comment">#默认为false,合理化查询，页码&lt;=0的时候查询第一页，超过最大页查询最后一页</span><br>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认为false,设置为true当设置pageSize为0的时候查全部</span><br>  <span class="hljs-attr">pageSizeZero:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#pageSize=0</span><br>  <span class="hljs-comment">#默认为false,判断Dao要执行的方法参数列表是否有pageNum和pageSize参数，有会自动进行分页</span><br>  <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认为false,多数据源时自动识别分页方言</span><br>  <span class="hljs-attr">autoRuntimeDialect:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>service使用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//pageNum为页码，pageSize为每页记录数</span><br>PageHelper.startPage(pageNum,pageSize);<br></code></pre></td></tr></table></figure><p>注：若xml中配置了  supportMethodsArguments：true，则在Dao层方法的参数列表中直接添加pageNum和pageSize可以自动识别分页</p><h5 id="pagehelper-补充"><a href="#pagehelper-补充" class="headerlink" title="pagehelper 补充"></a>pagehelper 补充</h5><p>mybatisplus 使用pagehelper分页</p><ul><li>mybatisplus自带了pagehelper不用注入依赖</li><li>添加配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlus</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">PaginationInterceptor</span> <span class="hljs-variable">paginationInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>        <span class="hljs-keyword">return</span> paginationInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>application或者bootstrap配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-comment">#默认为false,合理化查询，页码&lt;=0的时候查询第一页，超过最大页查询最后一页</span><br>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认为false,设置为true当设置pageSize为0的时候查全部</span><br>  <span class="hljs-attr">pageSizeZero:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#pageSize=0</span><br>  <span class="hljs-comment">#默认为false,判断Dao要执行的方法参数列表是否有pageNum和pageSize参数，有会自动进行分页</span><br>  <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认为false,多数据源时自动识别分页方言</span><br>  <span class="hljs-attr">autoRuntimeDialect:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>mapper配置(plus中需要mapper去继承BaseMapper)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PrintTemplateMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;PrintTemplate&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service中写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;PrintTemplate&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//填入分页信息</span><br>Page&lt;PrintTemplate&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageIndex, pageSize);<br><span class="hljs-comment">//填入条件</span><br>queryWrapper.eq(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//分页查询</span><br>printTemplateMapper.selectPage(page, queryWrapper);<br></code></pre></td></tr></table></figure><h5 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h5><p>两种方式：启动类，plugin插件</p><h6 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h6><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动生成mapper和pojo的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 填数据库连接jar，使用plugin的时候必须指定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;D:\maven\mysql\mysql-connector-java\8.0.15\mysql-connector-java-8.0.15.jar&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成的Java文件的编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;javaFileEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 格式化java代码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;javaFormatter&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 格式化XML代码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xmlFormatter&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/cloud_data?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>useSSL=true<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span><br><span class="hljs-comment">            true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- targetPackage为实体类生成到的路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;./src/main/java&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.simplemw.entity&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 从数据库返回的值被清理前后的空格  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 对应的dao层文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;./src/main/java&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.simplemw.dao&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--对应的mapper.xml文件  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;./src/main/resources&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mapper&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 列出要生成代码的所有表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName表名，domainObjectName生成的pojo名，其它的配置是否生成sql --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">selectByExampleQueryId</span>=<span class="hljs-string">&quot;false&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useActualColumnNames&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">generator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        List&lt;String&gt; warnings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-comment">//设置如果已经存在生成的文件是否需要覆盖</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">overwrite</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//设置配置文件的路径,此处配置的相对路劲要与启动类的位置对应</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">configFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/generatorConfig.xml&quot;</span>);<br>        <span class="hljs-type">ConfigurationParser</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationParser</span>(warnings);<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> cp.parseConfiguration(configFile);<br>        <span class="hljs-type">DefaultShellCallback</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShellCallback</span>(overwrite);<br>        <span class="hljs-type">MyBatisGenerator</span> <span class="hljs-variable">myBatisGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBatisGenerator</span>(config, callback, warnings);<br>        myBatisGenerator.generate(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="plugin插件"><a href="#plugin插件" class="headerlink" title="plugin插件"></a>plugin插件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>generate<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 输出详细信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 覆盖生成文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 定义配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generatorConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：generatorConfig.xml中需要加入本地的数据库连接jar地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;D:\maven\mysql\mysql-connector-java\8.0.15\mysql-connector-java-8.0.15.jar&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Mybatis时间格式化"><a href="#Mybatis时间格式化" class="headerlink" title="Mybatis时间格式化"></a>Mybatis时间格式化</h5><ul><li>mysql时间格式化</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">date_format(now(), &#x27;%Y-%m-%d %H:%i:%s&#x27;)<br></code></pre></td></tr></table></figure><ul><li>接收前端参数格式化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>返回前端参数格式化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="hljs-meta">@JSONField(format=&quot;yyyy-MM-dd&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="Mybatis查询补充"><a href="#Mybatis查询补充" class="headerlink" title="Mybatis查询补充"></a>Mybatis查询补充</h5><h6 id="in"><a href="#in" class="headerlink" title="in"></a>in</h6><ul><li>代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML">id in<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>#&#123;item&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><p>open&#x3D;”(“ separator&#x3D;”,” close&#x3D;”)”   拼接括号参数</p><p>index&#x3D;”index”  确定foreach的起始位置，类似于游标的功能</p><p>collection&#x3D;”ids”  传入的list名称</p><p>item&#x3D;”item”  每一个元素的名称</p><h6 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h6><ul><li>代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;condition == 1&quot;</span>&gt;</span><br>        AND name = #&#123;name1&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;condition == 2&quot;</span>&gt;</span><br>        AND name = #&#123;name2&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>        AND name = #&#123;name3&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(condition == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-type">AND</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> #&#123;name1&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(condition == <span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-type">AND</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> #&#123;name2&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-type">AND</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> #&#123;name3&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">#&#123;&#125; 预编译(最终带单引号)<br>$&#123;&#125; 直接获取(不带单引号)    若需要加单引号可使用 &lt;![CDATA[<span class="hljs-string">&#x27;$&#123;id&#125;&#x27;</span>]]&gt;<br></code></pre></td></tr></table></figure><h5 id="注"><a href="#注" class="headerlink" title="注"></a>注</h5><p>判断相等时，后面的字符串要加toString()</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;condition == &#x27;1&#x27;.toString()&quot;</span>&gt;</span><br>        AND name = #&#123;name1&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;condition == &#x27;2&#x27;.toString()&quot;</span>&gt;</span><br>        AND name = #&#123;name2&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>        AND name = #&#123;name3&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="/2020/11/26/java%E5%9F%BA%E7%A1%80-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/11/26/java%E5%9F%BA%E7%A1%80-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>解释：</p><p>java核心思想为面向对象，在内存中为一个一个的对象，序列化与反序列化为操作对象的一种方式</p><p><font color=red>序列化：将 java对象 转换为 二进制序列</font></p><p><font color=red>反序列化：将 二进制序列 还原为 java对象</font></p><p>序列化用途：</p><ul><li><p>对象存储硬盘</p></li><li><p>对象网络传输</p></li></ul><p>Serializable 知识扩展 <a href="https://baijiahao.baidu.com/s?id=1633305649182361563&wfr=spider&for=pc">链接</a></p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多数据源配置</title>
    <link href="/2020/11/18/springBoot-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2020/11/18/springBoot-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>mybatis中通过 SqlSessionFactory 来创建 SqlSession会话对象，一个会话commit一次，也即一个会话就是一个事务</p><p>动态数据源构建原理就是根据需要，添加需要的datasource来定制化 SqlSessionFactory，springboot中集成通过切面的形式来进行配置</p><p>mybatisplus 动态数据源整合</p><h3 id="第一种部署"><a href="#第一种部署" class="headerlink" title="第一种部署"></a>第一种部署</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatisplus相关依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- AOP --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置mybatisplus相关信息"><a href="#配置mybatisplus相关信息" class="headerlink" title="配置mybatisplus相关信息"></a>配置mybatisplus相关信息</h4><p>pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;dept&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptPojo</span> &#123;<br>    Integer deptno;<br>    String deptname;<br>    String deptsource;<br>&#125;<br></code></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//mybatisplus通过BaseMapper来自动配置mapper</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;DeptPojo&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestService</span> &#123;<br>    List&lt;DeptPojo&gt; <span class="hljs-title function_">selectALL</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>serviceimpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceimpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-keyword">public</span> List&lt;DeptPojo&gt; <span class="hljs-title function_">selectALL</span><span class="hljs-params">()</span> &#123;<br>        QueryWrapper&lt;DeptPojo&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;DeptPojo&gt;();<br>        <span class="hljs-keyword">return</span> deptMapper.selectList(queryWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;list_my&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;DeptPojo&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> testService.selectALL();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数据源的核心配置"><a href="#数据源的核心配置" class="headerlink" title="数据源的核心配置"></a>数据源的核心配置</h4><p>数据源操作类</p><p>通过继承 AbstractRoutingDataSource类来构建多数据源然后放入线程中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRoutingDataSource</span> &#123;<br><br>    <span class="hljs-comment">//创建线程对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;DataSource&gt; CONTEXT_HOLDER = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//利用构造方法将默认数据源以及多数据源放入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicDataSource</span><span class="hljs-params">(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> &#123;<br>        <span class="hljs-comment">//设置默认数据源</span><br>        <span class="hljs-built_in">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);<br>        <span class="hljs-comment">//设置所有数据源</span><br>        <span class="hljs-built_in">super</span>.setTargetDataSources(targetDataSources);<br>        <span class="hljs-built_in">super</span>.afterPropertiesSet();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">determineCurrentLookupKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getDataSource();<br>    &#125;<br><br>    <span class="hljs-comment">//数据源放入线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataSource</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        CONTEXT_HOLDER.set(dataSource);<br>    &#125;<br><br>    <span class="hljs-comment">//数据源拿出线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearDataSource</span><span class="hljs-params">()</span> &#123;<br>        CONTEXT_HOLDER.remove();<br>    &#125;<br><br>    <span class="hljs-comment">//获取数据源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> CONTEXT_HOLDER.get();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>application.yml配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">#datasource配置<br>spring:<br>  datasource:<br>    primary:<br>      jdbc-url: jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/cloud_data?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>      driver-class-name: com.mysql.cj.jdbc.Driver<br>      username: root<br>      password: <span class="hljs-number">123456</span><br>    secondary:<br>      jdbc-url: jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/cloud_data?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>      driver-class-name: com.mysql.cj.jdbc.Driver<br>      username: root<br>      password: <span class="hljs-number">123456</span><br><br>#mybatis配置<br>mybatis-plus:<br>  global-config:<br>    db-config:<br>      id-type: auto<br>      field-strategy: not_empty<br>      table-underline: <span class="hljs-literal">true</span><br>      db-type: mysql<br>      logic-delete-value: <span class="hljs-number">1</span> # 逻辑已删除值(默认为 <span class="hljs-number">1</span>)<br>      logic-not-delete-value: <span class="hljs-number">0</span> # 逻辑未删除值(默认为 <span class="hljs-number">0</span>)<br><br>server:<br>  port: <span class="hljs-number">9669</span><br></code></pre></td></tr></table></figure><p>读取配置文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.simplemw.mapper&quot;, sqlSessionFactoryRef = &quot;SqlSessionFactory&quot;)</span> <span class="hljs-comment">//basePackages 我们接口文件的地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicDataSourceConfig</span> &#123;<br><br>    <span class="hljs-comment">//设置为默认数据源</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;PrimaryDataSource&quot;)</span><br>    <span class="hljs-comment">//获取application中的配置</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title function_">getDateSource1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//通过DataSourceBuilder类来生成datasource对象</span><br>        <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;SecondaryDataSource&quot;)</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.secondary&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title function_">getDateSource2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;dynamicDataSource&quot;)</span><br>    <span class="hljs-comment">//使用获取的配置对象</span><br>    <span class="hljs-keyword">public</span> DynamicDataSource <span class="hljs-title function_">DataSource</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;PrimaryDataSource&quot;)</span> DataSource primaryDataSource,<span class="hljs-meta">@Qualifier(&quot;SecondaryDataSource&quot;)</span> DataSource secondaryDataSource)</span> &#123;<br>        Map&lt;Object, Object&gt; targetDataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        targetDataSource.put(<span class="hljs-string">&quot;primary&quot;</span>, primaryDataSource);<br>        targetDataSource.put(<span class="hljs-string">&quot;secondary&quot;</span>, secondaryDataSource);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicDataSource</span>(primaryDataSource,targetDataSource);<br>    &#125;<br><br>    <span class="hljs-comment">//生成SqlSessionFactory</span><br>    <span class="hljs-meta">@Bean(name = &quot;SqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">SqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;dynamicDataSource&quot;)</span> DataSource dynamicDataSource)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//mybatisplus生成SqlSessionFactory</span><br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        <span class="hljs-comment">//传入数据源</span><br>        sqlSessionFactoryBean.setDataSource(dynamicDataSource);<br>        sqlSessionFactoryBean.setTransactionFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringManagedTransactionFactory</span>());<br><br>        <span class="hljs-type">MybatisConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisConfiguration</span>();<br>        <span class="hljs-comment">//传入泛型 statement和mapper</span><br>        configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);<br>        <span class="hljs-comment">//手动指定传入数据为空的数据类型</span><br>        configuration.setJdbcTypeForNull(JdbcType.NULL);<br>        <span class="hljs-comment">//传入configuration配置</span><br>        sqlSessionFactoryBean.setConfiguration(configuration);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置启动类"><a href="#配置启动类" class="headerlink" title="配置启动类"></a>配置启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处需要关闭springboot的自动配置datasource</span><br><span class="hljs-meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(TestApplication.class,args);<br>&#125;                                                                                     &#125;<br></code></pre></td></tr></table></figure><h4 id="xml形式配置"><a href="#xml形式配置" class="headerlink" title="xml形式配置"></a>xml形式配置</h4><p>注：若mapper以xml的形式实现则使用下面的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;dynamicDataSource&quot;)</span> DataSource dynamicDataSource)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//mybatisplus生成SqlSessionFactory</span><br>    <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>    <span class="hljs-comment">//传入数据源</span><br>    sqlSessionFactoryBean.setDataSource(dynamicDataSource);<br>    <span class="hljs-comment">//传入mapper.xml文件</span><br>    sqlSessionFactoryBean.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>()<br>                                             .getResources(<span class="hljs-string">&quot;classpath*:/mapper/*.xml&quot;</span>));<br>    sqlSessionFactoryBean.setTransactionFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringManagedTransactionFactory</span>());<br>    <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二种部署"><a href="#第二种部署" class="headerlink" title="第二种部署"></a>第二种部署</h3><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 实现对 dynamic-datasource 的自动化配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatisplus相关依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># dynamic-datasource-spring-boot-starter 动态数据源的配置内容</span><br>    <span class="hljs-attr">dynamic:</span><br>      <span class="hljs-attr">primary:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 设置默认的数据源或者数据源组，默认值即为 master</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-comment"># 主数据源配置</span><br>        <span class="hljs-attr">master:</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ces?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>        <span class="hljs-attr">secondary:</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ces2?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DS(&quot;secondary&quot;)</span><br>List&lt;CesPojo&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>方法上加注解</p><h3 id="补充：再整合druid"><a href="#补充：再整合druid" class="headerlink" title="补充：再整合druid"></a>补充：再整合druid</h3><h4 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="yml配置-1"><a href="#yml配置-1" class="headerlink" title="yml配置"></a>yml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">autoconfigure:</span><br>    <span class="hljs-comment">#自动化配置，若不配置需启动类配置  @SpringBootApplication(exclude = DruidDataSourceAutoConfigure.class)</span><br>    <span class="hljs-attr">exclude:</span> <span class="hljs-string">com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment"># dynamic-datasource-spring-boot-starter 动态数据源的配置内容</span><br>    <span class="hljs-attr">dynamic:</span><br>      <span class="hljs-comment"># 设置默认的数据源或者数据源组，默认值即为 master</span><br>      <span class="hljs-attr">primary:</span> <span class="hljs-string">master</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-comment"># 订单 orders 数据源配置</span><br>        <span class="hljs-attr">master:</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ces?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>        <span class="hljs-attr">secondary:</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ces2?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>      <span class="hljs-comment">#druid配置</span><br>      <span class="hljs-attr">druid:</span><br>        <span class="hljs-comment"># 初始化连接池个数</span><br>        <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 最小连接池个数——&gt;已经不再使用，配置了也没效果</span><br>        <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 最大连接池个数</span><br>        <span class="hljs-attr">maxActive:</span> <span class="hljs-number">30</span><br>        <span class="hljs-comment"># 配置获取连接等待超时的时间，单位毫秒，缺省启用公平锁，并发效率会有所下降</span><br>        <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>        <span class="hljs-comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br>        <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>        <span class="hljs-comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span><br>        <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>        <span class="hljs-comment"># 用来检测连接是否有效的sql，要求是一个查询语句。</span><br>        <span class="hljs-comment"># 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用</span><br>        <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-string">&#x27;x&#x27;</span><br>        <span class="hljs-comment"># 建议配置为true，不影响性能，并且保证安全性。</span><br>        <span class="hljs-comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br>        <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br>        <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br>        <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br>        <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>        <span class="hljs-comment"># 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：</span><br>        <span class="hljs-comment"># 监控统计用的filter:stat</span><br>        <span class="hljs-comment"># 日志用的filter:log4j</span><br>        <span class="hljs-comment"># 防御sql注入的filter:wall</span><br>        <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,slf4j,config</span><br>        <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">log-slow-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">merge-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br><br>    <span class="hljs-comment">//配置Druid的监控</span><br>    <span class="hljs-comment">//1、配置一个管理后台的Servlet</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ServletRegistrationBean</span> <span class="hljs-variable">servletRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br>        <span class="hljs-comment">// IP白名单</span><br>        servletRegistrationBean.addInitParameter(<span class="hljs-string">&quot;allow&quot;</span>, <span class="hljs-string">&quot;172.16.106.156&quot;</span>);<br>        <span class="hljs-comment">// IP黑名单(共同存在时，deny优先于allow)</span><br><span class="hljs-comment">//        servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.1.100&quot;);</span><br>        <span class="hljs-comment">//控制台管理用户</span><br>        servletRegistrationBean.addInitParameter(<span class="hljs-string">&quot;loginUsername&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>        servletRegistrationBean.addInitParameter(<span class="hljs-string">&quot;loginPassword&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-comment">//是否能够重置数据 禁用HTML页面上的“Reset All”功能</span><br>        servletRegistrationBean.addInitParameter(<span class="hljs-string">&quot;resetEnable&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>        <span class="hljs-keyword">return</span> servletRegistrationBean;<br>    &#125;<br><br><br>    <span class="hljs-comment">//创建一个新的过滤器，将原来的filter进行改写 WebStatFilter，对druid.*的url进行拦截</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">webStatFilter</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">filterRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebStatFilter</span>());<br>        filterRegistrationBean.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>        filterRegistrationBean.addInitParameter(<span class="hljs-string">&quot;exclusions&quot;</span>, <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,*/druid/*&quot;</span>);<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>druid监控页面url   </p><p><a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Datasource</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Datasource</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GET和POST</title>
    <link href="/2020/11/12/spring-GET%E5%92%8CPOST/"/>
    <url>/2020/11/12/spring-GET%E5%92%8CPOST/</url>
    
    <content type="html"><![CDATA[<h4 id="web提交"><a href="#web提交" class="headerlink" title="web提交"></a><font color=red>web提交</font></h4><h5 id="get提交"><a href="#get提交" class="headerlink" title="get提交"></a>get提交</h5><ul><li>一般用于查询和删除，若条件数据较多，如in方式的则使用post</li></ul><h5 id="post提交"><a href="#post提交" class="headerlink" title="post提交"></a>post提交</h5><ul><li>一般用于新增和更新</li><li>一般使用pojo去接收传进来的数据，<ul><li>若需要一个 &lt;Pojo 的对象，可以在原pojo上添加 @Builder 注解，通过建造者模式链式构建对象来处理</li><li>若需要一个 &gt;Pojo 的对象，3种处理方式<ul><li>通过map的方式去接收 添加注解 (@RequestBody表示处理post提交的body)；</li><li>新建个 PojoVo类来装请求数据(新增一个 Pojo扩容类)；</li><li>直接对原来的Pojo扩容其它使用原pojo的则使用建造者模式链式构建对象(不推荐)；</li></ul></li></ul></li></ul><p>两者优缺点</p><ul><li>网上的举例</li></ul><p>tcp类比汽车，http类比交通规则，而GET、POST则为服务级别；GET请求为 货物需放在车顶上(url)方便记录，且贴上Get标签(method为GET)；POST请求为 货物放在箱体(Body)中，且贴上Post标签(method为POST)；也有GET请求在箱体内偷偷放东西的，也有POST请求放一些货物放在车顶的；由于符合交通规则，GET也可以在车顶无限放货物；浏览器和服务器类比于运输公司，由于装货和卸货都是浏览器和服务器干的，所以浏览器和一些服务器都规定车顶上放的货物有一个限制，超出部分不处理(url的大小有规定，超出的数据不处理)；当然如果GET请求箱体内放点东西，有些服务器也会好心的帮你处理下</p><p>GET和POST其实没啥区别，只是受限制于浏览器和服务器</p><ul><li><p>请求的时候 GET请求只跑一次 header和data一次运输，服务器响应200；POST跑两次先header过去服务器响应100，然后data过去服务器响应200</p></li><li><p>get提交不安全，数据都放在url种，且请求数据大小有限制，但是前端逻辑简单，请求数据也很直观</p></li><li><p>浏览器回退，get提交无危害，post会再次请求</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gateway配置</title>
    <link href="/2020/11/12/springBoot-gateway/"/>
    <url>/2020/11/12/springBoot-gateway/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>gateway位于客户端与服务端之间，作为两者的中间层，可以实现监控、认证等功能</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>主要是通过过滤器对请求进行过滤然后实现 添加的 功能，最后转发路由到其它微服务</p><p>注：gateway存在很多的内置过滤器，下面只举例对path的过滤器</p><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment">#可任意定义，不能重复，route的id</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">routeid</span><br>          <span class="hljs-comment">#要跳转的路径</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://simplemw.gitee.io/blog/</span><br>          <span class="hljs-comment">#断言 返回的是true和false</span><br>          <span class="hljs-attr">predicates:</span><br>          <span class="hljs-comment">#配置gateway的过滤器以及过滤条件将结果返回给predicates</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/blog</span><br></code></pre></td></tr></table></figure><p>遇到的坑：</p><p>使用路径过滤器的，必须满足转发前的路径和转发后的路径 最后一层url都一样</p><p>如 localhost:8080&#x2F;blog   就会跳转 <a href="https://simplemw.gitee.io/blog/">https://simplemw.gitee.io/blog/</a></p><h5 id="配置类配置方式"><a href="#配置类配置方式" class="headerlink" title="配置类配置方式"></a>配置类配置方式</h5><p>可以写在启动类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">gatewayApplication</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(gatewayApplication.class,args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * gateway过滤器配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> builder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">customRouteLocator</span><span class="hljs-params">(RouteLocatorBuilder builder)</span> &#123;<br>        <span class="hljs-keyword">return</span> builder.routes()<br>            <span class="hljs-comment">//此处可以写多个过滤器</span><br>                .route(<span class="hljs-string">&quot;route&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/blog&quot;</span>)<br>                        .uri(<span class="hljs-string">&quot;https://simplemw.gitee.io/blog/&quot;</span>))<br>                .route(<span class="hljs-string">&quot;route1&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/spring-cloud&quot;</span>)<br>                        .uri(<span class="hljs-string">&quot;https://spring.io/projects/spring-cloud&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转发其它服务方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment">#可任意定义，不能重复，route的id</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">demo</span><br>          <span class="hljs-comment">#要跳转的微服务为demo</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://demo</span><br>          <span class="hljs-comment">#断言 返回的是true和false</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-comment">#配置gateway的过滤器以及过滤条件将结果返回给predicates</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/demo/*</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">demo1</span><br>          <span class="hljs-comment">#要跳转的微服务为demo1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://demo1</span><br>          <span class="hljs-comment">#断言 返回的是true和false</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-comment">#配置gateway的过滤器以及过滤条件将结果返回给predicates</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/demo1/*</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><p>可配合Eureka或者nacos服务注册发现</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring Cloud Alibaba</category>
      
      <category>Gateway</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2020/11/11/java%E5%9F%BA%E7%A1%80-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/11/11/java%E5%9F%BA%E7%A1%80-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\b</td><td><font color=red>匹配单词的开始和结束</font></td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意空白字符</td></tr><tr><td>\d</td><td>匹配一个数字,等价于 [0-9]</td></tr><tr><td>\B</td><td><font color=red>匹配不是单词开头和结束的位置</font></td></tr><tr><td>\W</td><td>匹配不是字母或数字或下划线或汉字</td></tr><tr><td>\S</td><td>匹配不是空白字符</td></tr><tr><td>\D</td><td>匹配不是数字</td></tr></tbody></table><h4 id="重复限定符"><a href="#重复限定符" class="headerlink" title="重复限定符"></a>重复限定符</h4><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>？</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><ul><li><p>[]表示区间  此处的^为非的意思</p><ul><li>如[0-9]表示匹配0到9中的数字</li><li>如[a-z]表示匹配a到z中的小写字母</li><li>如[A-Z]表示匹配A到Z中的大写字母</li><li>如[^0-9]表示匹配不为0到9中的字符</li><li>如[^a-z]表示匹配不为a到z中的字符</li><li>如[^A-Z]表示匹配不为A到Z中的字符</li></ul></li><li><p>|表示或者 java运算符用法</p></li><li><p>()表示分组 四则运算用法</p></li><li><p>断言后续补充</p></li></ul><p>借鉴于 <a href="https://www.zhihu.com/question/48219401/answer/742444326">https://www.zhihu.com/question/48219401/answer/742444326</a></p><p>常用的正则表达式</p><p><font color=red>^(?&#x3D;.*[0-9])(?&#x3D;.*[a-zA-Z])(.{8,})$</font>                     由数字和字符组成的8位以上字符串   </p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lombok注解</title>
    <link href="/2020/11/10/java%E5%9F%BA%E7%A1%80-lombok/"/>
    <url>/2020/11/10/java%E5%9F%BA%E7%A1%80-lombok/</url>
    
    <content type="html"><![CDATA[<h3 id="lombok常见注解"><a href="#lombok常见注解" class="headerlink" title="lombok常见注解"></a>lombok常见注解</h3><p>pojo中作用</p><h4 id="Getter-x2F-Setter"><a href="#Getter-x2F-Setter" class="headerlink" title="@Getter&#x2F;@Setter"></a>@Getter&#x2F;@Setter</h4><p>生成所有成员变量的get、set方法</p><h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>toString()方法  of属性限定显示，exclude属性排除</p><h4 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h4><p>用于判断成员变量标识是否为空，为空抛出空指针异常</p><h4 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h4><p>生成无参构造器</p><h4 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h4><p>生成包含final和@NonNull注解的成员变量的构造器</p><h4 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h4><p>生成全参构造器</p><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>作用于类上，@ToString @EqualsAndHashCode @Getter @Setter @RequiredArgsConstructor的集合</p><h4 id="log"><a href="#log" class="headerlink" title="@log"></a>@log</h4><p>生成日志变量</p><h4 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h4><p>将类转变为建造者模式，然后可以通过链式风格来创建对象</p><h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>修饰对象，自动关闭资源，如io流的Stream</p><h4 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h4><p>java中一些可能出现异常的地方，编译器会自动让你处理，trycatch或者trow，加上该注解即可骗过编译器，实际不会抛出异常</p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka配置</title>
    <link href="/2020/11/09/springBoot-Eureka/"/>
    <url>/2020/11/09/springBoot-Eureka/</url>
    
    <content type="html"><![CDATA[<p>场景：将开发的springboot项目配置到注册中心中</p><p>Eureka 注册中心组件分为两部分   Eureka Server 和 Eureka Client</p><p>Eureka Client负责将每个微服务注册到 Eureka Server中去</p><ul><li>结构分为两部分    配置中心服务端(Eureka server)，配置中心客户端(Eureka Client)<ul><li>配置中心服务端即为要配置到的配置中心</li><li>配置中心客户端即为开发的springboot项目</li></ul></li></ul><h4 id="配置中心服务端-Eureka-server"><a href="#配置中心服务端-Eureka-server" class="headerlink" title="配置中心服务端(Eureka server)"></a>配置中心服务端(Eureka server)</h4><ul><li>核心依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- eureka-server注解 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置中心自动刷新，注册中心是监听客户端心跳来判断客户端是否处于活动的，可用来配置监听频率 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1111</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-comment">#eureka服务自保功能关闭，确保注册中心不可用的实例及时清除</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 每隔多久（ms）触发一次服务剔除</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">1000</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#是否将自己注册到 eureka server中，默认为true，要改为false</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#是否从 eureka server 中获取注册信息，默认为true，要改为false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#设置注册中心地址</span><br>    <span class="hljs-attr">serviceUrl.defaultZone:</span> <span class="hljs-string">http://localhost:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><ul><li>启动类添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span><br></code></pre></td></tr></table></figure><h4 id="配置中心客户端-Eureka-Client"><a href="#配置中心客户端-Eureka-Client" class="headerlink" title="配置中心客户端(Eureka Client)"></a>配置中心客户端(Eureka Client)</h4><ul><li>核心依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 服务注册发现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置中心自动刷新，注册中心是监听客户端心跳来判断客户端是否处于活动的，可用来配置监听频率 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.xml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1112</span><br><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">application:</span><br>  <span class="hljs-comment">#设置在注册中心的服务名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-client</span><br><span class="hljs-comment">#eureka</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-comment">#将自己注册进注册中心</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1111/eureka/</span><br>    <span class="hljs-comment">#健康检查控制开关</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-comment">#续约更新时间间隔</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-comment">#续约到期时间</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li>启动类添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span><br></code></pre></td></tr></table></figure><h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><p>场景，可以将yml中配置的一些信息放在git或者本地仓库中，便于维护</p><p>举例存在gitee仓库中</p><ul><li>核心依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置中心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><p>此处推荐写在 bootstrap.yml 文件中，官方规定此处 bootstrap.yml的优先级大于 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>  <span class="hljs-comment">#设置在注册中心的服务名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-server</span><br>  <span class="hljs-comment">#连接GitHub</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://gitee.com/****/****.git</span>  <span class="hljs-comment">#gitee仓库地址</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>注：若为私人仓库需要配置用户和密码</p><ul><li>启动类添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigServer</span><br></code></pre></td></tr></table></figure><p>自我理解：</p><p>去git仓库或者本地仓库把配置信息取到本地，然后通过restful接口访问文件中的数据</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring Cloud</category>
      
      <category>Eureka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger配置</title>
    <link href="/2020/11/08/springBoot-swagger/"/>
    <url>/2020/11/08/springBoot-swagger/</url>
    
    <content type="html"><![CDATA[<h1 id="swagger整合"><a href="#swagger整合" class="headerlink" title="swagger整合"></a>swagger整合</h1><p>作用：swagger用来生成接口文档</p><p>整合步骤</p><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- swagger增强 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>设置swagger的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                <span class="hljs-comment">//扫描的controller包路径</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.simplemw&quot;</span>))<br>                .paths(PathSelectors.any())<br>                <span class="hljs-comment">//写最后</span><br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">//公共描述</span><br>    <span class="hljs-comment">//也可直接用在上面方法中，分开写的原因是，有时会扫描多个包路径，就可以直接用公共描述了</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;这是标题&quot;</span>)<span class="hljs-comment">//设置页面标题</span><br>                .description(<span class="hljs-string">&quot;这是描述......&quot;</span>)<span class="hljs-comment">//描述</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<span class="hljs-comment">//版本</span><br>                <span class="hljs-comment">//这是联系人信息</span><br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;simplemw&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080&quot;</span>, <span class="hljs-string">&quot;xxx@qq.com&quot;</span>))<br>                <span class="hljs-comment">//写最后</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>然后就是在controller类和pojo类中加上各种api注解</li></ul><p>controller中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value=&quot;这是controller类的描述&quot;,tags = &quot;这是controller类的描述&quot;)</span>   <span class="hljs-comment">//对类的描述，注：展示是按controller为总目录展示的</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;这是方法描述&quot;)</span><span class="hljs-comment">//对方法的描述</span><br><span class="hljs-meta">@ApiImplicitParam(name = &quot;map&quot;,value = &quot;这是对方法入参的描述&quot;)</span><br></code></pre></td></tr></table></figure><p>若为文件导出在 @ApiOperation注解中可以加上 produces &#x3D; “application&#x2F;octet-stream” 如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;这是方法描述&quot;,produces = &quot;application/octet-stream&quot;)</span><span class="hljs-comment">//对方法的描述</span><br></code></pre></td></tr></table></figure><p>pojo中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(value = &quot;这是pojo类的描述&quot;, description = &quot;这是pojo类的描述&quot;)</span>   <span class="hljs-comment">//对类的描述</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;模板名称&quot;)</span>    <span class="hljs-comment">//对属性的描述</span><br></code></pre></td></tr></table></figure><hr><p>配置完成后 访问路径  <a href="http://localhost:8080/swagger-ui.html#/">http://localhost:8080/swagger-ui.html#/</a></p><p>增强ui的访问页面  <a href="http://localhost:8080/doc.html#/">http://localhost:8080/doc.html#/</a></p><p>运行时，swagger会自动将api注解配置到网页上</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot整合</category>
      
      <category>Swagger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybaisplus相关</title>
    <link href="/2020/11/07/springBoot-mybatisplus/"/>
    <url>/2020/11/07/springBoot-mybatisplus/</url>
    
    <content type="html"><![CDATA[<p>此为mybatisplus的使用方式  mybatis <a href="http://simplemw.gitee.io/blog/2020/11/26/spring-mybatis.html">点击</a> 进入</p><h3 id="QueryWrapper构造器方式"><a href="#QueryWrapper构造器方式" class="headerlink" title="QueryWrapper构造器方式"></a>QueryWrapper构造器方式</h3><p>QueryWrapper构造器是来构建where条件的，所以只有删改查才会用到</p><h4 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h4><ul><li>mapper类继承 BaseMapper&lt;&gt;类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PojoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Pojo&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h4><ul><li>serviceimple类调用方法</li></ul><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建queryWrapper对象</span><br>QueryWrapper&lt;Pojo&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//传入有值类条件</span><br>queryWrapper.eq(<span class="hljs-string">&quot;表字段名&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br><span class="hljs-comment">//传入无值类条件 表字段名 is not null</span><br>queryWrapper.isNotNull(<span class="hljs-string">&quot;表字段名&quot;</span>)<br><span class="hljs-comment">//传入无值类条件 表字段名 is null</span><br>queryWrapper.isNull(<span class="hljs-string">&quot;表字段名&quot;</span>)<br><span class="hljs-comment">//查询</span><br>PojoMapper.selectList(queryWrapper);<br></code></pre></td></tr></table></figure><p>如果是in的查询条件的话，就将eq改为in</p><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建queryWrapper对象</span><br>QueryWrapper&lt;Pojo&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//传入有值类条件</span><br>queryWrapper.eq(<span class="hljs-string">&quot;表字段名&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br><span class="hljs-comment">//传入无值类条件 表字段名 is not null</span><br>queryWrapper.isNotNull(<span class="hljs-string">&quot;表字段名&quot;</span>)<br><span class="hljs-comment">//传入无值类条件 表字段名 is null</span><br>queryWrapper.isNull(<span class="hljs-string">&quot;表字段名&quot;</span>)<br><span class="hljs-comment">//查询</span><br>PojoMapper.update(pojo对象,queryWrapper);<br></code></pre></td></tr></table></figure><p>queryWrapper中的值为where后的条件，实际的修改是将pojo中的数据替换满足条件的数据</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建queryWrapper对象</span><br>QueryWrapper&lt;Pojo&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//传入有值类条件</span><br>queryWrapper.eq(<span class="hljs-string">&quot;表字段名&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br><span class="hljs-comment">//传入无值类条件 表字段名 is not null</span><br>queryWrapper.isNotNull(<span class="hljs-string">&quot;表字段名&quot;</span>)<br><span class="hljs-comment">//传入无值类条件 表字段名 is null</span><br>queryWrapper.isNull(<span class="hljs-string">&quot;表字段名&quot;</span>)<br><span class="hljs-comment">//查询</span><br>PojoMapper.delete(queryWrapper);<br></code></pre></td></tr></table></figure><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PojoMapper.insert(pojo对象);<br></code></pre></td></tr></table></figure><p>注：增加不需要创建queryWrapper来构建条件</p><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>mybatisplus 使用pagehelper分页</p><ul><li>mybatisplus自带了pagehelper不用注入依赖</li><li>添加配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlus</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">PaginationInterceptor</span> <span class="hljs-variable">paginationInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>        <span class="hljs-keyword">return</span> paginationInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>application或者bootstrap配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-comment">#默认为false,合理化查询，页码&lt;=0的时候查询第一页，超过最大页查询最后一页</span><br>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认为false,设置为true当设置pageSize为0的时候查全部</span><br>  <span class="hljs-attr">pageSizeZero:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#pageSize=0</span><br>  <span class="hljs-comment">#默认为false,判断Dao要执行的方法参数列表是否有pageNum和pageSize参数，有会自动进行分页</span><br>  <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认为false,多数据源时自动识别分页方言</span><br>  <span class="hljs-attr">autoRuntimeDialect:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>mapper配置(plus中需要mapper去继承BaseMapper)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PrintTemplateMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;PrintTemplate&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service中写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;PrintTemplate&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//填入分页信息</span><br>Page&lt;PrintTemplate&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageIndex, pageSize);<br><span class="hljs-comment">//填入条件</span><br>queryWrapper.eq(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//分页查询</span><br>printTemplateMapper.selectPage(page, queryWrapper);<br></code></pre></td></tr></table></figure><h3 id="xml配置SQL方式"><a href="#xml配置SQL方式" class="headerlink" title="xml配置SQL方式"></a>xml配置SQL方式</h3><p>此种方式很灵活，要做什么crud直接写sql进去就行，多表连表查询一般用此种方式</p><h4 id="步骤1-1"><a href="#步骤1-1" class="headerlink" title="步骤1"></a>步骤1</h4><ul><li>写mapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PojoMapper</span>&#123;<br>    List&lt;Pojo&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">(String linename)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤2-1"><a href="#步骤2-1" class="headerlink" title="步骤2"></a>步骤2</h4><ul><li>实现mapper.xml接口，我放的路径为 resources&#x2F;Mybatis&#x2F;PojoMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这里绑定mapper接口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.simplemw.mapper.PojoMapper&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 中间实现接口中的方法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.simplemw.mapper.pojo.Pojo&quot;</span>&gt;</span><br>    select * from tablename where linename=#&#123;linename&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>添加application.yml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span> <br>    <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:Mybatis/**/*Mapper.xml</span><br></code></pre></td></tr></table></figure><h3 id="自动填入值"><a href="#自动填入值" class="headerlink" title="自动填入值"></a>自动填入值</h3><p>场景：</p><ul><li>数据新增时，需要自动产生ID、需要自动导入产生时间</li><li>数据修改时，需要自动导入编辑时间</li></ul><p>使用mybatisplus的TableField类</p><h4 id="填入UUID"><a href="#填入UUID" class="headerlink" title="填入UUID"></a>填入UUID</h4><p>pojo属性字段添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br></code></pre></td></tr></table></figure><h4 id="填入其它值"><a href="#填入其它值" class="headerlink" title="填入其它值"></a>填入其它值</h4><p>这里以自动导入时间为例，解决办法使用 MetaObjectHandler</p><ul><li>实现 MetaObjectHandler 接口，并实现 insertFill、updateFill方法(其两种方法主要是定义 在插入操作或者更新操作的时候哪些值可以自动导入，以及导入什么值)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;createdDt&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),metaObject);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;deletedDt&quot;</span>,<span class="hljs-literal">null</span>,metaObject);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;lastEditedDt&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),metaObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;lastEditedDt&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：需要@Component 扫描</p><ul><li><p>pojo属性字段添加注解</p><p>DEFAULT 默认不处理</p><p>INSERT 插入填充字段</p><p>UPDATE 更新填充字段</p><p>INSERT_UPDATE 插入和更新填充字段</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br></code></pre></td></tr></table></figure><p>注解功能解释：即当为插入数据库时，自动填充值进下面的属性</p><h3 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h3>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
      <category>Mybatisplus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Mybatis</tag>
      
      <tag>Mybatisplus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt理解</title>
    <link href="/2020/10/28/java%E5%9F%BA%E7%A1%80-jwt/"/>
    <url>/2020/10/28/java%E5%9F%BA%E7%A1%80-jwt/</url>
    
    <content type="html"><![CDATA[<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>java web token简称jwt</p><ul><li><p>组成</p><ul><li><p>头部(header)</p><p>头部存 类型和加密算法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> <br>“typ”<span class="hljs-punctuation">:</span> “JWT”<span class="hljs-punctuation">,</span> <br>“alg”<span class="hljs-punctuation">:</span> “HS256” <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>有效载荷(playload)</p><p>实际需要保存的参数，如token签发者、签发时间、到期时间，以及如用户名之类的后续需要用到的参数。 注：如密码等涉及到安全的信息不宜放进去</p></li><li><p>签名(signature)</p><p>头部和有效载荷加上密钥通过头部里面的加密算法进行加密后得到</p></li></ul></li><li><p>头部与有效载荷均通过base64进行加密</p></li></ul><h4 id="应用环境"><a href="#应用环境" class="headerlink" title="应用环境"></a>应用环境</h4><p>二次登录，即第一次登录后，关闭页面，一段时间内重新访问不需要重新登录</p><ul><li><p>原实现方式：由服务器存储登录信息，当第二次请求过来时判断以前是否登录过，若是则直接访问</p><ul><li>客户端请求</li><li>服务器产生登录信息</li><li>登录信息传给客户端，客户端存储在cookie中</li><li>客户端第二次访问时带cookie请求</li><li>服务器端进行校验</li></ul><p>注：弊端，由于登录信息存在session中，即存在内存中会占用服务器资源</p></li><li><p>现解决办法：第一次登录请求，服务器产生token，存储客户端，第二次访问校验token</p><ul><li>客户端请求</li><li>服务端产生token</li><li>客户端存储token</li><li>客户端第二次访问时带token</li><li>服务器进行校验</li></ul></li></ul><h4 id="解决疑问"><a href="#解决疑问" class="headerlink" title="解决疑问"></a>解决疑问</h4><ul><li><p>token的头部和有效载荷通过base64加密安全吗？</p><p>答：正因为如此，不能在有效载荷中放入涉及安全的信息如密码</p></li><li><p>有效载荷被篡改了怎么办？</p><p>答：由服务器产生，由服务器校验，即使token在第二次请求的时候被拦截，然后对里面的有效载荷进行篡改，在进行校验的时候，会比对签名串信息，若将头部和有效载荷以及密钥进行加密后与签名串不能匹配则表示被篡改</p></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.18.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SecretKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5oiR5piv5aSn5biF5ZOl&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> creatToken();<br>    analysisToken(token);<br>&#125;<br><br><span class="hljs-comment">//生成jwt</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">creatToken</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;alg&quot;</span>, <span class="hljs-string">&quot;HS256&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;typ&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>);<br><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowLocalDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-comment">//获取当前时间</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">nowDate</span> <span class="hljs-operator">=</span> Date.from(nowLocalDateTime.atZone(ZoneId.systemDefault()).toInstant());<br>    <span class="hljs-comment">//获取到期时间</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireLocalDateTime</span> <span class="hljs-operator">=</span> nowLocalDateTime.plusMinutes(<span class="hljs-number">30</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">expireDate</span> <span class="hljs-operator">=</span> Date.from(expireLocalDateTime.atZone(ZoneId.systemDefault()).toInstant());<br><br>    <span class="hljs-comment">//根据用户名和密码生成token</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWT.create()<br>        .withHeader(map)  <span class="hljs-comment">//传入头数据</span><br>        .withSubject(<span class="hljs-string">&quot;test&quot;</span>)<br>        <span class="hljs-comment">//传入自定义的键值对</span><br>        .withClaim(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;wp&quot;</span>)<br>        .withClaim(<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;13245678912&quot;</span>)<br>        .withIssuedAt(nowDate)              <span class="hljs-comment">//签名时间</span><br>        .withExpiresAt(expireDate)          <span class="hljs-comment">//过期时间</span><br>        <span class="hljs-comment">//设置签名</span><br>        .sign(Algorithm.HMAC256(SecretKey));   <span class="hljs-comment">//签名</span><br><br>    System.out.println(token);<br>    <span class="hljs-keyword">return</span> token;<br>&#125;<br><br><span class="hljs-comment">//解析jwt</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">analysisToken</span><span class="hljs-params">(String token)</span>&#123;<br>    <span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">verifier</span> <span class="hljs-operator">=</span> JWT.require(Algorithm.HMAC256(SecretKey)).build();<br>    <span class="hljs-comment">//判断签名是否有效</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> verifier.verify(token);<br>    &#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e) &#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;签名校验失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">decodedJWT</span> <span class="hljs-operator">=</span> JWT.decode(token);<br>    <span class="hljs-comment">//解析token</span><br>    Map&lt;String, Claim&gt; map = decodedJWT.getClaims();<br>    Iterator&lt;Map.Entry&lt;String,Claim&gt;&gt; it=map.entrySet().iterator();<br>    <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>        Map.Entry&lt;String,Claim&gt; entry=it.next();<br>        System.out.println(<span class="hljs-string">&quot;key:&quot;</span>+entry.getKey()+<span class="hljs-string">&quot; &quot;</span><br>                           +<span class="hljs-string">&quot;Value:&quot;</span>+entry.getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOC和AOP</title>
    <link href="/2020/10/17/spring-IOC%E5%92%8CAOP/"/>
    <url>/2020/10/17/spring-IOC%E5%92%8CAOP/</url>
    
    <content type="html"><![CDATA[<h1 id="控制反转-IOC"><a href="#控制反转-IOC" class="headerlink" title="控制反转(IOC)"></a>控制反转(IOC)</h1><p>分为控制和反转</p><p>控制：对象的创建交给了spring容器，在spring创建对象的过程中会根据 bean来创建对象，也可以说一个bean就是一个对象</p><p>反转：主动权由程序员交给了用户，用户可以选择调用；传统的是 在程序中使用new来创建对象然后使用对象调用方法， 现为 spring容器创建对象然后传入对象，不需要更改原程序，原程序只使用传入的对象(此种方式在springboot中非常常见，如重写拦截器)</p><p>也叫依赖注入，即将  需要生成对象的类 注入，由spring容器自动创建，创建实例的方式，是通过反射的方式获取类，然后实例化后注入</p><h2 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h2><ul><li>实际service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是原本要做的事&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置相应的xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注入bean中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.simplemw.service.UserServiceImp&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取配置文件的bean</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//从connext中获取userService对象</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;service&quot;</span>);<br>        userService.origdothings();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注解配置方式"><a href="#注解配置方式" class="headerlink" title="注解配置方式"></a>注解配置方式</h2><ul><li>实际service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//注入到bean中</span><br><span class="hljs-meta">@Component(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是原本要做的事&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置相应的xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启bean注解扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.simplemw.service&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取配置文件的bean</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//从connext中获取userService对象</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;service&quot;</span>);<br>        userService.origdothings();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面向切面编程-AOP"><a href="#面向切面编程-AOP" class="headerlink" title="面向切面编程(AOP)"></a>面向切面编程(AOP)</h1><p>解释：在不改变原有代码轨迹的基础上给其添加一些额外的功能   如日志打印等</p><h2 id="xml配置方式-1"><a href="#xml配置方式-1" class="headerlink" title="xml配置方式"></a>xml配置方式</h2><ul><li>实际service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是原本要做的事&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>要添加的方法类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddThings</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 术语，通知，即需要加入的功能</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;之前做的事&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;之后做的事&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前做的事&quot;</span>);<br>        pjp.proceed();<span class="hljs-comment">//用来表示原来要做的事，即切面的事</span><br>        System.out.println(<span class="hljs-string">&quot;环绕后做的事&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after_return</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法完成后的通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after_throwing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法抛出后的通知&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置相应的xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注入bean中--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 要切的类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.simplemw.service.UserServiceImp&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加的方法的类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.simplemw.add.AddThings&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置切面以及切入的方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置切入点，此处配置的为UserServiceImp类下所有的方法 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- execution()方法解释 前面*为返回参数类型，后面为方法表示其中前面为带包路径的类路径，后面的*为所有方法名..表示所有类型参数列表，也可以特别指代某一个方法 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.simplemw.service.UserServiceImp.*(..))&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 之前 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 之后 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 环绕前后 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 方法完成后 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after_return&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 抛出后 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after_throwing&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取配置文件的bean</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//从connext中获取userService对象</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;service&quot;</span>);<br>        userService.origdothings();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">之前做的事<br>环绕前做的事<br>这是原本要做的事<br>方法完成后的通知<br>环绕后做的事<br>之后做的事<br><br></code></pre></td></tr></table></figure><p><font color=red>注：此种方式，添加的功能顺序与配置顺序有关，即先配置环绕和后配置环绕，输出结果不同</font></p><h2 id="注解配置方式-1"><a href="#注解配置方式-1" class="headerlink" title="注解配置方式"></a>注解配置方式</h2><ul><li>实际service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//注入到bean中,命名为userservice</span><br><span class="hljs-meta">@Component(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">origdothings</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是原本要做的事&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>切面配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//该类也要注入bean中</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//表示这是一个切面配置类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationPoint</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *连接点：每个方法的前后</span><br><span class="hljs-comment">     *切点，通知和连接点关联的地方为切点</span><br><span class="hljs-comment">     *切面，通知和连接点关联 为切面</span><br><span class="hljs-comment">     * (解释不重要，理解到就行)</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">//配置切点</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.simplemw.service.UserServiceImp.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">point</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//将通知与切点关联</span><br>    <span class="hljs-meta">@Before(&quot;point()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;之前做的事&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;point()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;之后做的事&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Around(&quot;point()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前做的事&quot;</span>);<br>        <span class="hljs-comment">//用来表示原来要做的事，即切面的事</span><br>        pjp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后做的事&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterReturning(&quot;point()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after_return</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法完成后的通知&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterThrowing(&quot;point()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after_throwing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法抛出后的通知&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>XML配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启bean注解扫面 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 需要把切点配置类也扫描，注入到bean中 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.simplemw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启aop注解配置，@Aspect注解的类将会被扫描到 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userservice&quot;</span>);<br>        userService.origdothings();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">环绕前做的事<br>之前做的事<br>这是原本要做的事<br>方法完成后的通知<br>之后做的事<br>环绕后做的事<br><br></code></pre></td></tr></table></figure><p><font color=red>注：此种方式与xml配置方式不同，插入功能顺序与配置顺序无关</font></p><p>xml配置方式和注解配置方式可以混用</p><hr><h2 id="自定义注解方式"><a href="#自定义注解方式" class="headerlink" title="自定义注解方式"></a>自定义注解方式</h2><ul><li>自定义注解类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyLabel &#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyLabelTwo &#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>切面配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AopConfig</span> &#123;<br><br>    <span class="hljs-meta">@Before(value = &quot;@annotation(myLabel1)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(MyLabel myLabel1)</span>&#123;<br>        TestService.str = myLabel1.value();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置切面</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(value = &quot;@annotation(myLabel2)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPointCut</span><span class="hljs-params">(MyLabelTwo myLabel2)</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Before(value = &quot;myPointCut(myLabel2)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeTwo</span><span class="hljs-params">(MyLabelTwo myLabel2)</span>&#123;<br>        TestService.str = myLabel2.value();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;原始的字符串&quot;</span>;<br><br><span class="hljs-meta">@MyLabel(&quot;第一次传入字符串&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><br><span class="hljs-meta">@MyLabelTwo(&quot;第二次传入字符串&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function1</span><span class="hljs-params">(String str)</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>controler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TestService testService;<br><br><br><span class="hljs-meta">@GetMapping(&quot;/ces&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span>&#123;<br>    testService.function();<br>    System.out.println(TestService.str);<br>    testService.function1(<span class="hljs-string">&quot;这是第二次&quot;</span>);<br>    System.out.println(TestService.str);<br>    <span class="hljs-keyword">return</span> TestService.str;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringBoot基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql8 免安装配置</title>
    <link href="/2020/10/14/mysql-mysql8%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/10/14/mysql-mysql8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ul><li><p>解压压缩包</p></li><li><p>配置环境变量 path中加入mysql的bin路径</p></li><li><p>myql8解压根路径下新建 my.ini文件,写入以下(my.ini为配置文件)，其中mysql的安装路径以及数据库的数据存放路径要修改相应的位置，若以前解压目录下存在data文件夹，可以删除</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br> <br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># 绑定IPv4</span><br><span class="hljs-attr">bind-address</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录，即解压目录</span><br><span class="hljs-attr">basedir</span>=D:\\uwork\\mysql\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">19</span>-winx64<br><span class="hljs-comment"># 设置数据库的数据存放目录</span><br><span class="hljs-attr">datadir</span>=D:\\uwork\\mysql\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">19</span>-winx64\\data<br><span class="hljs-comment"># 设置允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 设置允许连接失败次数</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 设置服务端的默认字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建表使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 使用“mysql_native_password”插件认证</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-comment"># 设置只读属性</span><br><span class="hljs-attr">read-only</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>初始化mysql      <strong>mysqld –initialize –console</strong>    等待初始化完成，此时会自动创建root用户</p><p>日志中显示为   root@localhost：一串随机密码      可以记下随机密码等会登录</p><p>该操作完成后，根目录下会存在data文件夹</p></li><li><p>安装mysql服务 <strong>mysqld –install mysql –defaults-file&#x3D;”D:\uwork\mysql\mysql-8.0.19-winx64\my.ini”</strong></p><p>注：报错 Install&#x2F;Remove of the Service Denied! 原因为cmd未以管理员运行</p><p>该操作是创建mysql服务在windows的服务中</p></li><li><p>启动服务 </p><ul><li>第一种 在windows的服务中 找到 mysql 点启动</li><li>第二种 cmd中输入 <strong>net start mysql</strong>      <strong>(</strong>  <strong>net stop mysql 是关闭服务</strong> <strong>)</strong></li></ul></li><li><p>登录mysql</p><p><strong>mysql -u  root -p</strong></p><p>提示输入 password   则输入刚才记下的 密码，成功则进行下面修改密码，失败则操作下下步</p></li></ul><hr><p><font color=red size=4>登录正常改密</font></p><ul><li><p>修改user密码</p><p> <strong>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</strong></p><p>刷新权限</p><p><strong>flush privileges;</strong></p></li><li><p>退出重新使用新密码登录，大功告成</p></li></ul><hr><p><font color=red size=4>密码输入错误解决</font></p><p>输入记下的随机密码报错，则一般是密码错误(或者其它玩意)</p><ul><li><p>解决办法，免密登录后然后删除密码</p></li><li><p>关闭mysql服务   <strong>net stop mysql</strong></p></li><li><p>在bin目录cmd下 输入 <strong>mysqld –console –skip-grant-tables –shared-memory</strong> ，输入成功后不管它</p></li><li><p>新建cmd窗口  输入<strong>mysql</strong>  登录数据库   ,然后输入  <strong>use mysql</strong>   连接数据库</p></li><li><p>(这里开始就是操作数据库了,后面都加分号)输入 <strong>show tables;</strong>  显示所有的表    </p><ul><li>（查询语句，查询user表，authentication_string 就是密码列名）</li></ul><p>select user,host, authentication_string from user;       </p><ul><li>（修改密码为空）</li></ul><p>update mysql.user set authentication_string &#x3D; ‘’ where user &#x3D; ‘root’ and host &#x3D; ‘localhost’;</p></li></ul><p>修改成功后有 query ok字样</p><ul><li><strong>exit</strong>  退出数据库连接，关闭第一个cmd窗口</li><li>cmd窗口中 重启服务   <strong>net start mysql</strong>    然后   <strong>mysql -u  root -p</strong>  ，输入密码时直接回车就登录进去了</li><li>最后按上面步骤修改密码</li></ul><hr><p><font color='red'>创建用户</font></p><ul><li>创建用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">create user canal identified by &#x27;canal&#x27;;<br>update mysql.user set authentication_string = &#x27;&#x27; where user = &#x27;canal&#x27; and host = &#x27;localhost&#x27;;<br>ALTER USER &#x27;canal&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li>授权</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant select,replication slave,replication client on*.* to &#x27;canal&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all privileges on *.* to &#x27;canal&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><ul><li>刷新权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">flush privileges<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Mysql相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql数据库连接</title>
    <link href="/2020/10/14/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/10/14/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<ul><li>数据库连接代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    Connection con;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//根据导入的包中的Driver路径来写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/cloud_data?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&quot;</span>;<br>    String username=<span class="hljs-string">&quot;root&quot;</span>;<br>    String password=<span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from dept&quot;</span>;<br>    String deptname;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//这里会出现异常找不到类 ClassNotFoundException，也即找不到驱动</span><br>        Class.forName(driver);<br>        <span class="hljs-comment">//获取连接以及获取statement以及后面的执行sql语句都会出现 SQLException 异常</span><br>        con = DriverManager.getConnection(url,username,password);<br>        <span class="hljs-comment">//创建执行对象</span><br>        stm = con.createStatement();<br>        <span class="hljs-comment">//查询的结果是放在结果集中的</span><br>        rs = stm.executeQuery(sql);<br>        <span class="hljs-comment">//此处进行判断是否存在数据</span><br>        <span class="hljs-keyword">while</span>(rs.next())&#123;<br>            deptname = rs.getString(<span class="hljs-string">&quot;deptname&quot;</span>);<br>            System.out.println(deptname);<br>        &#125;<br>        <span class="hljs-comment">//关闭结果集</span><br>        rs.close();<br>        <span class="hljs-comment">//关闭执行对象</span><br>        stm.close();<br>        <span class="hljs-comment">//关闭连接</span><br>        con.close();<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>execute() 返回结果为boolean   executeUpdate() 返回结果是int  executeQuery()返回结果是结果集</p><ul><li>executeQuery() 常用于查询</li><li>executeUpdate() 常用于增删改</li><li>execute() 用在有多个结果集等情况下</li></ul></li><li><p>url解释</p><ul><li>useUnicode&#x3D;true 使用编码为unicode</li><li>characterEncoding&#x3D;UTF-8 使用字符编码集为 utf-8</li><li>zeroDateTimeBehavior&#x3D;convertToNull   日期异常处理方式<ul><li>l exception：默认值，即抛出SQL state [S1009]. Cannot convert value….的异常；</li><li>l convertToNull：将日期转换成NULL值；</li><li>l round：替换成最近的日期即0001-01-01；</li></ul></li><li>useSSL&#x3D;true  解决mysql和jdbc版本不兼容问题</li></ul></li><li><p>还存在预编译的执行方式</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    Connection con;<br>    PreparedStatement pstm;<br>    <span class="hljs-type">int</span> result;<br>    <span class="hljs-comment">//根据导入的包中的Driver路径来写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/cloud_data?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&quot;</span>;<br>    String username=<span class="hljs-string">&quot;root&quot;</span>;<br>    String password=<span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//这里会出现异常找不到类 ClassNotFoundException，也即找不到驱动</span><br>        Class.forName(driver);<br>        <span class="hljs-comment">//获取连接以及获取statement以及后面的执行sql语句都会出现 SQLException 异常</span><br>        con = DriverManager.getConnection(url,username,password);<br>        <span class="hljs-comment">//创建执行对象</span><br>        pstm = con.prepareStatement(<span class="hljs-string">&quot;update dept set deptname = ? where deptno = ?&quot;</span>);<br>        <span class="hljs-comment">//将数据放入pstm对象中</span><br>        pstm.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;物流部门&quot;</span>);<br>        pstm.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//执行sql语句获取结果</span><br>        result = pstm.executeUpdate();<br>        System.out.println(<span class="hljs-string">&quot;更新了 &quot;</span>+result+<span class="hljs-string">&quot; 条数据&quot;</span>);<br>        <span class="hljs-comment">//关闭执行对象</span><br>        pstm.close();<br>        <span class="hljs-comment">//关闭连接</span><br>        con.close();<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：此种方式更加灵活，不管执行多少个此类sql，都只会解析和编译一次，而使用statement则是对每个执行的sql都解析和编译，PreparedStatement 也比 statement 方式更加安全</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Mysql相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列理解</title>
    <link href="/2020/10/04/%E6%8A%80%E6%9C%AF%E4%BA%86%E8%A7%A3-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2020/10/04/%E6%8A%80%E6%9C%AF%E4%BA%86%E8%A7%A3-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>消息队列两种模型</p><ul><li><p>P2P点对点方式</p><p>消息先进先出，未被消费的消息存在消息通道内</p></li><li><p>发布订阅模式</p><p>发布者发布一条消息，订阅者实时接收消息</p></li></ul><p>两者区别</p><p>第一种不用担心接收方关机宕机等问题，可以续传</p><p>第二种为实时接收，接收方只有发布者在消息广播期间才能收到消息，一旦发布者不再广播，接收者是不会收到的</p>]]></content>
    
    
    <categories>
      
      <category>技术了解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web相关复习</title>
    <link href="/2020/10/04/java%E5%9F%BA%E7%A1%80-web%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2020/10/04/java%E5%9F%BA%E7%A1%80-web%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>javaweb 三大组件 Servlet，Filter，Listener</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="生命周期四个阶段："><a href="#生命周期四个阶段：" class="headerlink" title="生命周期四个阶段："></a>生命周期四个阶段：</h3><ul><li><p>实例化：调用构造方法</p></li><li><p>初始化：调用init()方法</p></li><li><p>处理请求：调用service()方法</p></li><li><p>销毁：调用destroy()方法</p></li></ul><h3 id="使用Servlet方式"><a href="#使用Servlet方式" class="headerlink" title="使用Servlet方式"></a>使用Servlet方式</h3><p>实现方式：继承httpServlet类，重写doPost()、doGet()方法；</p><p>实现原理：HttpServlet的service(HttpServletRequest,HttpServletResponse)方法会去判断当前请求是GET还是POST，如果是GET请求，那么会去调用本类的doGet()方法，如果是POST请求会去调用doPost()方法</p><h3 id="Jsp和Servlet"><a href="#Jsp和Servlet" class="headerlink" title="Jsp和Servlet"></a>Jsp和Servlet</h3><ul><li>Jsp就是后缀为jsp的文件，即是HTML中写java代码</li><li>Servlet 在javaweb开发中主要的功能为 处理请求和发送响应</li><li>两者的区别是  <ul><li>Jsp是在HTML中写java代码 ，servlet是java代码中写HTML</li><li>Jsp是先部署后编译，servlet是先编译后部署</li></ul></li></ul><h2 id="Fileter-过滤器"><a href="#Fileter-过滤器" class="headerlink" title="Fileter 过滤器"></a>Fileter 过滤器</h2><h3 id="使用Filter方式"><a href="#使用Filter方式" class="headerlink" title="使用Filter方式"></a>使用Filter方式</h3><p>实现方法：实现Filter接口，重新doFiler()方法</p><p>实现原理：对配置的拦截的url的request和response进行修改</p><h3 id="过滤器和拦截器的区别"><a href="#过滤器和拦截器的区别" class="headerlink" title="过滤器和拦截器的区别"></a>过滤器和拦截器的区别</h3><ul><li>拦截器是基于java的反射机制的，而过滤器是基于函数回调。</li><li>拦截器是spring的一个组件不依赖与servlet容器，过滤器依赖与servlet容器。</li><li>拦截器能应用于所有的方法前后以及异常抛出前后，而过滤器只在servlet前后其作用</li></ul><h2 id="Listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener 监听器"></a>Listener 监听器</h2><p>监听器是对某个对象的监听，一般是监听其创建、销毁以及改变</p><ul><li><strong>ServletContext对象监听器</strong></li><li><strong>HttpSession对象监听器</strong></li><li><strong>ServletRequest对象监听器</strong></li></ul><p>使用Listener方式</p><p>实现方法：例 实现HttpSessionListener 接口，重写sessionCreated()方法或者sessionDestroyed()方法监听创建和销毁</p><h2 id="四大作用域"><a href="#四大作用域" class="headerlink" title="四大作用域"></a>四大作用域</h2><ul><li><p>page域 </p><p>Jsp页面使用</p></li><li><p>request域</p><p>一个请求到转发的周期</p></li><li><p>session域</p><p>从打开浏览器到关闭浏览器，可以有多个请求</p></li><li><p>application域</p><p>应用启动到应用结束，所有用户共享application中的变量</p></li></ul><h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><table><thead><tr><th>对象</th><th>解释</th><th>作用域</th><th>类型</th><th>在Servlet中如何获得</th></tr></thead><tbody><tr><td>application</td><td>应用程序对象</td><td>Application</td><td>javax.servlet.ServletContext</td><td>this.getServletContext()</td></tr><tr><td>session</td><td>会话对象</td><td>Session</td><td>javax.servlet.http.HttpSession</td><td>requset.getSession()</td></tr><tr><td>request</td><td>请求对象</td><td>Request</td><td>javax.servlet.ServletRequest</td><td>service方法中的request参数</td></tr><tr><td>response</td><td>响应对象</td><td>Page</td><td>javax.servlet.SrvletResponse</td><td>service方法中的response参数</td></tr><tr><td>pageContext</td><td>页面上下文对象</td><td>Page</td><td>javax.servlet.jsp.PageContext</td><td>不能在servlet中使用，可以获得其他对象</td></tr><tr><td>out</td><td>输出对象</td><td>Page</td><td>javax.servlet.jsp.JspWriter</td><td>response.getWriter&lt;注意这里类型是printWriter&gt;</td></tr><tr><td>config</td><td>配置对象</td><td>Page</td><td>javax.servlet.ServletConfig</td><td>this.getServletConfig()</td></tr><tr><td>page</td><td>页面对象</td><td>Page</td><td>javax.lang.Object</td><td>this</td></tr><tr><td>exception</td><td>异常对象</td><td>Page</td><td>javax.lang.Throwable</td><td>new Throwable();</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射</title>
    <link href="/2020/10/04/java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/10/04/java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>解释：反射是对编译成的class文件进行解析，拿到其属性和方法</p><ul><li>首先都是获取类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//第一种，通过类名</span><br>Class 新名 = 类名.class;<br><span class="hljs-comment">//第二种，通过全类名</span><br>Class 新名 = Class.forName(<span class="hljs-string">&quot;包名.类名&quot;</span>);<br><span class="hljs-comment">//第三种，通过对象获得</span><br>根据类<span class="hljs-keyword">new</span>一个对象;<br>Class 新名 = 对象.getClass();<br></code></pre></td></tr></table></figure><ul><li>拿到属性<ul><li>通过field得到属性的类型和名字 得到方法 用method</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//得到某个类的所有属性</span><br>Field[] fields = 新名.getDeclaredFields();<br><span class="hljs-comment">//得到某个类的带public的所有属性，包括其父类、父类的父类</span><br><span class="hljs-comment">//Field[] fields = 新名.getFields();</span><br><span class="hljs-comment">//遍历所有属性并打印名字</span><br><span class="hljs-keyword">for</span>(Fiedl field : fields)&#123;<br>    System.out.println(field.getName();<br>&#125;<br><span class="hljs-comment">//通过属性名字得到属性</span><br>Field 新属性名 = 新名.getDeclaredFields(<span class="hljs-string">&quot;属性名&quot;</span>);<br><span class="hljs-comment">//得到属性的基本数据类型</span><br>新属性名.getType();                    <br></code></pre></td></tr></table></figure><ul><li>拿到方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//得到某个类的所有方法</span><br>Method[] methods = 新名.getDeclaredMethods();<br><span class="hljs-comment">//与field一样也有getMethods()</span><br>Method[] methods = 新名.getMethods();<br><span class="hljs-comment">//遍历所有的方法</span><br><span class="hljs-keyword">for</span>(Method method : Methods)&#123;<br>    <span class="hljs-comment">//得到方法名和返回值类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> method.getName() + <span class="hljs-string">&quot;:&quot;</span> + method.getReturnType().getTypeName(); <br>    <span class="hljs-comment">//参数列表的遍历(参数列表内不止一个)</span><br>    Class&lt;?&gt;[] str2 = method.getParameterTypes();<br>    <span class="hljs-keyword">for</span>(Class&lt;?&gt; class1 : str2)&#123;<br>        system.out.println(class1.getName());<br>    &#125;<br>    <span class="hljs-comment">//通过方法名得到方法</span><br>    <span class="hljs-comment">//参数列表是基本参数类型的，在反射中得到方法时填入包装类</span><br>    Method[] methods = 新名.getDeclaredMethods(<span class="hljs-string">&quot;方法名&quot;</span>,参数列表每一个参数的类型的类);<br>    <span class="hljs-comment">//根据原类创建对象newInstance()，类为People举例，再执行方法invoke()</span><br>    <span class="hljs-type">People</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (People) people.newInstance();<br>    <span class="hljs-comment">//第一个为对象</span><br>    方法名.invoke(p,赋的值);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>反射去泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//创建两个泛型</span><br>ArrayList&lt;String&gt; str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>ArrayList&lt;Integer&gt; inte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//得到泛型的值</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> str.getClass();<br><span class="hljs-type">Class</span> <span class="hljs-variable">inte1</span> <span class="hljs-operator">=</span> inte.getClass();<br><span class="hljs-comment">//比较是否是同一个值</span><br>system.out.println(str1==inte1);<br></code></pre></td></tr></table></figure><p>输出结果为true，验证正确，反射确实是去泛型</p><hr><h6 id="反射的实际应用"><a href="#反射的实际应用" class="headerlink" title="反射的实际应用"></a>反射的实际应用</h6><ul><li>自定义注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RealName &#123;<br><br>    <span class="hljs-comment">//属性字段名称 默认空字符串</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实体类中属性添加注解 例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RealName(name = &quot;我&quot;)</span><br><span class="hljs-keyword">private</span> String me;<br><span class="hljs-meta">@RealName(name = &quot;我的实际名字&quot;)</span><br><span class="hljs-keyword">private</span> String myRealName;<br></code></pre></td></tr></table></figure><ul><li>反射获取数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建map用来接收属性以及其注解的值</span><br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//获取类名的包名地址</span><br>    Class&lt;?&gt; printClass = Class.forName(<span class="hljs-string">&quot;com.simplemw.user&quot;</span>);<br>    <span class="hljs-comment">//java反射机制获取所有属性</span><br>    Field[] fields = printClass.getDeclaredFields();<br>    <span class="hljs-comment">//遍历属性</span><br>    <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">isNotNullStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 判断是否属性上存在注解  RealName</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">annotationPresent</span> <span class="hljs-operator">=</span> field.isAnnotationPresent(RealName.class);<br>        <span class="hljs-keyword">if</span> (annotationPresent) &#123;<br>            <span class="hljs-comment">// 获取自定义注解对象</span><br>            <span class="hljs-type">RealName</span> <span class="hljs-variable">realName</span> <span class="hljs-operator">=</span> field.getAnnotation(RealName.class);<br>            <span class="hljs-comment">// 根据对象获取注解值</span><br>            isNotNullStr = realName.name();<br>        &#125;<br>        map.put(field.getName(),isNotNullStr);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">//打印测试结果</span><br><span class="hljs-keyword">for</span> (String str:map.keySet()) &#123;<br>    System.out.println(str+<span class="hljs-string">&quot;---&quot;</span>+map.get(str));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式理解</title>
    <link href="/2020/10/04/java%E5%9F%BA%E7%A1%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/10/04/java%E5%9F%BA%E7%A1%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h1><p>解释：在开发中，当一个类完全不需要有多个实例时，可以使用单例模式来保证一个类只有一个对象。 实际操作为    <font color=red>私有化构造函数</font></p><p>如 票务系统，要保证票数始终同步，卖票的对象可以使用单例模式</p><ul><li>饿汉模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo1</span> &#123;<br><br>    <span class="hljs-comment">//饿汉单例模式，在声明变量的时候就直接实例化对象了</span><br>    <span class="hljs-comment">//私有化构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//创建实例，并私有化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonDemo1</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo1</span>();<br><br>    <span class="hljs-comment">//将实例返回</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo1 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>懒汉模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo2</span> &#123;<br>    <span class="hljs-comment">//懒汉单例模式，先声明对象，外部调用且未产生实例对象的时候才创建实例，相比于饿汉模式，不会产生垃圾对象</span><br>    <span class="hljs-comment">//私有化构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//创建实例，并私有化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonDemo2</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//将实例返回（可加入synchronized来保证线程安全）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo2</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h1><p>解释：像工厂一样，统一提供产品(<font color=red>实例对象</font>)</p><p>工厂设计模式要素:    产品模板   做产品的设备   工厂   进行生产</p><p>产品模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductModel</span> &#123;<br><br>    <span class="hljs-comment">//创建产品模板</span><br>    ProductModel <span class="hljs-title function_">DOProductModel</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>制造做产品的设备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeProduct1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductModel</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ProductModel <span class="hljs-title function_">DOProductModel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第一种产品&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeProduct2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductModel</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ProductModel <span class="hljs-title function_">DOProductModel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第二种产品&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeProduct3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductModel</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ProductModel <span class="hljs-title function_">DOProductModel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第三种产品&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将设备放入工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> ProductModel <span class="hljs-title function_">MakeProduct</span><span class="hljs-params">(String productname)</span>&#123;<br><br>        <span class="hljs-comment">//创建产品生产设备，根据传入产品名生产产品</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;product1&quot;</span>.equals(productname))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeProduct1</span>().DOProductModel();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;product2&quot;</span>.equals(productname))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeProduct2</span>().DOProductModel();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;product3&quot;</span>.equals(productname))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeProduct3</span>().DOProductModel();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户下订单生产</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建工厂对象</span><br>        <span class="hljs-type">ProductFactory</span> <span class="hljs-variable">productFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductFactory</span>();<br><br>        <span class="hljs-comment">//创建产品1</span><br>        <span class="hljs-type">ProductModel</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> productFactory.MakeProduct(<span class="hljs-string">&quot;product1&quot;</span>);<br>        <span class="hljs-comment">//创建产品2</span><br>        <span class="hljs-type">ProductModel</span> <span class="hljs-variable">product2</span> <span class="hljs-operator">=</span> productFactory.MakeProduct(<span class="hljs-string">&quot;product2&quot;</span>);<br>        <span class="hljs-comment">//创建产品3</span><br>        <span class="hljs-type">ProductModel</span> <span class="hljs-variable">product3</span> <span class="hljs-operator">=</span> productFactory.MakeProduct(<span class="hljs-string">&quot;product3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><ul><li>代理的作用1:除了当前类的功能以外，添加其它的功能</li></ul><p>注：解决疑问，为什么不在原来的类中直接添加功能<br>答：java一直实行单一功能编程，功能越少，改动的几率就越小，如果在本类中进行功能的添加改变，当增加的功能需要更改时，就要在本类中进行查找，而该类添加的方法太多在修改时容易出错</p><ul><li>代理的作用2:控制其它类对该类的访问，使其它类无法对基类进行更改</li></ul><p>注：解决疑问，继承也不能对基类进行更改，为什么要出现代理呢<br>答：在子类中使用方法时，对象点方法名会暴露基类中有的方法，而如果使用了代理后，可以将基类的方法封装至代理类创建的方法中，在其它类 创建代理类的对象点方法名时就只能看到代理类的方法，对基类的方法就进行了保护<br>理解即提取基类的一部分方法放在代理类中，新类只能看到代理类的方法</p><ul><li>分类静态代理和动态代理</li></ul><p>静态代理和动态代理的区别是，静态代理是 有确定的要代理的类<br>动态代理没有确定的要代理的类，是使用泛化方式写的，相当于将创建代理这种直接交给机器处理（aop就是使用动态代理，原理就在这）</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h3><p>注：例1是网上流传的静态代理，例2是java思想编程上的代理，我偏向于例2，因为例1在测试类依然会创建基类的对象，也就能得到基类的其它方法，并不能满足 对基类访问控制</p><ul><li>基类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sell</span>&#123;<br><span class="hljs-comment">//委托类、基类</span><br><span class="hljs-comment">//这个类 理解：master自己要做的事情</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GiveGoods</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;拿出货物&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GetMoney</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;收钱&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//老板的另外功能进货</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GetGoods</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;进货&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>先创建接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sell</span> &#123;<br><span class="hljs-comment">//为了创建一个相同格式的代理类而创建的一个接口</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">GiveGoods</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">GetMoney</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建代理类将基类方法封装至代理类中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sell</span>&#123;<br><br><span class="hljs-comment">//创建一个Sell类型的worker</span><br><span class="hljs-keyword">private</span> Sell worker;<br><br><span class="hljs-comment">//重写构造函数，初始化worker，传入master对象，教worker如何工作</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(Sell master)</span> &#123;<br><span class="hljs-built_in">this</span>.worker = master;<br>&#125;<br><br><span class="hljs-comment">//这个类的理解，招一个员工worker，master教会worker怎么进行销售，且需要他去进行产品讲解和做账目结算</span><br><span class="hljs-comment">//代理类的作用是在不去修改委托类的基础上对其方法进行改写</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GiveGoods</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//添加需要添加的功能</span><br>System.out.println(<span class="hljs-string">&quot;给产品做讲解&quot;</span>);<br><span class="hljs-comment">//将基类的方法封装至代理类的方法中</span><br><span class="hljs-built_in">this</span>.worker.GiveGoods();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GetMoney</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//将基类的方法封装至代理类中</span><br><span class="hljs-built_in">this</span>.worker.GetMoney();<br><span class="hljs-comment">//添加需要添加的功能</span><br>System.out.println(<span class="hljs-string">&quot;做账目结算&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建一个老板对象</span><br><span class="hljs-type">Master</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Master</span>();<br><span class="hljs-comment">//创建一个员工对象，把老板对象的技能交给员工</span><br><span class="hljs-type">Worker</span> <span class="hljs-variable">W</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(m);<br><span class="hljs-comment">//员工做老板规定的工作</span><br>W.GiveGoods();<br>W.GetMoney();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h3><ul><li>基类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpaceShipControls</span> &#123;<br><span class="hljs-comment">//这是一个控制器类</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;向上移动&quot;</span>+x+ <span class="hljs-string">&quot;m&quot;</span>);<br>&#125;;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;向下移动&quot;</span>+x+ <span class="hljs-string">&quot;m&quot;</span>);<br>&#125;;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">left</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;向左移动&quot;</span>+x+ <span class="hljs-string">&quot;m&quot;</span>);<br>&#125;;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;向右移动&quot;</span>+x+ <span class="hljs-string">&quot;m&quot;</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpaceShipDelegation</span> &#123;<br><br><span class="hljs-comment">//创建一个控制器的对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">SpaceShipControls</span> <span class="hljs-variable">control</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpaceShipControls</span>();<br><br><span class="hljs-comment">//将控制器的功能赋予代理飞船</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>control.up(x);<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>control.down(x);<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">left</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>control.left(x);<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>control.right(x);<br>&#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">SpaceShipDelegation</span> <span class="hljs-variable">protector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpaceShipDelegation</span>();<br>protector.up(<span class="hljs-number">100</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="举例3（完全理解的举例）"><a href="#举例3（完全理解的举例）" class="headerlink" title="举例3（完全理解的举例）"></a>举例3（完全理解的举例）</h3><ul><li>基类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">publicInterface</span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这是基类</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Dosth</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;基类做一些事情&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DosthElse</span><span class="hljs-params">(String arg)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;基类做一些其它的事&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">publicInterface</span> &#123;<br><span class="hljs-comment">//基于基类方法创建一个接口，方便创建的代理类能够与基类类型相同</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">Dosth</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">DosthElse</span><span class="hljs-params">(String arg)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">publicInterface</span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这是代理类实现与基类相同的接口</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//给代理类创建一个对象</span><br><span class="hljs-keyword">private</span> publicInterface piface;<br><br><span class="hljs-comment">//通过构造器将基类的对象传给代理类的对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyClass</span><span class="hljs-params">(publicInterface Proxyiface)</span> &#123;<br><span class="hljs-comment">//将基类的对象赋予代理类中</span><br><span class="hljs-built_in">this</span>.piface = Proxyiface;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 下面两个方法是对基类的两个方法进行改写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Dosth</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;代理类做Dosth之前做额外的事&quot;</span>);<br><span class="hljs-comment">//将基类的方法放在代理类的方法中 解决问题：为什么piface可以点出基类的方法，在构造方法中将基类对象赋给了代理类</span><br>piface.Dosth();<br>System.out.println(<span class="hljs-string">&quot;代理类做Dosth之后做额外的事&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DosthElse</span><span class="hljs-params">(String arg)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;代理类做DosthElse之前做额外的事&quot;</span>);<br><span class="hljs-comment">//同上</span><br>piface.DosthElse(arg);<br>System.out.println(<span class="hljs-string">&quot;代理类做DosthElse之后做额外的事&quot;</span>);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这是测试类</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//此方法是为了方便下面main方法传入什么对象更加直观</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">(publicInterface newiface)</span> &#123;<br>newiface.Dosth();<br>newiface.DosthElse(<span class="hljs-string">&quot;传入的参数&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//使用基类对象，使用方法</span><br>consumer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RealClass</span>());<br><span class="hljs-comment">//使用代理类对象，使用方法(将基类的对象传给代理类的对象)</span><br>consumer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyClass</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RealClass</span>()));<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="举例（对照前面的静态代理）"><a href="#举例（对照前面的静态代理）" class="headerlink" title="举例（对照前面的静态代理）"></a>举例（对照前面的静态代理）</h3><p>注：比较于静态代理其实就是一个泛化，静态代理是程序员自己创建代理类，动态代理是自动生成，所以就应该能对所有的类有作用，所以 前面静态代理例子与下面的动态代理例子不同的地方就是处理泛化的问题。实际就是实现动态代理的接口的invoke方法</p><ul><li>基类（基类和接口都是使用前面静态代理一模一样的，方便对照理解）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">publicInterface</span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这是基类</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Dosth</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;原类做一些事情&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DosthElse</span><span class="hljs-params">(String arg)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;原类做一些其它的事&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接口类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">publicInterface</span> &#123;<br><span class="hljs-comment">//基于基类方法创建一个接口，方便创建的代理类能够与基类类型相同</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">Dosth</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">DosthElse</span><span class="hljs-params">(String arg)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxyClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br><br><span class="hljs-comment">//为动态代理创建类一个容器，因为不知道基类是什么就使用object作为基类和代理类的共同 类型 ，静态代理这里是写的基类和代理类的都实现的同一个接口</span><br><span class="hljs-keyword">private</span> Object dynamicproxy;<br><br><span class="hljs-comment">//用proxies来指代需要被代理的类对象，然后将其赋值给动态代理类对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicProxyClass</span><span class="hljs-params">(Object proxies)</span> &#123;<br><span class="hljs-built_in">this</span>.dynamicproxy = proxies;<br>&#125;<br><br><span class="hljs-comment">//这个方法的作用是将基类类中的方法进行分别封装至代理类对应的方法中 可以对照静态代理的  对基类方法进行改写的类 由于动态代理的类是未知的，所以使用invoke这个方法来表示未知的基类中的方方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>System.out.println(<span class="hljs-string">&quot;这里可以做对基类方法执行前添加其它功能，如获取时间&quot;</span>);<br><span class="hljs-comment">//这个用来指代基类的方法，其中proxy是前面的代理对象，args是参数列表,如果不想进行改写的话可以直接下面返回method.invoke(dynamicproxy, args)</span><br><span class="hljs-comment">//invoke方法中的第一个参数是 所代理类的对象,第二个参数是 所代理的方法的参数列表</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> method.invoke(dynamicproxy, args);<br>System.out.println(<span class="hljs-string">&quot;这里可以做对基类方法执行后添加其它功能，如打印日志&quot;</span>);<br><span class="hljs-keyword">return</span> object;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-comment">//此方法是为了方便下面main方法传入什么对象更加直观</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">(publicInterface newiface)</span> &#123;<br>newiface.Dosth();<br>newiface.DosthElse(<span class="hljs-string">&quot;传入的参数&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//这两步时直接执行基类，real是基类对象</span><br><span class="hljs-type">RealClass</span> <span class="hljs-variable">real</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealClass</span>();<br>consumer(real);<br><span class="hljs-comment">//这里是使用newProxyInstance方法创建代理类的对象 取个名字newiface，前面的(publicInterface)强转是前面用object来代替的 基类和代理类的共同接口</span><br><span class="hljs-comment">//publicInterface是接口作为 代理类对象的类型,newProxyInstance中传入的值获得一个类加载器（通常是获得已经被加载的加载器，这里是获取接口的加载器），第二个是接口，第三个是初始化动态代理类，使用其构造方法</span><br><span class="hljs-comment">//理解 正常的创建类的对象是 publicInterface newiface = new DynamicProxyClass(real)，但是动态代理类是实现的InvocationHandler而不是 前面基类实现的那个接口，所以将两个结合起来，静态代理这里是直接前面那样写的</span><br><span class="hljs-type">publicInterface</span> <span class="hljs-variable">newiface</span> <span class="hljs-operator">=</span> (publicInterface) Proxy.newProxyInstance(publicInterface.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;publicInterface.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxyClass</span>(real));<br>consumer(newiface);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GC垃圾回收思想</title>
    <link href="/2020/10/01/java%E5%9F%BA%E7%A1%80-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%80%9D%E6%83%B3/"/>
    <url>/2020/10/01/java%E5%9F%BA%E7%A1%80-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%80%9D%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<ul><li>垃圾回收是对内存空间的清理，主要是对无引用的对象在堆中的内存空间的释放</li><li>回收思想的历程<ul><li>引用计数法：对堆中的对象的引用数进行计数，遍历所有对象的引用数，若存在&#x3D;0的情况，就对该对象进行释放 缺点：当对象之间存在循环引用的情况时，对象该被清理，但引用数却&gt;0，所以这种方法未被应用于任何一种java虚拟机</li><li>tracing算法：从堆栈和静态存储区开始对所有的引用进行遍历，对发现的引用追踪其对象，直到所有的”活“的对象都被找到，未被找到的就是垃圾，这就解决了上面循环引用的弊端</li><li>清理垃圾 ”标记-清扫“ 方法，对找到的”活“的对象进行标记，对未标记的对象进行 垃圾回收清扫<br>缺点：由于是只对未”活“的对象进行清扫，所以会产生磁盘碎片</li><li>重新对对象分配内存空间，方法名 停止-复制<br>做法：首先是停止程序的运行，(使用标记-清扫)将原堆中活的对象复制到另外一个堆中，在另外一个堆中就会紧凑排列<br>缺点：效率很低，需要两个堆，而且要在两个堆中来回倒腾，生命周期长的对象会在两个堆之间多次来回复制</li><li>为解决两个堆的问题，对堆进行分块处理，复制动作发生在几个大块之间<br>缺点：生命周期长的对象依然需要从一处复制到另一处</li><li>方法基于对象生命周期长短差异的特点 首先是对堆进行分区，新生代、老年代、永久代<ul><li>新创建的对象首先都出现在新生代中，将这个区再进行分块8：1：1的比例分为 eden和survivor0和survivor1</li><li>过程：新产生的对象首先都是出现在eden中，当eden中存满时触发minor Gc，使用前面的（标记-清扫、停止-复制）方法，将eden中存活标记的对象复制到survivor0中，将eden清空</li><li>当survivor0中存满时，此时eden中也有了新的对象，触发minor Gc，将eden和survivo0中的存活的对象复制到survivor1中，然后清空eden和survivor0</li><li>清除完成后，eden和survivor0都是空的，于是将survivor1与survivor0交换</li><li>重复前面的步骤，当survivor1中不足以存放eden和survivo0中的对象时，就将存活对象存放在老年代去</li><li>老年代满的时候就会触发一次 major GC即FULL GC</li><li>永久代一般是存放的静态文件，如java类和方法等，当JVM发现某些类或者方法未被使用就会被回收，这个区域对 垃圾回收的方式要求不高</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基本数据流</title>
    <link href="/2020/10/01/java%E5%9F%BA%E7%A1%80-IO%E6%B5%81/"/>
    <url>/2020/10/01/java%E5%9F%BA%E7%A1%80-IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="字节流、字符流"><a href="#字节流、字符流" class="headerlink" title="字节流、字符流"></a>字节流、字符流</h1><ul><li>能用字符流的一定能用字节流</li><li>能用字节流的不一定能用字符流</li></ul><hr><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>连接数据源 File类构建路径</li><li>拿到字节流或字符流对象</li><li>输入或者输出操作</li><li>关闭字节流或者关闭字符流</li></ul><hr><ul><li>文件操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建文件路径,创建文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\SimpleManWp\\Desktop&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123.txt&quot;</span>;<br>    <span class="hljs-comment">//根据路径和文件名创建文件对象</span><br>    File f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path,filename); <br>    System.out.println(<span class="hljs-string">&quot;文件长度：&quot;</span>+f.length()+<span class="hljs-string">&quot;字节&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;文件或者目录：&quot;</span>+(f.isFile()?<span class="hljs-string">&quot;是文件&quot;</span>:<span class="hljs-string">&quot;不是文件&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;文件或者目录：&quot;</span>+(f.isDirectory()?<span class="hljs-string">&quot;是目录&quot;</span>:<span class="hljs-string">&quot;不是目录&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;是否可读：&quot;</span>+(f.canRead()?<span class="hljs-string">&quot;可读取&quot;</span>:<span class="hljs-string">&quot;不可读取&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;是否可写：&quot;</span>+(f.canWrite()?<span class="hljs-string">&quot;可写入&quot;</span>:<span class="hljs-string">&quot;不可写入&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;是否隐藏：&quot;</span>+(f.isHidden()?<span class="hljs-string">&quot;是隐藏文件&quot;</span>:<span class="hljs-string">&quot;不是隐藏文件&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;最后修改日期：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(f.lastModified()));<br>    System.out.println(<span class="hljs-string">&quot;文件名称：&quot;</span>+f.getName());<br>    System.out.println(<span class="hljs-string">&quot;文件路径：&quot;</span>+f.getPath());<br>    System.out.println(<span class="hljs-string">&quot;绝对路径：&quot;</span>+f.getAbsolutePath());<br>    <span class="hljs-comment">//删除文件 和 创建新文件</span><br>    <span class="hljs-keyword">if</span>(f.exists()) &#123;<br>        f.delete();<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        f.createNewFile();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：File不是创建文件的函数，而是创建路径的函数；new File(),括号中填的参数列表只要能拼出路径就行</p><ul><li>目录操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\SimpleManWp\\Desktop\\123&quot;</span>;<br><span class="hljs-comment">//创建路径对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br><span class="hljs-keyword">if</span>(f.exists()) &#123;<br>    f.delete();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    f.mkdir();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>遍历目录下的文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\SimpleManWp\\Desktop&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>String Filelist[] = f.list();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;Filelist.length;i++)<br>&#123;    <span class="hljs-comment">//遍历返回的字符数组</span><br>    System.out.print(Filelist[i]+<span class="hljs-string">&quot;\t\t&quot;</span>);<br>    System.out.print((<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\\\Users\\\\SimpleManWp\\\\Desktop&quot;</span>,Filelist[i])).isFile()?<span class="hljs-string">&quot;文件&quot;</span>+ <span class="hljs-string">&quot;\t\t&quot;</span>:<span class="hljs-string">&quot;文件夹&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>);<br>    System.out.println((<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\\\Users\\\\SimpleManWp\\\\Desktop&quot;</span>,Filelist[i])).length()+<span class="hljs-string">&quot;字节&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>显示目录下的 特定文件类型的 文件<ul><li>实现文件名过滤接口</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilenameFilter</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(File dir, String name)</span> &#123;<br><span class="hljs-comment">//过滤文件格式为.txt和.exe的文件</span><br><span class="hljs-keyword">return</span> name.endsWith(<span class="hljs-string">&quot;.txt&quot;</span>)||name.endsWith(<span class="hljs-string">&quot;.exe&quot;</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\SimpleManWp\\Desktop&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br><span class="hljs-comment">//获取 文件名过滤的文件</span><br>String Filelist[] = f.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileFilter</span>());<br><span class="hljs-comment">//遍历文件</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;Filelist.length;i++)<br>        &#123;    <span class="hljs-comment">//遍历返回的字符数组</span><br>            System.out.print(Filelist[i]+<span class="hljs-string">&quot;\t\t&quot;</span>);<br>            System.out.print((<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\\\Users\\\\SimpleManWp\\\\Desktop&quot;</span>,Filelist[i])).isFile()?<span class="hljs-string">&quot;文件&quot;</span>+ <span class="hljs-string">&quot;\t\t&quot;</span>:<span class="hljs-string">&quot;文件夹&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>);<br>            System.out.println((<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\\\Users\\\\SimpleManWp\\\\Desktop&quot;</span>,Filelist[i])).length()+<span class="hljs-string">&quot;字节&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>参考<br><a href="http://c.biancheng.net/view/1133.html">http://c.biancheng.net/view/1133.html</a></p><h4 id="动态读取文件"><a href="#动态读取文件" class="headerlink" title="动态读取文件"></a>动态读取文件</h4><h5 id="RandomAccessFile篇"><a href="#RandomAccessFile篇" class="headerlink" title="RandomAccessFile篇"></a>RandomAccessFile篇</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">wjrw</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//固定路径下创建一个文件</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\SimpleManWp\\Desktop\\123.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br><span class="hljs-keyword">if</span>(file.exists()) &#123;<br>file.delete();<br><br><span class="hljs-keyword">try</span> &#123;<br>file.createNewFile();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>file.createNewFile();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file,<span class="hljs-string">&quot;rw&quot;</span>);<br><span class="hljs-comment">//创建要写入的字符串</span><br>String str1=<span class="hljs-string">&quot;男儿横行当有术，区区莽夫难登天&quot;</span>;<br><span class="hljs-comment">//进行编码转换</span><br><span class="hljs-keyword">try</span> &#123;<br>String str2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str1.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>),<span class="hljs-string">&quot;iso8859-1&quot;</span>);<br><span class="hljs-comment">//将要写入的 字符串写入文件</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//按照内容不同使用不同的方法</span><br>rf.writeBytes(str2);<br><span class="hljs-comment">//获取当前指针的位置</span><br>System.out.println(rf.getFilePointer());<br><span class="hljs-comment">//移动指针位置</span><br>rf.seek(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//创建一个定长的数组</span><br><span class="hljs-type">byte</span>[] buffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">14</span>];<br><span class="hljs-comment">//read函数 在文件rf中的当前指针下截取(buffer长度)数据放在buffer数组中</span><br>rf.read(buffer);<br><span class="hljs-comment">//将数组buffer中的数据以字符串形式输出</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>e.printStackTrace();<br>&#125; <br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：使用read()方法后，指针会进行移位<br>例: 文件中的句子为 “男儿横行当有术，区区莽夫难登天”,下面打印的就是”区区莽夫难登天”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个定长数组</span><br><span class="hljs-type">byte</span>[] buffer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">14</span>];<br><span class="hljs-type">byte</span>[] buffer2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">byte</span>[] buffer3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">14</span>];<br><span class="hljs-comment">//读取rf当前 指针下 buffer1长度的 数据放在buffer中</span><br><span class="hljs-comment">//执行之后指针跳至第7个汉字之后</span><br>rf.read(buffer1);<br><span class="hljs-comment">//执行之后指针跳至第8个汉字之后</span><br>rf.read(buffer2);<br><span class="hljs-comment">//执行之后指针跳至第15个汉字之后</span><br>rf.read(buffer3);<br>System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer3));<br></code></pre></td></tr></table></figure><ul><li>循环获取<br>根据前面两种结合，循环读取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] buffer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=rf.read(buffer1))!=-<span class="hljs-number">1</span>) &#123;<br>System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer1));<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_41543601/article/details/88638342">https://blog.csdn.net/weixin_41543601/article/details/88638342</a></p><h2 id="InputStream篇"><a href="#InputStream篇" class="headerlink" title="InputStream篇"></a>InputStream篇</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><ul><li>第一种读取固定长度的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:/Users/SimpleManWp/Desktop&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试文件.txt&quot;</span>;<br>    <span class="hljs-comment">//只要括号中能拼出路径就行了，写法多样</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path,name);<br><br>    <span class="hljs-comment">//拿到需要读取的字节流对象</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><br>    <span class="hljs-comment">//创建一个去拿数据的byte数组</span><br>    <span class="hljs-type">byte</span> bytes[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">7</span>];<br>    <span class="hljs-comment">//自我理解用创建的byte数组去input里面去装</span><br>    input.read(bytes);   <span class="hljs-comment">//亲测，txt中换行符占两个字节</span><br>    <span class="hljs-comment">//关闭</span><br>    input.close();<br><br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二种读取文件大小的数据，直接读取全部</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:/Users/SimpleManWp/Desktop&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试文件.txt&quot;</span>;<br>    <span class="hljs-comment">//只要括号中能拼出路径就行了，写法多样</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path,name);<br><br>    <span class="hljs-comment">//拿到需要读取的字节流对象</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><br>    <span class="hljs-comment">//创建一个去拿数据的byte数组,数组大小为文件大小</span><br>    <span class="hljs-type">byte</span> bytes[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)file.length()];<br>    input.read(bytes);<br>    <span class="hljs-comment">//关闭</span><br>    input.close();<br><br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br></code></pre></td></tr></table></figure><ul><li>第三种读取文件大小的数据，挨个读取字节，不存在下一个的时候停止</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:/Users/SimpleManWp/Desktop&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试文件.txt&quot;</span>;<br>    <span class="hljs-comment">//只要括号中能拼出路径就行了，写法多样</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path,name);<br><br>    <span class="hljs-comment">//拿到需要读取的字节流对象</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><br>    <span class="hljs-comment">//创建一个去拿数据的byte数组,数组大小为文件大小</span><br>    <span class="hljs-type">byte</span> bytes[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)file.length()];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>    <span class="hljs-comment">//挨个读取input中的每个字节，当出现读取不到，read()返回值为-1的时候，就不再读取（read读取到的每个字节都会对应一个数字，当为空的时候为-1）</span><br>    <span class="hljs-keyword">while</span>((temp=input.read())!=-<span class="hljs-number">1</span>)&#123;<br>        bytes[len] = (<span class="hljs-type">byte</span>)temp ;<br>        len++ ;<br>    &#125;<br><br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/kongxianghao/articles/6879367.html">https://www.cnblogs.com/kongxianghao/articles/6879367.html</a></p><h2 id="outputStream篇"><a href="#outputStream篇" class="headerlink" title="outputStream篇"></a>outputStream篇</h2><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><ul><li>按字节流来读取和写入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br><span class="hljs-comment">//获取文件路径对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">intfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:/Users/SimpleManWp/Desktop/桌面文件.txt&quot;</span>);<br><span class="hljs-comment">//创建文件对象</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(intfile);<br><span class="hljs-comment">//创建读取文件大小的byte数组</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) intfile.length()];<br><span class="hljs-comment">//将读取的数据放在创建的数组中</span><br>input.read(bytes);<br><span class="hljs-comment">//byte数组中得到的 是字节流，强转char，字节流转字符流</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;bytes.length;i++)&#123;<br>System.out.println((<span class="hljs-type">char</span>)bytes[i]);<br>&#125;<br><span class="hljs-comment">//关闭文件读取</span><br>input.close();<br><br><span class="hljs-comment">//获取要写入的字符串，添加&quot;\r&quot;、&quot;\n&quot;、&quot;\r\n&quot;都是换行,&quot;\t&quot;是空格</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;66666&quot;</span> +<span class="hljs-string">&quot;\r&quot;</span> +<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;123&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br><span class="hljs-comment">//获取文件路径对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:/Users/SimpleManWp/Desktop/桌面文件.txt&quot;</span>);<br><span class="hljs-comment">//创建文件对象</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br><span class="hljs-comment">//文件写入新的 byte数组</span><br>output.write(str.getBytes());<br><span class="hljs-comment">//关不文件写入</span><br>output.close();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础小点杂</title>
    <link href="/2020/10/01/java%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%82%B9%E6%9D%82/"/>
    <url>/2020/10/01/java%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%82%B9%E6%9D%82/</url>
    
    <content type="html"><![CDATA[<p><font color='dd0000'>Scanner</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);  <br></code></pre></td></tr></table></figure><p>将控制台获取的信息用scanner对象容器进行接收，使用对象即可以操作输入信息</p><p><font color='dd0000'>循环 break 和 continue</font></p><p>break 跳出循环，无下次循环</p><p>continue 终止当前循环，有下次循环</p><p><font color='dd0000'>方法重载</font></p><p>同一个类终，方法名相同，参数列表不同</p><p><font color='dd0000'>方法重写</font></p><p>子类继承父类时，对父类的方法进行重新覆写</p><p>方法名、返回值类型、形参相同；访问权限&gt;&#x3D;重写前；抛出异常&lt;&#x3D;重写前</p><p><font color='dd0000'>可变参数</font></p><p>一个方法只能有一个可变参数</p><p>可变参数只能在末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(String str,String ... str1)<br></code></pre></td></tr></table></figure><p>用 …表示</p><p><font color='dd0000'>数组  数组的大小是不可变的</font></p><p>定义数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> numbers1[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br></code></pre></td></tr></table></figure><p>数组起始下标为0</p><p><font color='dd0000'>堆栈</font></p><p>栈：声明的名字存在 栈中  main()方法是存在栈里面的，基本数据类型是存在栈中的</p><p>堆：new创建的时候开辟内存空间  也即对象是存在堆中的</p><p><font color='dd0000'>构造器</font></p><ul><li><p>构造器的名字与类名相同，无返回值</p></li><li><p>默认存在一个无参构造器，若存在一个有参构造器，则默认的无参构造器就不存在了</p></li><li><p>new方法时，本质是在调用构造器(首先调用父类的构造器，然后调用子类的构造器，且必须调用父类的构造方法)</p></li><li><p>构造器的作用是初始化值</p></li></ul><p><font color='dd0000'>this与super</font></p><p>this：谁调用代表谁      super：代表父类</p><p>this() 调用本类的构造方法   super()调用父类的构造方法</p><p><font color='dd0000'>抽象类</font></p><ul><li><p>抽象类的方法必须由其非抽象子类实现</p></li><li><p>抽象类中可以有普通方法</p></li><li><p>抽象类有构造方法，但是没有方法实现，也即不能使用new实例化，构造方法用来初始化</p></li></ul><p><font color='dd0000'>接口</font></p><ul><li><p>接口中的方法无实现</p></li><li><p>接口中方法默认为public</p></li><li><p>类实现接口  implements</p></li><li><p>若实现的多个接口中存在多个相同的方法，则实现类中只会出现一个</p></li><li><p>接口中的常量默认为  public static final</p></li><li><p>接口中无构造方法</p></li></ul><p><font color='dd0000'>继承</font></p><p>子类继承了父类的所有方法和成员，但对私有的无权限调用</p><p><font color='dd0000'>类  单继承，多实现；接口多继承</font></p><p><font color='dd0000'>匿名内部类    new 接口</font></p><p><font color='dd0000'>自动拆箱</font></p><p>当一个基础数据类型与封装类进行&#x3D;&#x3D;、+、-、*、&#x2F;运算时，会将封装类进行拆箱，对基础数据类型进行运算。 </p><p><font color='dd0000'>JDK 和 jre区别</font></p><ul><li>JDK包含jre</li><li>JDK是面向开发人员使用的SDK，jre是Java Runtime Enviroment运行环境是面向java程序的使用者</li></ul><p>&#x3D;&#x3D; 和 equals 的区别</p><ul><li>&#x3D;&#x3D; 比较的地址</li><li>equals 比较的是值</li></ul><p><font color='dd0000'>hashCode()和equals()联系</font></p><ul><li>hashcode()返回的是一个hash值，是为了方便查找</li><li>equals() 是用于比较</li><li>equals()比较为 true时，他们的hash值必定相同；equals()比较不同时，他们的hash值也可能相同(数据碰撞的情况)</li></ul><p>hash碰撞</p><p>将任意长度的数据 经过算法 转为 一段有限长度的数据 （无穷转有限，必定会出现碰撞，对于我们用到的遇到碰撞却很小）</p><p>在集合中的应用（集合分为list、set，list有序可重复，set无序不可重复）</p><p>在set中保证不重复，首先会比较hash值，若hash值不同，则必定不重复;若hash值相同，则根据equals()比较，不同则不重复，相同则重复</p><p><font color='dd0000'>Integer.toBinaryString()函数</font></p><p>将10进制以二进制（基数 2）无符号整数形式返回一个整数参数的字符串表示形式。<br>如果参数为负，该无符号整数值为参数加上 2^32；否则等于该参数。</p><p><font color='dd0000'>位运算</font></p><p>^ 异或   相同为0，不同为1</p><p>&amp;与  都为1则为1，不都为1则为0 </p><p>|或   有一个为1则为1，否则为0</p><p>~非  为1则为0，为0则为1</p><p><strong>&lt;&lt;</strong> 左移运算符   向左移位，最低位补0</p><p>例 -1010    &lt;&lt;1   -10100        1010  &lt;&lt;1    10100 </p><p><strong>&gt;&gt;</strong> 右移运算符   向右移位，去掉几个最低位，高位补0或者1与原整数正负有关   </p><p>例 -1010    &gt;&gt;1   0101           1010   &gt;&gt;1   1101</p><p><strong>&gt;&gt;&gt;</strong> 无符号右移运算符   向右移位，去掉几个最低位，高位补0与原整数的正负无关</p><p>例 -1010    &gt;&gt;&gt;1    0101        1010   &gt;&gt;&gt;   0101</p><p>加法算法(使用位运算的算法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Addfunction</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b != <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行第&quot;</span>+ (i++) +<span class="hljs-string">&quot;次&quot;</span> );<br>        <span class="hljs-type">int</span> <span class="hljs-variable">_a</span> <span class="hljs-operator">=</span> a ^ b;<br>        System.out.println(<span class="hljs-string">&quot;a为:&quot;</span>+ Integer.toBinaryString(a));<br>        System.out.println(<span class="hljs-string">&quot;b为:&quot;</span>+ Integer.toBinaryString(b));<br>        System.out.println(<span class="hljs-string">&quot;_a为:&quot;</span>+ Integer.toBinaryString(_a));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">_b</span> <span class="hljs-operator">=</span> (a &amp; b) &lt;&lt; <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;a &amp; b为:&quot;</span>+Integer.toBinaryString(a &amp; b));<br>        System.out.println(<span class="hljs-string">&quot;_b为:&quot;</span>+ Integer.toBinaryString(_b));<br>        a = _a;<br>        b = _b;<br><br>        System.out.println(<span class="hljs-string">&quot;变化后的a为:&quot;</span>+ Integer.toBinaryString(a));<br>        System.out.println(<span class="hljs-string">&quot;变化后的b为:&quot;</span>+ Integer.toBinaryString(b));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> a;<br><br>    <span class="hljs-comment">//_a表示进位的相加    _b 表示不进位的 相加</span><br>    <span class="hljs-comment">//递归执行   _a + _b  直到 不进位的相加不存在</span><br>&#125;<br></code></pre></td></tr></table></figure><p><font color='dd0000'>进制转换</font></p><p>二进制转10进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.parseInt(<span class="hljs-string">&quot;101&quot;</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><font color='dd0000'>补位</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%010d&quot;</span>, youNumber);<br></code></pre></td></tr></table></figure><p><font color='dd0000'>排序</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.sort(list,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;User&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(User user1, User user2)</span> &#123;<br>        <span class="hljs-comment">//此处可自定义比较逻辑</span><br>        <span class="hljs-keyword">return</span> user1.getAge().compareTo(user2.getAge());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><font color='dd0000'>优雅获取执行时间</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>stopWatch.start(<span class="hljs-string">&quot;任务1&quot;</span>);<br>stopWatch.stop();<br>System.out.println(<span class="hljs-string">&quot;该任务耗时为：&quot;</span>+stopWatch.getLastTaskTimeMillis());<br>stopWatch.start(<span class="hljs-string">&quot;任务2&quot;</span>);<br>stopWatch.stop();<br>System.out.println(<span class="hljs-string">&quot;该任务耗时为：&quot;</span>+stopWatch.getLastTaskTimeMillis());<br>System.out.println(<span class="hljs-string">&quot;任务总数为&quot;</span>+stopWatch.getTaskCount()+<span class="hljs-string">&quot;总耗时为：&quot;</span>+stopWatch.getTotalTimeSeconds());<br></code></pre></td></tr></table></figure><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span><br></code></pre></td></tr></table></figure><p>在bean被spring加载初始化之前执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreDestroy</span><br></code></pre></td></tr></table></figure><p>在bean被销毁前执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Qualifier</span><br></code></pre></td></tr></table></figure><p>系统中存在同一类型的多个bean时，通过该注解来指定对应的bean</p>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基本数据类型</title>
    <link href="/2020/10/01/java%E5%9F%BA%E7%A1%80-%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/10/01/java%E5%9F%BA%E7%A1%80-%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<ul><li><p>基本数据类型    </p><ul><li>整数型  byte short int long    <ul><li>long在给值的时候加L</li></ul></li><li>浮点型  flout double   <ul><li>flout在给值的时候加F</li><li>由于浮点型表示一个数的时候是无限接近，在进行运算时一般不用浮点型来表示<ul><li>例如 表示一个人的资质金额的时候 使用 bigdecima</li></ul></li></ul></li><li>字符型 char</li><li>布尔型 Boolean</li></ul></li><li><p>变量初始值</p><p>基本数据类型 整数型0 浮点型0.0 布尔型false 字符型u0000</p><p>引用数据类型 null</p></li><li><p>精度  </p><p>单精度浮点数在机内存占4个字节    float 8位有效数字(不带小数点，且最前面的0不算)</p><p>双精度浮点数在机内存占8个字节double  17位有效数字(不带小数点，0-1之间时前面的0要算)</p></li><li><p>整数型 原码，反码，补码</p><p>反码 除符号位所有的0–&gt;1 1–&gt;0</p><p>补码 反码加1</p><p>注：反码补码出现原因，计算负数相加， 解决 +0和-0的问题，乘法也能转为加法，除法转为减法再转为加法，即四则运算全可转为加法运算</p></li><li><p>类型转换 </p><ul><li><p>自动类型转换    低–&gt;高</p></li><li><p>强制类型转换    高–&gt;低</p><p>注：强制类型转换有精度损失</p></li></ul></li><li><p>字符串连接符</p><p>基本数据类型和字符串混合用的时候，根据顺序来进行加减或者字符串连接</p><p>“”+10+20    —&gt;   1020                             10+20+””    —&gt;  30</p><p> 即字符串出现在最右边则自动转位字符串连接</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础POI引用</title>
    <link href="/2020/01/26/java%E5%9F%BA%E7%A1%80-Poi/"/>
    <url>/2020/01/26/java%E5%9F%BA%E7%A1%80-Poi/</url>
    
    <content type="html"><![CDATA[<h3 id="常规POI使用"><a href="#常规POI使用" class="headerlink" title="常规POI使用"></a>常规POI使用</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;import&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;批量导入&quot;, notes = &quot;批量导入&quot;)</span><br><span class="hljs-meta">@OperLog(operModul = &quot;批量导入&quot;,operType = OperType.INSERT,operDesc = &quot;批量导入&quot;)</span><br><span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">importExcel</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-keyword">return</span> itemService.importExcel(file);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">importExcel</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileExt</span> <span class="hljs-operator">=</span> FileUtil.extName(file.getOriginalFilename());<br>        <span class="hljs-keyword">if</span> (fileExt == <span class="hljs-literal">null</span> || (!<span class="hljs-string">&quot;xls&quot;</span>.equals(fileExt.toLowerCase()) &amp;&amp; !<span class="hljs-string">&quot;xlsx&quot;</span>.equals(fileExt.toLowerCase()))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnDto</span>(MessageUtils.get(<span class="hljs-string">&quot;110009&quot;</span>), <span class="hljs-string">&quot;406&quot;</span>, <span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(file.getInputStream());<span class="hljs-comment">//2003版本</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(file.getInputStream());<span class="hljs-comment">//2007版本</span><br>        &#125;<br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sheet.getPhysicalNumberOfRows(); i++) &#123;<span class="hljs-comment">//循环sheet中的row</span><br>            <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(i);<br>            <span class="hljs-type">ControlItemAddVm</span> <span class="hljs-variable">itemAddVm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ControlItemAddVm</span>();<br>            <span class="hljs-comment">//获取第一个参数放入对象</span><br>            itemAddVm.setItemCode(row.getCell(<span class="hljs-number">0</span>).toString());<br>            <span class="hljs-comment">//做数据存入数据库</span><br>            save(itemAddVm);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        log.error(<span class="hljs-string">&quot;importExcel&quot;</span>,e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><h5 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;文件导出导出&quot;,produces = &quot;application/octet-stream&quot;)</span><br><span class="hljs-meta">@GetMapping(value = &quot;/export&quot;,produces=&quot;application/vnd.ms-excel;charset=UTF-8&quot;)</span><br><span class="hljs-meta">@OperLog(operModul = &quot;文件导出&quot;,operType = OperType.QUERY,operDesc = &quot;文件导出&quot;)</span><br><span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    service.queryItemForExport(response);<br>    <span class="hljs-keyword">return</span> ReturnDto.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* FQC异常单信息导出</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryItemForExport</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br><br>    <span class="hljs-type">OutFileEntity</span> <span class="hljs-variable">outFileEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutFileEntity</span>();<br>    <span class="hljs-comment">//设置文件名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;异常信息&quot;</span> + <span class="hljs-string">&quot;.xls&quot;</span>;<span class="hljs-comment">// 设置要导出的文件的名字</span><br>    outFileEntity.setFileName(fileName);<br>    <span class="hljs-comment">//设置表名</span><br>    outFileEntity.setSheetName(<span class="hljs-string">&quot;异常信息&quot;</span>);<br>    <span class="hljs-comment">//设置第一行表头,英文</span><br>    String[] filedHeaders = &#123;<span class="hljs-string">&quot;fqcNo&quot;</span>,<span class="hljs-string">&quot;inWarehouseNo&quot;</span>,<span class="hljs-string">&quot;aql&quot;</span>,<span class="hljs-string">&quot;materialNo&quot;</span>,<span class="hljs-string">&quot;materialName&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>,<span class="hljs-string">&quot;lotNum&quot;</span>,<span class="hljs-string">&quot;qty&quot;</span>,<span class="hljs-string">&quot;samplingPlan&quot;</span>,<span class="hljs-string">&quot;inspectDate&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>&#125;;<br>    outFileEntity.setFiledHeaders(filedHeaders);<br>    <span class="hljs-comment">//设置第二行表头，中文</span><br>    String[] filedHeadersNotes = &#123;<span class="hljs-string">&quot;单号&quot;</span>,<span class="hljs-string">&quot;入库单号&quot;</span>,<span class="hljs-string">&quot;AQL&quot;</span>,<span class="hljs-string">&quot;料号&quot;</span>,<span class="hljs-string">&quot;物料名称&quot;</span>,<span class="hljs-string">&quot;版本&quot;</span>,<span class="hljs-string">&quot;批号&quot;</span>,<span class="hljs-string">&quot;不良数量&quot;</span>,<span class="hljs-string">&quot;抽样方案&quot;</span>,<span class="hljs-string">&quot;点检日期&quot;</span>,<span class="hljs-string">&quot;判定结果&quot;</span>&#125;;<br>    outFileEntity.setFiledHeadersNotes(filedHeadersNotes);<br><br>    <span class="hljs-comment">//查询出需要导出的数据</span><br>    List&lt;FqcListDto&gt; fqcListDtos = fqcMainMapper.queryItemForExport();<br>    <span class="hljs-comment">//创建报表体</span><br>    List&lt;List&lt;String&gt;&gt; fileBody = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (FqcListDto fqcListDto : fqcListDtos) &#123;<br>        List&lt;String&gt; bodyValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        bodyValue.add(fqcListDto.getFqcNo());<br>        bodyValue.add(fqcListDto.getInWarehouseNo());<br>        bodyValue.add(fqcListDto.getAql());<br>        bodyValue.add(fqcListDto.getMaterialNo());<br>        bodyValue.add(fqcListDto.getMaterialName());<br>        bodyValue.add(fqcListDto.getVersion());<br>        bodyValue.add(fqcListDto.getLotNum());<br>        bodyValue.add(fqcListDto.getQty());<br>        bodyValue.add(fqcListDto.getSamplingPlan());<br>        bodyValue.add(String.valueOf(fqcListDto.getInspectDate()));<br>        bodyValue.add(fqcListDto.getResult());<br>        <span class="hljs-comment">//将数据添加到报表体中</span><br>        fileBody.add(bodyValue);<br>    &#125;<br>    outFileEntity.setFiledBody(fileBody);<br><br>    <span class="hljs-comment">//导出文件</span><br>    ExcelExportUtil.outFile(response,outFileEntity);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h5><p>设置excel格式，可自行调整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelExportUtil</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">short</span> <span class="hljs-variable">borderpx</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置单元格</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> LiuYang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cellStyle 工作簿</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> border border样式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBorderStyle</span><span class="hljs-params">(HSSFCellStyle cellStyle, <span class="hljs-type">short</span> border)</span> &#123;<br>        cellStyle.setBorderBottom(BorderStyle.valueOf(border)); <span class="hljs-comment">// 下边框</span><br>        cellStyle.setBorderLeft(BorderStyle.valueOf(border));<span class="hljs-comment">// 左边框</span><br>        cellStyle.setBorderTop(BorderStyle.valueOf(border));<span class="hljs-comment">// 上边框</span><br>        cellStyle.setBorderRight(BorderStyle.valueOf(border));<span class="hljs-comment">// 右边框</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置字体样式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workbook 工作簿</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 字体类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> height 字体大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> HSSFFont</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HSSFFont <span class="hljs-title function_">setFontStyle</span><span class="hljs-params">(HSSFWorkbook workbook, String name, <span class="hljs-type">short</span> height)</span> &#123;<br>        <span class="hljs-type">HSSFFont</span> <span class="hljs-variable">font</span> <span class="hljs-operator">=</span> workbook.createFont();<br>        font.setFontHeightInPoints(height);<br>        font.setFontName(name);<br>        <span class="hljs-keyword">return</span> font;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outFile</span><span class="hljs-params">(HttpServletResponse response, OutFileEntity outFileEntity)</span>&#123;<br><br>        <span class="hljs-comment">//创建文件对象</span><br>        <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>        <span class="hljs-comment">//创建sheet，设置sheet表名</span><br>        <span class="hljs-type">HSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet(outFileEntity.getSheetName());<br><br>        <span class="hljs-comment">//设置表头单元格格式</span><br>        <span class="hljs-type">HSSFCellStyle</span> <span class="hljs-variable">cellStyleHeader</span> <span class="hljs-operator">=</span> workbook.createCellStyle();<br>        <span class="hljs-comment">//设置边框</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">borderpx</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        setBorderStyle(cellStyleHeader,borderpx);  <span class="hljs-comment">//设置边框</span><br>        cellStyleHeader.setFont(setFontStyle(workbook, <span class="hljs-string">&quot;黑体&quot;</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">12</span>));  <span class="hljs-comment">//设置字体大小与格式</span><br>        cellStyleHeader.setAlignment(HorizontalAlignment.CENTER_SELECTION);<span class="hljs-comment">//左右居中</span><br>        cellStyleHeader.setVerticalAlignment(VerticalAlignment.CENTER);<span class="hljs-comment">//上下居中</span><br><br>        <span class="hljs-comment">//设置表体单元格格式</span><br>        <span class="hljs-type">HSSFCellStyle</span> <span class="hljs-variable">cellStyleBody</span> <span class="hljs-operator">=</span> workbook.createCellStyle();<br>        <span class="hljs-comment">//设置边框</span><br>        setBorderStyle(cellStyleBody,borderpx);   <span class="hljs-comment">//设置边框</span><br>        cellStyleBody.setFont(setFontStyle(workbook, <span class="hljs-string">&quot;宋体&quot;</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">12</span>));   <span class="hljs-comment">//设置字体大小与格式</span><br>        cellStyleBody.setAlignment(HorizontalAlignment.CENTER_SELECTION);<span class="hljs-comment">//左右居中</span><br>        cellStyleBody.setVerticalAlignment(VerticalAlignment.CENTER);<span class="hljs-comment">//上下居中</span><br>        CreationHelper createHelper=workbook.getCreationHelper();<br>        cellStyleBody.setDataFormat(createHelper.createDataFormat().getFormat(<span class="hljs-string">&quot;yyy-mm-dd hh:mm:ss&quot;</span>));<br><br>        <span class="hljs-comment">//创建第一行，即表头</span><br>        <span class="hljs-type">HSSFRow</span> <span class="hljs-variable">filedRow</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 在excel表中添加表头</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; outFileEntity.getFiledHeaders().length; i++) &#123;<br>            <span class="hljs-comment">//创建单元格</span><br>            <span class="hljs-type">HSSFCell</span> <span class="hljs-variable">cellHeader</span> <span class="hljs-operator">=</span> filedRow.createCell(i);<br>            <span class="hljs-comment">//设置单元格格式</span><br>            cellHeader.setCellStyle(cellStyleHeader);<br>            <span class="hljs-comment">//单元格传入数据</span><br>            <span class="hljs-type">HSSFRichTextString</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFRichTextString</span>(outFileEntity.getFiledHeaders()[i]);<br>            cellHeader.setCellValue(text);<br>        &#125;<br>        <span class="hljs-comment">//创建第二行，即表头注释</span><br>        <span class="hljs-type">HSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 在excel表中添加表头</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; outFileEntity.getFiledHeadersNotes().length; i++) &#123;<br>            <span class="hljs-comment">//创建单元格</span><br>            <span class="hljs-type">HSSFCell</span> <span class="hljs-variable">cellHeader</span> <span class="hljs-operator">=</span> row.createCell(i);<br>            <span class="hljs-comment">//设置单元格格式</span><br>            cellHeader.setCellStyle(cellStyleHeader);<br>            <span class="hljs-comment">//单元格传入数据</span><br>            <span class="hljs-type">HSSFRichTextString</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFRichTextString</span>(outFileEntity.getFiledHeadersNotes()[i]);<br>            cellHeader.setCellValue(text);<br>        &#125;<br><br>        <span class="hljs-comment">//锁定表头</span><br>        sheet.createFreezePane(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//文件体添加数据</span><br>        HSSFRow row1;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; outFileEntity.getFiledBody().size(); i++) &#123;<br>            <span class="hljs-comment">//创建行</span><br>            row1 = sheet.createRow(<span class="hljs-number">2</span>+i);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; outFileEntity.getFiledBody().get(i).size(); j++) &#123;<br>                <span class="hljs-comment">//创建单元格</span><br>                <span class="hljs-type">HSSFCell</span> <span class="hljs-variable">cellBodyrow</span> <span class="hljs-operator">=</span> row1.createCell(j);<br>                <span class="hljs-comment">//设置单元格格式</span><br>                cellBodyrow.setCellStyle(cellStyleBody);<br>                <span class="hljs-comment">//单元格传入数据</span><br>                <span class="hljs-keyword">if</span>(outFileEntity.getFiledBody().get(i).get(j) == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(outFileEntity.getFiledBody().get(i).get(j)))&#123;<br>                    cellBodyrow.setCellValue(<span class="hljs-string">&quot;&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    cellBodyrow.setCellValue(outFileEntity.getFiledBody().get(i).get(j));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//设置自适应列宽</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, isize = outFileEntity.getFiledHeaders().length; i &lt; isize; i++) &#123;<br>            sheet.autoSizeColumn(i);<br>        &#125;<br><br>        <span class="hljs-comment">//输出文件</span><br>        response.setContentType(<span class="hljs-string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>                    <span class="hljs-string">&quot;attachment;filename=&quot;</span> + java.net.URLEncoder.encode(outFileEntity.getFileName(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            response.flushBuffer();<br>            workbook.write(response.getOutputStream());<br>            workbook.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Eazypoi使用"><a href="#Eazypoi使用" class="headerlink" title="Eazypoi使用"></a>Eazypoi使用</h3><h4 id="Eazypoi简单表格的使用"><a href="#Eazypoi简单表格的使用" class="headerlink" title="Eazypoi简单表格的使用"></a>Eazypoi简单表格的使用</h4><h5 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.afterturn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easypoi-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEntity</span> &#123;<br><br>    <span class="hljs-meta">@Excel(name = &quot;第一个字段&quot;)</span><br>    <span class="hljs-keyword">private</span> String strOne;<br>    <span class="hljs-meta">@Excel(name = &quot;第二个字段&quot;)</span><br>    <span class="hljs-keyword">private</span> String strTwo;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;TestEntity&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;strOne=&#x27;&quot;</span> + strOne + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, strTwo=&#x27;&quot;</span> + strTwo + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;fileImport&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">fileImport</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    demoService.fileImport(file);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>操作类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fileImport</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ImportParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportParams</span>();<br>    <span class="hljs-comment">//设置表头行数，表头为@Excel注解上的name</span><br>    <span class="hljs-comment">//申明，这里的行数是指这个@Excel注解上的name占excel的行数，如果有英文表头，则直接将英文表头放入标题中行数中</span><br>    params.setHeadRows(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//设置标题行数</span><br>    params.setTitleRows(<span class="hljs-number">0</span>);<br>    List&lt;TestEntity&gt; result = ExcelImportUtil.importExcel(file.getInputStream(),TestEntity.class, params);<br>    <span class="hljs-keyword">for</span> (TestEntity entity:result) &#123;<br>        System.out.println(entity.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.afterturn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easypoi-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实体类字段上加@Excel设置表头</span><br><span class="hljs-meta">@Excel(name = &quot;数量&quot;,width = 25)</span><br><span class="hljs-keyword">private</span> String count;<br></code></pre></td></tr></table></figure><p>注：@Excel中有可以设置的，常用的有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&#123;&quot;显示值_原来值&quot;,&quot;显示值_原来值&quot;&#125;</span><br><span class="hljs-meta">@Excel(name = &quot;性别&quot;,replace = &#123;&quot;女_0&quot;,&quot;男_1&quot;&#125;)</span> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Excel(name = &quot;创建时间&quot;,exportFormat=&quot;yyyy-MM-dd HH:mm:ss&quot;,importFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;fileOutput&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;文件导出&quot;,produces = &quot;application/octet-stream&quot;)</span><br><span class="hljs-keyword">public</span> ReturnDto <span class="hljs-title function_">fileOutput</span><span class="hljs-params">(HttpServletResponse httpServletResponse)</span>&#123;<br>    demoService.fileOutput(httpServletResponse);<br>    <span class="hljs-keyword">return</span> ReturnDto.ok();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>操作类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fileOutput</span><span class="hljs-params">(HttpServletResponse httpServletResponse)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 设置响应输出的头类型</span><br>        httpServletResponse.setHeader(<span class="hljs-string">&quot;content-Type&quot;</span>, <span class="hljs-string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">// 下载文件的默认名称</span><br>        httpServletResponse.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=Test.xls&quot;</span>);<br>        <span class="hljs-comment">//这里可设置sheet的信息</span><br>        <span class="hljs-type">ExportParams</span> <span class="hljs-variable">exportParams</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExportParams</span>();<br>        <span class="hljs-comment">//设置内容， Dto.class为实体类，list为查询出来的数据</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(exportParams, Dto.class, list);<br>        <span class="hljs-comment">//将workbook写入响应流</span><br>        workbook.write(httpServletResponse.getOutputStream());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CloudVisualException</span>(<span class="hljs-string">&quot;文件导出错误，请重试&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Eazypoi复杂表格使用"><a href="#Eazypoi复杂表格使用" class="headerlink" title="Eazypoi复杂表格使用"></a>Eazypoi复杂表格使用</h4><h5 id="导出-2"><a href="#导出-2" class="headerlink" title="导出"></a>导出</h5><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.afterturn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easypoi-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>操作类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建全表list</span><br>List&lt;ExcelExportEntity&gt; colList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ExcelExportEntity&gt;();<br>colList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;第一列&quot;</span>, <span class="hljs-string">&quot;first&quot;</span>));<br>colList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;第二列&quot;</span>, <span class="hljs-string">&quot;second&quot;</span>));<br>colList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;第三列&quot;</span>, <span class="hljs-string">&quot;third&quot;</span>));<br><span class="hljs-comment">//设置合并单月格</span><br>colList.stream().forEach(excelExportEntity -&gt; excelExportEntity.setNeedMerge(<span class="hljs-literal">true</span>));<br><br><span class="hljs-type">ExcelExportEntity</span> <span class="hljs-variable">detailGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;明细&quot;</span>, <span class="hljs-string">&quot;detail&quot;</span>);<br>List&lt;ExcelExportEntity&gt; detailGroupList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ExcelExportEntity&gt;();<br>detailGroupList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;明细第一列&quot;</span>, <span class="hljs-string">&quot;detailFirst&quot;</span>));<br>detailGroupList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;明细第二列&quot;</span>, <span class="hljs-string">&quot;detailSecond&quot;</span>));<br>detailGroupList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;明细第三列&quot;</span>, <span class="hljs-string">&quot;detailThird&quot;</span>));<br>detailGroup.setList(detailGroupList);<br>colList.add(detailGroup);<br><br>List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Map&lt;String, Object&gt;&gt;();<br><span class="hljs-comment">//查询主信息</span><br>List&lt;MainDto&gt; mainDtos = mapper.selectAll(mainVm);<br><span class="hljs-comment">//遍历每一个主信息，查询明细</span><br><span class="hljs-keyword">for</span> (MainDto mainDto:mainDtos) &#123;<br><br>    Map&lt;String, Object&gt; valMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    valMap.put(<span class="hljs-string">&quot;first&quot;</span>, mainDto.getFirst());<br>    valMap.put(<span class="hljs-string">&quot;second&quot;</span>, mainDto.getSecond());<br>    valMap.put(<span class="hljs-string">&quot;third&quot;</span>, mainDto.getThird());<br><br>    <span class="hljs-comment">//查询明细信息</span><br>    List&lt;DetailDto&gt; detailDtos = detailMapper.selectByMainId(mainDto.getMainId());<br><br>    List&lt;Map&lt;String, Object&gt;&gt; deliList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Map&lt;String, Object&gt;&gt;();<br>    <span class="hljs-keyword">for</span> (DetailDto detailDto:detailDtos) &#123;<br>        Map&lt;String, Object&gt; deliValMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        deliValMap.put(<span class="hljs-string">&quot;detailFirst&quot;</span>, detailDto.getDetailFirst());<br>        deliValMap.put(<span class="hljs-string">&quot;detailSecond&quot;</span>, detailDto.getDetailSecond());<br>        deliValMap.put(<span class="hljs-string">&quot;detailThird&quot;</span>, detailDto.getDetailThird());<br>        deliList.add(deliValMap);<br>    &#125;<br>    valMap.put(<span class="hljs-string">&quot;detail&quot;</span>, deliList);<br>    list.add(valMap);<br>&#125;<br><br><span class="hljs-comment">//生成excel文件并导出</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 设置响应输出的头类型</span><br>    httpServletResponse.setHeader(<span class="hljs-string">&quot;content-Type&quot;</span>, <span class="hljs-string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">//设置返回格式</span><br>    httpServletResponse.setContentType(<span class="hljs-string">&quot;application/vnd.ms-excel&quot;</span>);<br>    httpServletResponse.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">// 下载文件的默认名称</span><br>    httpServletResponse.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;XX表.xlsx&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>    <span class="hljs-comment">//这里可设置sheet的信息</span><br>    <span class="hljs-type">ExportParams</span> <span class="hljs-variable">exportParams</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExportParams</span>();<br>    <span class="hljs-comment">//设置表体单元格格式</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(exportParams, colList, list);<br>    workbook.write(httpServletResponse.getOutputStream());<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    log.error(e.getMessage(), e);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CloudmesException</span>(<span class="hljs-string">&quot;文件导出错误，请重试&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="EasyExcel使用"><a href="#EasyExcel使用" class="headerlink" title="EasyExcel使用"></a>EasyExcel使用</h3><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="导入-2"><a href="#导入-2" class="headerlink" title="导入"></a>导入</h4><ul><li><p>使用背景，excel数据量大导致读取的时候内存溢出，可通过EasyExcel解决</p></li><li><p>原理，一行一行解析，可自由调节处理的数据条数</p></li><li><p>实现类(此处是直接用Map去接收的,也可用类去接收每行的数据)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.EasyExcel;<br><span class="hljs-keyword">import</span> com.alibaba.excel.context.AnalysisContext;<br><span class="hljs-keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;<br><span class="hljs-keyword">import</span> com.alibaba.excel.metadata.CellExtra;<br><span class="hljs-keyword">import</span> com.alibaba.excel.read.builder.ExcelReaderBuilder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoOneService</span> &#123;<br><br>    <span class="hljs-comment">//直接使用EasyExcel解析</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] j = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">//创建list集合</span><br>        List&lt;Map&lt;Integer, String&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">//创建listener</span><br>        AnalysisEventListener&lt;Map&lt;Integer, String&gt;&gt; analysisEventListener = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception exception, AnalysisContext context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-built_in">super</span>.onException(exception, context);<br>            &#125;<br><br>            <span class="hljs-comment">//每解析一行数据,该方法会被调用一次</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Map&lt;Integer, String&gt; map, AnalysisContext analysisContext)</span> &#123;<br>                <span class="hljs-comment">//此处可以做很多筛选</span><br>                <span class="hljs-comment">//获取sheetNo</span><br>                analysisContext.readSheetHolder().getSheetNo();<br>                <span class="hljs-comment">//获取sheetName</span><br>                analysisContext.readSheetHolder().getSheetName();<br><br>                <span class="hljs-comment">//由于感觉后面读取的忽略空行不起作用，故此处单独做空行判断(实际业务中可能只需判断一个值是否为空就能判断)</span><br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-number">0</span>) == <span class="hljs-literal">null</span> || StringUtils.isEmpty(map.get(<span class="hljs-number">0</span>)))&#123;<br>                    <span class="hljs-comment">//做业务处理</span><br>                    <span class="hljs-keyword">for</span> (Map&lt;Integer,String&gt; map1:list) &#123;<br>                        j[<span class="hljs-number">0</span>] = j[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>;<br>                        System.out.println(<span class="hljs-string">&quot;第&quot;</span>+ j[<span class="hljs-number">0</span>] +<span class="hljs-string">&quot;行数据是----&quot;</span>+map1.toString());<br>                    &#125;<br>                    <span class="hljs-comment">//清理list</span><br>                    list.clear();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//数据放入list</span><br>                    list.add(map);<br>                    <span class="hljs-comment">//一般处理方式</span><br>                    <span class="hljs-keyword">if</span> (list.size() &gt;= <span class="hljs-number">200</span>) &#123;<br>                        <span class="hljs-comment">//做业务处理</span><br>                        <span class="hljs-keyword">for</span> (Map&lt;Integer,String&gt; map1:list) &#123;<br>                            j[<span class="hljs-number">0</span>] = j[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>;<br>                            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+ j[<span class="hljs-number">0</span>] +<span class="hljs-string">&quot;行数据是----&quot;</span>+map1.toString());<br>                        &#125;<br>                        <span class="hljs-comment">//清理list</span><br>                        list.clear();<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extra</span><span class="hljs-params">(CellExtra extra, AnalysisContext context)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;EXTRA&quot;</span>);<br>                <span class="hljs-built_in">super</span>.extra(extra, context);<br>            &#125;<br><br>            <span class="hljs-comment">//可以用来处理最后剩下的数据</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>                <span class="hljs-comment">//做业务处理</span><br>                <span class="hljs-keyword">for</span> (Map&lt;Integer,String&gt; map1:list) &#123;<br>                    j[<span class="hljs-number">0</span>] = j[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>;<br>                    System.out.println(<span class="hljs-string">&quot;第&quot;</span>+ j[<span class="hljs-number">0</span>] +<span class="hljs-string">&quot;行数据是----&quot;</span>+map1.toString());<br>                &#125;<br>                <span class="hljs-comment">//清理list</span><br>                list.clear();<br>                System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>+analysisContext.readSheetHolder().getSheetName()+<span class="hljs-string">&quot; 已解析完成&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//没解析完一行数据后，如果存在下一行数据就会调这个方法</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">(AnalysisContext context)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.hasNext(context);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">//通过EasyExcel</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            EasyExcel.read(file.getInputStream(),analysisEventListener)<br>                    .headRowNumber(<span class="hljs-number">1</span>) <span class="hljs-comment">//指定表头</span><br>                    .ignoreEmptyRow(<span class="hljs-literal">false</span>) <span class="hljs-comment">//是否忽略空行，感觉不起作用</span><br><span class="hljs-comment">//                    .sheet(1).doRead(); //可指定sheet,指定sheet后用doRead</span><br>                    .doReadAll();<br><br><span class="hljs-comment">//            //也可通过 ExcelReaderBuilder 构建</span><br><span class="hljs-comment">//            ExcelReaderBuilder excelReaderBuilder = new ExcelReaderBuilder();</span><br><span class="hljs-comment">//            excelReaderBuilder.file(file.getInputStream())</span><br><span class="hljs-comment">//                    .registerReadListener(analysisEventListener)</span><br><span class="hljs-comment">//                    .ignoreEmptyRow(true) //忽略空行，感觉不起作用</span><br><span class="hljs-comment">//                    .autoCloseStream(true) //是否自动关闭流</span><br><span class="hljs-comment">//                    .headRowNumber(1) //表头行数</span><br><span class="hljs-comment">//                    .doReadAll();</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="导出-3"><a href="#导出-3" class="headerlink" title="导出"></a>导出</h4><ul><li>实体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelDemoTwoEntity</span> &#123;<br><br>    <span class="hljs-comment">//index 表示导出的excel的下标0为第一列，若不注明index则会直接紧凑排列</span><br><br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;名称&quot;&#125;,index = 0)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;信息&quot;&#125;,index = 1)</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;信息1&quot;&#125;,index = 2)</span><br>    <span class="hljs-keyword">private</span> String message1;<br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;信息2&quot;&#125;,index = 3)</span><br>    <span class="hljs-keyword">private</span> String message2;<br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;信息3&quot;&#125;,index = 4)</span><br>    <span class="hljs-keyword">private</span> String message3;<br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;信息4&quot;&#125;,index = 5)</span><br>    <span class="hljs-keyword">private</span> String message4;<br>    <span class="hljs-meta">@DateTimeFormat(&quot;yyyyMMddHHmmss&quot;)</span><br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;日期1&quot;&#125;,index = 6)</span><br>    <span class="hljs-keyword">private</span> Date date1;<br>    <span class="hljs-meta">@NumberFormat(&quot;#.##%&quot;)</span><br>    <span class="hljs-meta">@ExcelProperty(value = &#123;&quot;公共头&quot;,&quot;数字1&quot;&#125;,index = 7)</span><br>    <span class="hljs-keyword">private</span> Double number1;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>简单的导出实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;<br>    List&lt;ExcelDemoTwoEntity&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>        <span class="hljs-comment">//创建数据</span><br>        <span class="hljs-type">ExcelDemoTwoEntity</span> <span class="hljs-variable">excelDemoTwoEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelDemoTwoEntity</span>();<br>        excelDemoTwoEntity.setName(<span class="hljs-string">&quot;name&quot;</span>+i);<br>        excelDemoTwoEntity.setMessage(<span class="hljs-string">&quot;信息&quot;</span>+i);<br>        excelDemoTwoEntity.setMessage1(<span class="hljs-string">&quot;信息1&quot;</span>+i);<br>        excelDemoTwoEntity.setMessage2(<span class="hljs-string">&quot;信息2&quot;</span>+i);<br>        excelDemoTwoEntity.setMessage3(<span class="hljs-string">&quot;信息3&quot;</span>+i);<br>        excelDemoTwoEntity.setMessage4(<span class="hljs-string">&quot;信息4&quot;</span>+i);<br>        excelDemoTwoEntity.setDate1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        excelDemoTwoEntity.setNumber1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">0.001</span>));<br>        list.add(excelDemoTwoEntity);<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;导出文件&quot;</span>;<br>    response.setContentType(<span class="hljs-string">&quot;application/vnd.ms-excel&quot;</span>);<br>    response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-comment">//最简单的导出</span><br>        EasyExcel.write(response.getOutputStream(), ExcelDemoTwoEntity.class)<br>                .sheet(<span class="hljs-string">&quot;sheet1&quot;</span>)<br>                .doWrite(list);<br><br><span class="hljs-comment">//            //按名称排除列</span><br><span class="hljs-comment">//            Set&lt;String&gt; excludeColumnFiledNames = new HashSet&lt;String&gt;();</span><br><span class="hljs-comment">//            excludeColumnFiledNames.add(&quot;message1&quot;);</span><br><span class="hljs-comment">//            EasyExcel.write(response.getOutputStream(), ExcelDemoTwoEntity.class)</span><br><span class="hljs-comment">//                    .excludeColumnFiledNames(excludeColumnFiledNames)</span><br><span class="hljs-comment">//                    .sheet(&quot;sheet1&quot;).doWrite(list);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            //按下标排除列</span><br><span class="hljs-comment">//            Set&lt;Integer&gt; excludeColumnIndexes = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">//            excludeColumnIndexes.add(2);</span><br><span class="hljs-comment">//            EasyExcel.write(response.getOutputStream(), ExcelDemoTwoEntity.class)</span><br><span class="hljs-comment">//                    .excludeColumnIndexes(excludeColumnIndexes)</span><br><span class="hljs-comment">//                    .sheet(&quot;sheet1&quot;).doWrite(list);</span><br><br><span class="hljs-comment">//            //按名称注明导入的字段</span><br><span class="hljs-comment">//            Set&lt;String&gt; includeColumnFiledNames = new HashSet&lt;String&gt;();</span><br><span class="hljs-comment">//            includeColumnFiledNames.add(&quot;message1&quot;);</span><br><span class="hljs-comment">//            EasyExcel.write(response.getOutputStream(), ExcelDemoTwoEntity.class)</span><br><span class="hljs-comment">//                    .includeColumnFiledNames(includeColumnFiledNames)</span><br><span class="hljs-comment">//                    .sheet(&quot;sheet1&quot;).doWrite(list);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            //按下标注明导入的字段</span><br><span class="hljs-comment">//            Set&lt;Integer&gt; includeColumnIndexes = new HashSet&lt;Integer&gt;();</span><br><span class="hljs-comment">//            includeColumnFiledNames.add(&quot;1&quot;);</span><br><span class="hljs-comment">//            EasyExcel.write(response.getOutputStream(), ExcelDemoTwoEntity.class)</span><br><span class="hljs-comment">//                    .includeColumnIndexes(includeColumnIndexes)</span><br><span class="hljs-comment">//                    .sheet(&quot;sheet1&quot;).doWrite(list);</span><br><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据库创建</title>
    <link href="/2019/10/15/Oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/10/15/Oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>用户、表空间、schema</p><ul><li><p>用户，用户是用来连接和访问数据库</p></li><li><p>表空间，数据存储的实际物理空间 (理解方面:一个表中的数据可能是存在几个表空间中的）</p><p>注：临时表空间是用来 做排序操作，查询视图等操作的临时运行空间，运行完成后自动清理临时对象</p></li><li><p>schema</p><p>Oracle中，创建一个用户默认创建一个缺省的同名schema，一个用户对应一个schema</p><p>理解：创建一个schema就是创建一个对象，该对象将  某些表或者视图关联起来，方便在使用时直接使用schema就能找到</p></li><li><p>创建用户</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> 用户名 identified <span class="hljs-keyword">by</span> 密码 <span class="hljs-keyword">default</span> tablespace 表空间名;<br></code></pre></td></tr></table></figure><p>eg：create user wpuse identified by qwer1111;可以指定表空间，也可以不指定表空间</p><ul><li>删除用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> 用户名 cascade;<br></code></pre></td></tr></table></figure><ul><li>给用户授权</li></ul><p>语法：GRANT 权限1,权限2,权限3 on 表名 to 用户名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CONNECT</span>, RESOURCE, DBA <span class="hljs-keyword">TO</span> 用户名;    <span class="hljs-comment">--- 授登录权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span>, <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">TO</span> 用户名;  <span class="hljs-comment">--- 授特定表CIUD权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">TO</span> 用户名;    <span class="hljs-comment">--- 授特定表所有权限</span><br></code></pre></td></tr></table></figure><ul><li>撤消用户授权</li></ul><p>语法：REVOKE 权限1,权限2,权限3 on 表名 to 用户名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">CONNECT</span>, RESOURCE, DBA <span class="hljs-keyword">from</span> 用户名;<br></code></pre></td></tr></table></figure><ul><li>查询schema  (即查询所有的用户)(sys在Oracle中有最大权限)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sys.dba_users;   <span class="hljs-comment">--- 查询所有的用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sys.uesr_users;   <span class="hljs-comment">--- 查询当前用户的信息</span><br></code></pre></td></tr></table></figure><p>default_tablespace 默认表空间   temporary_tablespace 临时表空间</p><ul><li>创建表空间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>space 表空间名 datafile 表空间位置(带引号) size 表空间大小;<br></code></pre></td></tr></table></figure><p>eg：create tablespace mytablespace datafile ‘d:\ztwork\oracle\oradata\orcl\mytablespace.dbf’ size 10m;</p><ul><li>删除表空间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> tablespace 表空间名;  <span class="hljs-comment">--- 删除空的表空间，但是不包含数据文件</span><br><span class="hljs-keyword">drop</span> tablespace 表空间名 including contents;  <span class="hljs-comment">--- 若表空间不为空，需加上 contents</span><br><span class="hljs-keyword">drop</span> tablespace 表空间名 including datafiles;  <span class="hljs-comment">--- 若还要删除数据文件，需加上 datafiles</span><br><span class="hljs-keyword">drop</span> tablespace 表空间名 including contents <span class="hljs-keyword">and</span> datafiles; <span class="hljs-comment">--- 删除非空表空间以及数据文件</span><br><span class="hljs-keyword">drop</span> tablespace 表空间名 including contents <span class="hljs-keyword">and</span> datafiles CASCADE CONSTRAINTS;  <span class="hljs-comment">--- 若该表空间存在 其它表空间表的 外键约束则需加上 CASCADE CONSTRAINTS</span><br></code></pre></td></tr></table></figure><ul><li>查询表空间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> tablespace_name <span class="hljs-keyword">from</span> sys.dba_tablespaces; <span class="hljs-comment">--- 查询所有的表空间</span><br><span class="hljs-keyword">select</span> tablespace_name <span class="hljs-keyword">from</span> sys.user_tablespaces; <span class="hljs-comment">--- </span><br></code></pre></td></tr></table></figure><ul><li>查询表空间详细信息(与数据文件的关系)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.dba_data_files;<br></code></pre></td></tr></table></figure><p>FILE_NAME 表空间物理存储位置，TABLESPACE_NAME 表空间名称，BYTES 表空间大小</p><p>AUTOEXTENSIBLE 自动增长，MAXBYTES 为重新定义的大小</p><ul><li>查询临时数据文件表空间详细信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sys.dba_temp_files;<br></code></pre></td></tr></table></figure><p><strong>sqlload的使用</strong></p><ul><li>需要导入的文件、ctl文件(做配置导入数据与表字段对应关系)</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlldr 用户/密码@ip:端口/数据库的sid <span class="hljs-attribute">control</span>=ctl执行的文件名 <span class="hljs-attribute">log</span>=日志打印的文件名<br></code></pre></td></tr></table></figure><p>eg：sqlldr wpuse&#x2F;<a href="mailto:&#113;&#119;&#101;&#x72;&#49;&#x31;&#x31;&#49;&#x40;&#49;&#x32;&#x37;&#46;&#48;&#x2e;&#x30;&#x2e;&#x31;">&#113;&#119;&#101;&#x72;&#49;&#x31;&#x31;&#49;&#x40;&#49;&#x32;&#x37;&#46;&#48;&#x2e;&#x30;&#x2e;&#x31;</a>:1521&#x2F;orcl control&#x3D;sqlload.ctl log&#x3D;sqlload.out</p><p>eg：</p><p>sqlldr afa&#x2F;<a href="mailto:&#x61;&#102;&#x61;&#64;&#x31;&#55;&#x32;&#46;&#x33;&#x31;&#x2e;&#x32;&#51;&#x31;&#46;&#49;&#54;&#x39;">&#x61;&#102;&#x61;&#64;&#x31;&#55;&#x32;&#46;&#x33;&#x31;&#x2e;&#x32;&#51;&#x31;&#46;&#49;&#54;&#x39;</a>:1521&#x2F;orcl control&#x3D;sqlload_tro.ctl log&#x3D;sqlload.out</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">LOAD</span> DATA<br>infile <span class="hljs-string">&#x27;文件名地址&#x27;</span><br><span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> 导入的表名<br>(<br>字段名<span class="hljs-number">1</span>(即列名) terminated <span class="hljs-keyword">by</span> 分割方式(whitespace表示空格),<br>字段名<span class="hljs-number">2</span>(即列名) terminated <span class="hljs-keyword">by</span> whitespace,<br>字段名<span class="hljs-number">3</span>(即列名) terminated <span class="hljs-keyword">by</span> whitespace,<br>字段名<span class="hljs-number">4</span>(即列名) terminated <span class="hljs-keyword">by</span> whitespace<br>)<br></code></pre></td></tr></table></figure><p>eg：</p><p>LOAD DATA<br>infile ‘F:\1111111.txt’<br>into table firsttable<br>(<br>id terminated by whitespace,<br>name terminated by whitespace,<br>phone terminated by whitespace,<br>message terminated by whitespace<br>)</p><p><strong>Oracle常用命令</strong></p><ul><li><p>sqlplus    连接Oracle</p></li><li><p>connect&#x2F; as sysdba     获取管理员权限</p><p>shutdown   immediate    关闭数据库</p><p>startup   开启数据库</p></li><li><p>lsnrctl       进入监听器后台管理</p></li><li><p>lsnrctl  start   启动监听器</p></li><li><p>lsnrctl  stop   关闭监听器</p></li><li><p>lsnrctl  status    查看监听器状态</p></li></ul><p>注：该空闲例程用来在Oracle已经关闭，用system等用户无法登录的情况</p><p>sqlplus 连接空闲例程   </p><p>用户名：sys as sysdba</p><p>密码：空</p><p><strong>Oracle连接出现问题</strong></p><ul><li>本地能连接，其它客户端无法连接</li></ul><p>解决办法：在服务端host文件中创建  本地ip对应的域名，监听文件中使用自己创建的域名，当开启监听的时候就会跳过dns解析，其它客户端就能直接连上了</p><ul><li>出现用户被锁定</li></ul><p>解决办法：使用  sys as sysdba 登录sql，alter user 用户名 account unlock;</p><ul><li>出现身份证明检索失败</li></ul><p>解决办法：修改服务端 sqlnet.ora 文件(修改认证方式 NTS为NONE)</p><p>SQLNET.AUTHENTICATION_SERVICES&#x3D; (NTS)</p><p><strong>数据库查询</strong></p><ul><li>查询某个表的某个字段一样的数据      表名:example_table列名:example_row</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> example_table a <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> <br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> example_table <span class="hljs-keyword">where</span> example_row <span class="hljs-operator">=</span> a.example_row <br> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> example_row <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><ul><li>查询两个表的同名字段的所有枚举值(有点像group by的枚举,只不过是两个表)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> same_rowname <span class="hljs-keyword">from</span> example_table1<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> same_rowname <span class="hljs-keyword">from</span> example_table2<br></code></pre></td></tr></table></figure><p>注：查询出的分别两个表的 same_rowname字段枚举值都不允许出现重复，然后合在一起</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> same_rowname <span class="hljs-keyword">from</span> example_table1<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">select</span> same_rowname <span class="hljs-keyword">from</span> example_table2<br></code></pre></td></tr></table></figure><p>注：查询出的 same_rowname允许出现重复,且是 union all前面查询的表 same_rowname可以重复，后面查询的表出现的same_rowname字段枚举值不允许重复</p><ul><li>查询目前数据库的连接情况</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> OSUSER,MACHINE <span class="hljs-keyword">from</span> v$session <span class="hljs-keyword">where</span> status<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ACTIVE&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>表结构</strong> </p><ul><li>VARCHAR2(4 CHAR)与VARCHAR2(4)区别</li></ul><p>VARCHAR2(4)等同于VARCHAR2(4 BYTE)，即VARCHAR2(4 CHAR) 为 VARCHAR2(4)的4倍大小</p><p>超出打开游标的最大数</p><p>出现这种情况只有两种可能</p><p>一就是游标数真的很少，可以用SQL查询下。<br>二、就是重复创建没有及时关闭，例如再循环中创建却没有再循环中关闭，建议检查下代码。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Oracle相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle触发器</title>
    <link href="/2019/10/15/Oracle-%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <url>/2019/10/15/Oracle-%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><ul><li><p>触发器：数据库发生的事件作为另一个事件发生的触发的设计</p></li><li><p>分类：根据触发事件不同分为三类</p><ul><li>数据操作语句（DML）</li><li>数据定义语句（DDL）</li><li>数据库事件</li></ul></li><li><p>DML触发器</p><p>监听数据操作语句</p><p>数据操作语句insert、delete、select、update四种操作语句执行时触发执行另外一个事件</p></li><li><p>补充INSTEAD OF触发器(DML触发器的扩展)</p><p>监听数据操作语句</p><p>当数据操作语句insert、delete、select、update四种操作语句要执行时,用另外的事件执行去替代被监听的语句(即被监听的事件不执行，执行替代后的事件)</p></li><li><p>DDL触发器</p><p>监听数据定义语句</p><p>执行DDL语句时触发，可以监听表的创建</p></li><li><p>数据库事件触发器</p><p>监听数据库事件</p><p>可以监听数据库启动或者关闭、用户登录或者登出</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>Oracle相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2019/10/07/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/10/07/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ul><li><p>标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题## 二级标题### 三级标题#### 四级标题···<br></code></pre></td></tr></table></figure></li><li><p>编号</p><ul><li>句子1</li><li>句子2</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>句子1- 句子2<br></code></pre></td></tr></table></figure></li><li><p>句子特效</p><p><strong>加粗斜体句子</strong></p><p><strong>加粗句子</strong></p><p><em>斜体句子</em></p><p><del>加删除线句子</del></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*加粗斜体句子*</span>**</span><span class="hljs-strong">**加粗句子**</span><span class="hljs-emphasis">*斜体句子*</span>~~加删除线句子~~<br></code></pre></td></tr></table></figure></li><li><p>表格</p><table><thead><tr><th>表头1</th><th>表头2</th><th>表头3</th></tr></thead><tbody><tr><td>数据1</td><td>数据2</td><td>数据3</td></tr><tr><td>数据1.1</td><td>数据2.1</td><td>数据3.1</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">表头1</span>|<span class="hljs-string">表头2</span>|<span class="hljs-string">表头3</span>||<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>||<span class="hljs-string">数据1</span>|<span class="hljs-string">数据2</span>|<span class="hljs-string">数据3</span>||<span class="hljs-string">数据1.1</span>|<span class="hljs-string">数据2.1</span>|<span class="hljs-string">数据3.1</span>|<br></code></pre></td></tr></table></figure></li><li><p>图片</p><p><img src="https://simplemw.gitee.io/blog/2019/10/07/markdown%E8%AF%AD%E6%B3%95/%E4%BE%8B%E5%AD%90%E5%9B%BE%E7%89%87%E5%90%8D%E5%AD%97.jpg" alt="图片名字"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[给添加的图片命名]</span>(图片路径带后缀)<br></code></pre></td></tr></table></figure></li><li><p>超链接</p><p><a href="https://simplemw.gitee.io/blog/2019/10/07/www.baidu.com">百度</a></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">百度</span>](<span class="hljs-name">www.baidu.com</span>)<br></code></pre></td></tr></table></figure></li><li><p>引用</p><blockquote><p>一级引用句子</p></blockquote><blockquote><blockquote><p>二级引用句子</p><blockquote><p>三级引用句子</p></blockquote></blockquote></blockquote><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">引用句子&gt;&gt; 二级引用句子&gt;&gt;&gt; 三级引用句子</span><br></code></pre></td></tr></table></figure></li><li><p>分割线</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">不同格式代码<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">​```代码格式不同格式代码<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易背景音乐添加</title>
    <link href="/2019/10/04/hexo-%E7%BD%91%E6%98%93%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E6%B7%BB%E5%8A%A0/"/>
    <url>/2019/10/04/hexo-%E7%BD%91%E6%98%93%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E6%B7%BB%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="生成单条歌曲"><a href="#生成单条歌曲" class="headerlink" title="生成单条歌曲"></a>生成单条歌曲</h4><ul><li><p>去网易云音乐挑选一首能播放的歌曲</p></li><li><p>歌的详细信息的图片下有一个 生成外链播放器。点开调节里面的参数，确定后获取 html代码中的代码，如</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attribute">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">width</span>=330 <span class="hljs-attribute">height</span>=86 <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=2&amp;id=431610359&amp;auto=1&amp;height=66&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure></li><li><p>直接在html中粘贴就能直接生成</p><p>注：markdown文件中能直接使用html</p></li></ul><h4 id="生成歌单，可上一首下一首"><a href="#生成歌单，可上一首下一首" class="headerlink" title="生成歌单，可上一首下一首"></a>生成歌单，可上一首下一首</h4><ul><li><p>在网易云上新建一个歌单，将能单条生成外链的歌曲放进去</p></li><li><p>分享歌单（不分享不会出现外链接）</p></li><li><p>返回就会在歌曲列表上方出现 生成外链播放器，如上面一样调节参数后，获取 html代码</p></li><li><p>直接使用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attribute">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">width</span>=330 <span class="hljs-attribute">height</span>=220 <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=0&amp;id=3015279952&amp;auto=1&amp;height=430&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="220" src="https://music.163.com/outchain/player?type=0&amp;id=3015279952&amp;auto=1&amp;height=430" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></iframe>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加看板动画特效</title>
    <link href="/2019/10/04/hexo-%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88/"/>
    <url>/2019/10/04/hexo-%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<ul><li><p>安装依赖</p><p>pm install –save hexo-helper-live2d</p></li></ul><p>注：卸载依赖：npm uninstall hexo-helper-live2d</p><p>依赖可以在 主目录的 package.json中查看</p><ul><li><p>选择看板主题（黑猫看板主题）</p><p>npm install live2d-widget-model-hijiki</p><p>注：完成后，主目录的node_moduels文件夹下有相应的文件夹</p></li><li><p>主目录修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#live2d看板动画</span><br><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">log:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-hijiki</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">superSample:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">hOffset:</span> <span class="hljs-number">100</span><br>    <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-100</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">0.5</span><br><span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacityDefault:</span> <span class="hljs-number">0.7</span><br>    <span class="hljs-attr">opacityOnHover:</span> <span class="hljs-number">0.2</span><br></code></pre></td></tr></table></figure></li></ul><p>出处：<a href="https://www.jianshu.com/p/3a6342e16e57">https://www.jianshu.com/p/3a6342e16e57</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人体时钟特效</title>
    <link href="/2019/10/04/hexo-%E4%BA%BA%E4%BD%93%E6%97%B6%E9%92%9F%E7%89%B9%E6%95%88/"/>
    <url>/2019/10/04/hexo-%E4%BA%BA%E4%BD%93%E6%97%B6%E9%92%9F%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li><p>人体时钟特效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script charset=<span class="hljs-string">&quot;Shift_JIS&quot;</span> src=<span class="hljs-string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script charset=<span class="hljs-string">&quot;Shift_JIS&quot;</span> src=<span class="hljs-string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><p>出处：<a href="https://blog.csdn.net/itmyhome1990/article/details/39028013">https://blog.csdn.net/itmyhome1990/article/details/39028013</a></p><ul><li>出现的坑，在传上码云后，打开blog出现，非安全插件问题，选确认才能显示<ul><li>解决办法，网上找到一位博主反编译后去水印的swf文件</li><li><a href="https://download.csdn.net/download/hxhchh/10619546">https://download.csdn.net/download/hxhchh/10619546</a></li></ul></li></ul><h5 id="应用方法"><a href="#应用方法" class="headerlink" title="应用方法"></a>应用方法</h5><ul><li><p>为了分类，方便下一次寻找，在主题目录下的source中新建文件夹 swf，将下载好的文件放入</p></li><li><p>添加time.ejs文件 ..\themes\Chic\layout\_partial\time.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div style=&quot;position: fixed;top: 0 px;width: 160px;height: 70px;text-align:center;left: 84%;top: 71%;&quot;&gt;<br>&lt;center&gt;<br>&lt;embed wmode=&quot;transparent&quot; src=&quot;/blog/swf/clock.swf&quot; quality=&quot;high&quot; bgcolor=&quot;#ffffff&quot; width=&quot;160&quot; height=&quot;70&quot; name=&quot;honehoneclock&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;<br>&lt;/center&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>注：里面属性皆为设置样式</p></li><li><p>修改页面显示配置文件 ..\themes\Chic\layout\layout.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div&gt;    &lt;%- partial(&#x27;_partial/time&#x27;,&#123;cache: true&#125;) %&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>重新部署hexo</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chic主题电线背景特效添加</title>
    <link href="/2019/10/04/hexo-Chic%E7%82%B9%E7%BA%BF%E8%83%8C%E6%99%AF%E7%89%B9%E6%95%88%E6%B7%BB%E5%8A%A0/"/>
    <url>/2019/10/04/hexo-Chic%E7%82%B9%E7%BA%BF%E8%83%8C%E6%99%AF%E7%89%B9%E6%95%88%E6%B7%BB%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="第一种点线特效"><a href="#第一种点线特效" class="headerlink" title="第一种点线特效"></a>第一种点线特效</h3><p>根据 网上大佬Next主题的教程，修改Chic主题（<a href="https://asdfv1929.github.io/2018/07/07/next-add-dynamicbg/%EF%BC%89">https://asdfv1929.github.io/2018/07/07/next-add-dynamicbg/）</a></p><ul><li><p>添加js文件 dynamic.js</p><p>..\themes\Chic\source\js 路径下添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><span class="hljs-keyword">var</span> cw = canvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,<br>  cx = cw / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> ch = canvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,<br>  cy = ch / <span class="hljs-number">2</span>;<br><br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#000&quot;</span>;<br><span class="hljs-keyword">var</span> linesNum = <span class="hljs-number">16</span>;<br><span class="hljs-keyword">var</span> linesRy = [];<br><span class="hljs-keyword">var</span> requestId = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Line</span>(<span class="hljs-params">flag</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = flag;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = &#123;&#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = &#123;&#125;;<br>  <span class="hljs-keyword">if</span> (flag == <span class="hljs-string">&quot;v&quot;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">y</span> = ch;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">x</span> = <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-number">0</span>, ch);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">x</span> = <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-number">0</span>, ch);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-string">&quot;h&quot;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">x</span> = cw;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">y</span> = <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-number">0</span>, cw);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">y</span> = <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-number">0</span>, cw);<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">va</span> = <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-number">25</span>, <span class="hljs-number">100</span>) / <span class="hljs-number">100</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">vb</span> = <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-number">25</span>, <span class="hljs-number">100</span>) / <span class="hljs-number">100</span>;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#ccc&quot;</span>;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">y</span>);<br>    ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">y</span>);<br>    ctx.<span class="hljs-title function_">stroke</span>();<br>  &#125;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> == <span class="hljs-string">&quot;v&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">va</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">vb</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-string">&quot;h&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">va</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">vb</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">edges</span>();<br>  &#125;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> == <span class="hljs-string">&quot;v&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">x</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">x</span> &gt; cw) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">va</span> *= -<span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">x</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">x</span> &gt; cw) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vb</span> *= -<span class="hljs-number">1</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-string">&quot;h&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">y</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>.<span class="hljs-property">y</span> &gt; ch) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">va</span> *= -<span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">y</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>.<span class="hljs-property">y</span> &gt; ch) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vb</span> *= -<span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; linesNum; i++) &#123;<br>  <span class="hljs-keyword">var</span> flag = i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;h&quot;</span> : <span class="hljs-string">&quot;v&quot;</span>;<br>  <span class="hljs-keyword">var</span> l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Line</span>(flag);<br>  linesRy.<span class="hljs-title function_">push</span>(l);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Draw</span>(<span class="hljs-params"></span>) &#123;<br>  requestId = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-title class_">Draw</span>);<br>  ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, cw, ch);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; linesRy.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> l = linesRy[i];<br>    l.<span class="hljs-title function_">draw</span>();<br>    l.<span class="hljs-title function_">update</span>();<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; linesRy.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> l = linesRy[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = i + <span class="hljs-number">1</span>; j &lt; linesRy.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-keyword">var</span> l1 = linesRy[j]<br>      <span class="hljs-title class_">Intersect2</span>lines(l, l1);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Init</span>(<span class="hljs-params"></span>) &#123;<br>  linesRy.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; linesNum; i++) &#123;<br>    <span class="hljs-keyword">var</span> flag = i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;h&quot;</span> : <span class="hljs-string">&quot;v&quot;</span>;<br>    <span class="hljs-keyword">var</span> l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Line</span>(flag);<br>    linesRy.<span class="hljs-title function_">push</span>(l);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (requestId) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(requestId);<br>    requestId = <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  cw = canvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,<br>    cx = cw / <span class="hljs-number">2</span>;<br>  ch = canvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,<br>    cy = ch / <span class="hljs-number">2</span>;<br><br>  <span class="hljs-title class_">Draw</span>();<br>&#125;;<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Init</span>();<br><br>  <span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-title class_">Init</span>, <span class="hljs-literal">false</span>);<br>&#125;, <span class="hljs-number">15</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Intersect2lines</span>(<span class="hljs-params">l1, l2</span>) &#123;<br>  <span class="hljs-keyword">var</span> p1 = l1.<span class="hljs-property">a</span>,<br>    p2 = l1.<span class="hljs-property">b</span>,<br>    p3 = l2.<span class="hljs-property">a</span>,<br>    p4 = l2.<span class="hljs-property">b</span>;<br>  <span class="hljs-keyword">var</span> denominator = (p4.<span class="hljs-property">y</span> - p3.<span class="hljs-property">y</span>) * (p2.<span class="hljs-property">x</span> - p1.<span class="hljs-property">x</span>) - (p4.<span class="hljs-property">x</span> - p3.<span class="hljs-property">x</span>) * (p2.<span class="hljs-property">y</span> - p1.<span class="hljs-property">y</span>);<br>  <span class="hljs-keyword">var</span> ua = ((p4.<span class="hljs-property">x</span> - p3.<span class="hljs-property">x</span>) * (p1.<span class="hljs-property">y</span> - p3.<span class="hljs-property">y</span>) - (p4.<span class="hljs-property">y</span> - p3.<span class="hljs-property">y</span>) * (p1.<span class="hljs-property">x</span> - p3.<span class="hljs-property">x</span>)) / denominator;<br>  <span class="hljs-keyword">var</span> ub = ((p2.<span class="hljs-property">x</span> - p1.<span class="hljs-property">x</span>) * (p1.<span class="hljs-property">y</span> - p3.<span class="hljs-property">y</span>) - (p2.<span class="hljs-property">y</span> - p1.<span class="hljs-property">y</span>) * (p1.<span class="hljs-property">x</span> - p3.<span class="hljs-property">x</span>)) / denominator;<br>  <span class="hljs-keyword">var</span> x = p1.<span class="hljs-property">x</span> + ua * (p2.<span class="hljs-property">x</span> - p1.<span class="hljs-property">x</span>);<br>  <span class="hljs-keyword">var</span> y = p1.<span class="hljs-property">y</span> + ua * (p2.<span class="hljs-property">y</span> - p1.<span class="hljs-property">y</span>);<br>  <span class="hljs-keyword">if</span> (ua &gt; <span class="hljs-number">0</span> &amp;&amp; ub &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title function_">markPoint</span>(&#123;<br>      <span class="hljs-attr">x</span>: x,<br>      <span class="hljs-attr">y</span>: y<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">markPoint</span>(<span class="hljs-params">p</span>) &#123;<br>  ctx.<span class="hljs-title function_">beginPath</span>();<br>  ctx.<span class="hljs-title function_">arc</span>(p.<span class="hljs-property">x</span>, p.<span class="hljs-property">y</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>  ctx.<span class="hljs-title function_">fill</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomIntFromInterval</span>(<span class="hljs-params">mn, mx</span>) &#123;<br>  <span class="hljs-keyword">return</span> ~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (mx - mn + <span class="hljs-number">1</span>) + mn);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加dynamic.ejs文件 ..\themes\Chic\layout\_partial\dynamic.ejs</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/blog/js/dynamic.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：src中的blog是根据路径添加的</p></li><li><p>修改页面显示配置文件 ..\themes\Chic\layout\layout.ejs</p><ul><li>body里添加</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">bg_content</span>&quot;&gt;    &lt;<span class="hljs-symbol">canvas</span> <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">canvas</span>&quot;&gt;&lt;/<span class="hljs-symbol">canvas</span>&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>body外下面添加(写在head里面会报错)</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;%- <span class="hljs-keyword">partial</span>(<span class="hljs-string">&#x27;_partial/dynamic&#x27;</span>,&#123;cache: <span class="hljs-literal">true</span>&#125;) %&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="第二种点线特效"><a href="#第二种点线特效" class="headerlink" title="第二种点线特效"></a>第二种点线特效</h3><ul><li><p>添加pointline.ejs文件 ..\themes\Chic\layout\_partial\pointline.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;script type=&quot;text/javascript&quot;color=&quot;0,0,0&quot; opacity=&#x27;0.2&#x27; zIndex=&quot;-2&quot; count=&quot;120&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注：color-设置颜色 opacity-设置透明度 zIndex-设置堆叠顺序 count-设置线的数量</p></li><li><p>修改页面显示配置文件 ..\themes\Chic\layout\layout.ejs</p><p>注：须在body下外面添加，不然报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;%- partial(&#x27;_partial/pointline&#x27;,&#123;cache: true&#125;) %&gt;<br></code></pre></td></tr></table></figure></li><li><p>重新清理启动</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chic主题爆炸特效添加</title>
    <link href="/2019/10/04/hexo-Chic%E7%88%86%E7%82%B8%E7%89%B9%E6%95%88%E6%B7%BB%E5%8A%A0/"/>
    <url>/2019/10/04/hexo-Chic%E7%88%86%E7%82%B8%E7%89%B9%E6%95%88%E6%B7%BB%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<p>根据 网上大佬Next主题添加爆炸特效，修改Chic主题</p><ul><li><p>添加js文件 fireworks.js</p><p>..\themes\Chic\source\js 路径下添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>)&#123;pointerX=(e.<span class="hljs-property">clientX</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>)-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,pointerY=e.<span class="hljs-property">clientY</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> t=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>,a=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">x</span>:e.<span class="hljs-property">x</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<span class="hljs-attr">y</span>:e.<span class="hljs-property">y</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,colors.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)],a.<span class="hljs-property">radius</span>=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.<span class="hljs-property">endPos</span>=<span class="hljs-title function_">setParticuleDirection</span>(a),a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">fillStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">fill</span>()&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;#F00&quot;</span>,a.<span class="hljs-property">radius</span>=<span class="hljs-number">0.1</span>,a.<span class="hljs-property">alpha</span>=<span class="hljs-number">0.5</span>,a.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>,a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-property">globalAlpha</span>=a.<span class="hljs-property">alpha</span>,ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">lineWidth</span>=a.<span class="hljs-property">lineWidth</span>,ctx.<span class="hljs-property">strokeStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">stroke</span>(),ctx.<span class="hljs-property">globalAlpha</span>=<span class="hljs-number">1</span>&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>;t++)&#123;e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-title function_">createCircle</span>(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createParticule</span>(e,t))&#125;anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:n,<span class="hljs-attr">x</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>&#125;,<span class="hljs-attr">y</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>&#125;,<span class="hljs-attr">radius</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule&#125;).<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:a,<span class="hljs-attr">radius</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),<span class="hljs-attr">lineWidth</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">alpha</span>:&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule,<span class="hljs-attr">offset</span>:<span class="hljs-number">0</span>&#125;)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a;<span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> n=<span class="hljs-variable language_">this</span>,i=<span class="hljs-variable language_">arguments</span>;<span class="hljs-built_in">clearTimeout</span>(a),a=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;e.<span class="hljs-title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="hljs-keyword">var</span> canvasEl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;<span class="hljs-keyword">var</span> ctx=canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;canvasEl.<span class="hljs-property">width</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,canvasEl.<span class="hljs-property">height</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=<span class="hljs-title function_">anime</span>(&#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-attr">update</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.<span class="hljs-property">width</span>,canvasEl.<span class="hljs-property">height</span>)&#125;&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;(render.<span class="hljs-title function_">play</span>(),<span class="hljs-title function_">updateCoords</span>(e),<span class="hljs-title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),<span class="hljs-title function_">setCanvasSize</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;<span class="hljs-string">&quot;use strict&quot;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>)&#123;pointerX=(e.<span class="hljs-property">clientX</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>)-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,pointerY=e.<span class="hljs-property">clientY</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> t=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>,a=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">x</span>:e.<span class="hljs-property">x</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<span class="hljs-attr">y</span>:e.<span class="hljs-property">y</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,colors.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)],a.<span class="hljs-property">radius</span>=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.<span class="hljs-property">endPos</span>=<span class="hljs-title function_">setParticuleDirection</span>(a),a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">fillStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">fill</span>()&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;#F00&quot;</span>,a.<span class="hljs-property">radius</span>=<span class="hljs-number">0.1</span>,a.<span class="hljs-property">alpha</span>=<span class="hljs-number">0.5</span>,a.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>,a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-property">globalAlpha</span>=a.<span class="hljs-property">alpha</span>,ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">lineWidth</span>=a.<span class="hljs-property">lineWidth</span>,ctx.<span class="hljs-property">strokeStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">stroke</span>(),ctx.<span class="hljs-property">globalAlpha</span>=<span class="hljs-number">1</span>&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>;t++)&#123;e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-title function_">createCircle</span>(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createParticule</span>(e,t))&#125;anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:n,<span class="hljs-attr">x</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>&#125;,<span class="hljs-attr">y</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>&#125;,<span class="hljs-attr">radius</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule&#125;).<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:a,<span class="hljs-attr">radius</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),<span class="hljs-attr">lineWidth</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">alpha</span>:&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule,<span class="hljs-attr">offset</span>:<span class="hljs-number">0</span>&#125;)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a;<span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> n=<span class="hljs-variable language_">this</span>,i=<span class="hljs-variable language_">arguments</span>;<span class="hljs-built_in">clearTimeout</span>(a),a=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;e.<span class="hljs-title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="hljs-keyword">var</span> canvasEl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;<span class="hljs-keyword">var</span> ctx=canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;canvasEl.<span class="hljs-property">width</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,canvasEl.<span class="hljs-property">height</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=<span class="hljs-title function_">anime</span>(&#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-attr">update</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.<span class="hljs-property">width</span>,canvasEl.<span class="hljs-property">height</span>)&#125;&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;(render.<span class="hljs-title function_">play</span>(),<span class="hljs-title function_">updateCoords</span>(e),<span class="hljs-title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),<span class="hljs-title function_">setCanvasSize</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;;<br></code></pre></td></tr></table></figure></li><li><p>添加fireworks.ejs文件 ..\themes\Chic\layout\_partial\firework.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;/blog/js/fireworks.js&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>修改页面显示配置文件 ..\themes\Chic\layout\layout.ejs</p><p>body里添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;/div&gt;<br>  &lt;%- partial(&#x27;_partial/firework&#x27;,&#123;cache: true&#125;) %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>textpicture</title>
    <link href="/2019/09/28/hexo-textpicture/"/>
    <url>/2019/09/28/hexo-textpicture/</url>
    
    <content type="html"><![CDATA[<h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p><img src="https://raw.githubusercontent.com/SimpleMw/image/master/touxiang.6nfcw3ts5140.jpg" alt="touxiang"></p>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 命令</title>
    <link href="/2019/09/21/hexo-%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/09/21/hexo-%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>清空资源<br>hexo clean</p></li><li><p>新建文章<br>hexo new “文章名”</p></li><li><p>新建页面</p><p>hexo new page “页面名称”</p></li><li><p>生成资源<br>hexo generate （简写 hexo g）</p></li><li><p>部署服务器<br>hexo server （简写 hexo s）</p></li><li><p>推送github<br>hexo deploy</p></li></ul><hr><ul><li>下载主题<br>git clone 主题github地址 themes&#x2F;别名</li></ul><p>注：下载主题至themes下的 别名文件下</p><ul><li><p>hexo 图片文件插件</p><p>npm install hexo-asset-image -save</p></li><li><p>注：使用的Chic主题</p><p>在第一次初始化时要创建category和tag</p><p>hexo new page tag<br>hexo new page category</p><p>然后分别添加标签</p><p>layout：tag</p><p>layout：category</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>this is the first</title>
    <link href="/2019/09/21/hexo-this-is-the-first/"/>
    <url>/2019/09/21/hexo-this-is-the-first/</url>
    
    <content type="html"><![CDATA[<h4 id="this-is-my-first-blog"><a href="#this-is-my-first-blog" class="headerlink" title="this is my first blog"></a>this is my first blog</h4><ul><li>时间<br>20190921</li><li>地点<br>宿舍</li><li>人物<br>one people</li><li>事件<br>一个人想着一个人</li><li>个性说明<br>愿你余生不必逞强，不必说谎，爱你的人懂你所有模样</li></ul><h2 id="签名：-SimpleMw"><a href="#签名：-SimpleMw" class="headerlink" title="签名： SimpleMw"></a>签名： SimpleMw</h2><hr>]]></content>
    
    
    <categories>
      
      <category>hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
